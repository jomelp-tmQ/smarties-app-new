syntax = "proto3";

option optimize_for = CODE_SIZE;

package tmq;

// ===== CONTENT GENERATION MESSAGES =====

message ContentRequest {
  string format = 1;
  string topic = 2;
  repeated string currentTrends = 3;
  ContentOptions options = 4;
  string userId = 5;
  string apiKey = 6;
}

message ContentOptions {
  string tone = 1;
  string targetAudience = 2;
  string length = 3;
}

message ContentResponse {
  bool success = 1;
  string message = 2;
  bytes content = 3;
  bytes metadata = 4;
  string id = 5;
}

message BatchGenerationRequest {
  repeated ContentRequest requests = 1;
  string userId = 2;
  string apiKey = 3;
}

message BatchGenerationResponse {
  bool success = 1;
  string message = 2;
  string batchId = 3;
  int32 totalProcessed = 4;
  int32 totalErrors = 5;
  repeated bytes results = 6;
}

message FormatsRequest {
  string apiKey = 1;
}

message FormatsResponse {
  bool success = 1;
  string message = 2;
  repeated string formats = 3;
  int32 count = 4;
}

// ===== IMAGE GENERATION MESSAGES =====

message ImageSearchRequest {
  string query = 1;
  ImageSearchOptions options = 2;
  string userId = 3;
  string apiKey = 4;
}

message ImageSearchOptions {
  int32 perPage = 1;
  string orientation = 2;
  string size = 3;
  string color = 4;
}

message ImageSearchResponse {
  bool success = 1;
  string message = 2;
  bytes data = 3;
  int32 totalResults = 4;
}

message CuratedImagesRequest {
  int32 perPage = 1;
  int32 page = 2;
  string userId = 3;
  string apiKey = 4;
}

message PopularImagesRequest {
  int32 perPage = 1;
  int32 page = 2;
  string userId = 3;
  string apiKey = 4;
}

message ImageByIdRequest {
  string id = 1;
  string userId = 2;
  string apiKey = 3;
}

message ImageSuggestionsRequest {
  string topic = 1;
  string userId = 2;
  string apiKey = 3;
}

// ===== CONTENT EDITOR MESSAGES =====

message ContentAnalysisRequest {
  string content = 1;
  repeated string criteria = 2;
  string targetAudience = 3;
  string contentType = 4;
  repeated string keywords = 5;
  string model = 6;
  string userId = 7;
  string apiKey = 8;
}

message ContentAnalysisResponse {
  bool success = 1;
  string message = 2;
  bytes analysis = 3;
  string id = 4;
  string analysisType = 5;
  repeated string criteriaUsed = 6;
}

message QuickAnalysisRequest {
  string content = 1;
  string targetAudience = 2;
  string contentType = 3;
  string userId = 4;
  string apiKey = 5;
}

message CriterionAnalysisRequest {
  string content = 1;
  repeated string criteria = 2;
  string targetAudience = 3;
  string contentType = 4;
  repeated string keywords = 5;
  string model = 6;
  string userId = 7;
  string apiKey = 8;
}

message CriteriaRequest {
  string apiKey = 1;
}

message CriteriaResponse {
  bool success = 1;
  string message = 2;
  repeated string criteria = 3;
  int32 count = 4;
  string description = 5;
}

// ===== HEALTH CHECK MESSAGES =====

message HealthCheckRequest {
  string apiKey = 1;
}

message HealthCheckResponse {
  bool success = 1;
  string message = 2;
  string serviceStatus = 3;
  int32 availableFormats = 4;
  string timestamp = 5;
}

message ImageHealthCheckRequest {
  string apiKey = 1;
}

message ImageHealthCheckResponse {
  bool success = 1;
  string message = 2;
  bytes data = 3;
  string timestamp = 4;
}

message EditorHealthCheckRequest {
  string apiKey = 1;
}

message EditorHealthCheckResponse {
  bool success = 1;
  string message = 2;
  string serviceStatus = 3;
  int32 availableCriteria = 4;
  string timestamp = 5;
}

// ===== CONTENT MANAGEMENT MESSAGES =====

message GetContentRequest {
  string contentId = 1;
}

message ListContentRequest {
  ContentFilters filters = 1;
}

message ContentFilters {
  string format = 1;
  string status = 2;
  string userId = 3;
}

message ListContentResponse {
  repeated ContentItem content = 1;
  int32 count = 2;
  string message = 3;
}

message ContentItem {
  string id = 1;
  string format = 2;
  string topic = 3;
  string status = 4;
  uint64 createdAt = 5;
}



// ===== TRENDS MESSAGES =====

message TrendsRequest {
  repeated string categories = 1;
  string model = 2;
  float temperature = 3;
  string userId = 4;
  string apiKey = 5;
}

message TrendsResponse {
  bool success = 1;
  string message = 2;
  repeated TrendItem data = 3;
  repeated string categories_analyzed = 4;
  int32 total_posts = 5;
  string timestamp = 6;
}

message TrendItem {
  string topic_label = 1;
  string topic_description = 2;
  float topic_strength = 3;
  repeated string top_subreddits = 4;
  string trend_direction = 5;
  float engagement_score = 6;
  bool ai_generated = 7;
  repeated string keywords = 8;
  int32 post_count = 9;
  string sentiment = 10;
  repeated string evidence = 11;
  string summary = 12;
}

// Service definition
service ContentCreationService {
  // Content Generation
  rpc generateContent(ContentRequest) returns (ContentResponse) {}
  rpc generateBatch(BatchGenerationRequest) returns (BatchGenerationResponse) {}
  rpc getFormats(FormatsRequest) returns (FormatsResponse) {}
  
  // Image Generation
  rpc searchImages(ImageSearchRequest) returns (ImageSearchResponse) {}
  rpc searchImagesPost(ImageSearchRequest) returns (ImageSearchResponse) {}
  rpc getCuratedImages(CuratedImagesRequest) returns (ImageSearchResponse) {}
  rpc getPopularImages(PopularImagesRequest) returns (ImageSearchResponse) {}
  rpc getImageById(ImageByIdRequest) returns (ImageSearchResponse) {}
  rpc getImageSuggestions(ImageSuggestionsRequest) returns (ImageSearchResponse) {}
  
  // Content Editor
  rpc analyzeContent(ContentAnalysisRequest) returns (ContentAnalysisResponse) {}
  rpc quickAnalysis(QuickAnalysisRequest) returns (ContentAnalysisResponse) {}
  rpc analyzeCriterion(CriterionAnalysisRequest) returns (ContentAnalysisResponse) {}
  rpc getCriteria(CriteriaRequest) returns (CriteriaResponse) {}
  
  // Trends
  rpc getLatestTrends(TrendsRequest) returns (TrendsResponse) {}
  
  // Health Checks
  rpc healthCheck(HealthCheckRequest) returns (HealthCheckResponse) {}
  rpc imageHealthCheck(ImageHealthCheckRequest) returns (ImageHealthCheckResponse) {}
  rpc editorHealthCheck(EditorHealthCheckRequest) returns (EditorHealthCheckResponse) {}
  
  // Content Management
  rpc getContent(GetContentRequest) returns (ContentResponse) {}
  rpc listContent(ListContentRequest) returns (ListContentResponse) {}
}