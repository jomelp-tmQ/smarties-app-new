/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: tmq/acc.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class AccCustomerIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            userId?: string;
        }): AccCustomerIdRequest {
            const message = new AccCustomerIdRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccCustomerIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccCustomerIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccCustomerIdRequest {
            return AccCustomerIdRequest.deserialize(bytes);
        }
    }
    export class AccCustomerIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            customerId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("customerId" in data && data.customerId != undefined) {
                    this.customerId = data.customerId;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get customerId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set customerId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            customerId?: string;
        }): AccCustomerIdResponse {
            const message = new AccCustomerIdResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.customerId != null) {
                message.customerId = data.customerId;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                customerId?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.customerId != null) {
                data.customerId = this.customerId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.customerId.length)
                writer.writeString(2, this.customerId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccCustomerIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccCustomerIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.customerId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccCustomerIdResponse {
            return AccCustomerIdResponse.deserialize(bytes);
        }
    }
    export class Emails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            verified?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("verified" in data && data.verified != undefined) {
                    this.verified = data.verified;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get verified() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set verified(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            address?: string;
            verified?: string;
        }): Emails {
            const message = new Emails({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.verified != null) {
                message.verified = data.verified;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                verified?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.verified != null) {
                data.verified = this.verified;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.verified.length)
                writer.writeString(2, this.verified);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Emails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Emails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.verified = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Emails {
            return Emails.deserialize(bytes);
        }
    }
    export class Roles extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userRole?: string;
            packageRole?: string;
            packageExpiresAt?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userRole" in data && data.userRole != undefined) {
                    this.userRole = data.userRole;
                }
                if ("packageRole" in data && data.packageRole != undefined) {
                    this.packageRole = data.packageRole;
                }
                if ("packageExpiresAt" in data && data.packageExpiresAt != undefined) {
                    this.packageExpiresAt = data.packageExpiresAt;
                }
            }
        }
        get userRole() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userRole(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get packageRole() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set packageRole(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get packageExpiresAt() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set packageExpiresAt(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            userRole?: string;
            packageRole?: string;
            packageExpiresAt?: number;
        }): Roles {
            const message = new Roles({});
            if (data.userRole != null) {
                message.userRole = data.userRole;
            }
            if (data.packageRole != null) {
                message.packageRole = data.packageRole;
            }
            if (data.packageExpiresAt != null) {
                message.packageExpiresAt = data.packageExpiresAt;
            }
            return message;
        }
        toObject() {
            const data: {
                userRole?: string;
                packageRole?: string;
                packageExpiresAt?: number;
            } = {};
            if (this.userRole != null) {
                data.userRole = this.userRole;
            }
            if (this.packageRole != null) {
                data.packageRole = this.packageRole;
            }
            if (this.packageExpiresAt != null) {
                data.packageExpiresAt = this.packageExpiresAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userRole.length)
                writer.writeString(1, this.userRole);
            if (this.packageRole.length)
                writer.writeString(2, this.packageRole);
            if (this.packageExpiresAt != 0)
                writer.writeInt32(3, this.packageExpiresAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Roles {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Roles();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userRole = reader.readString();
                        break;
                    case 2:
                        message.packageRole = reader.readString();
                        break;
                    case 3:
                        message.packageExpiresAt = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Roles {
            return Roles.deserialize(bytes);
        }
    }
    export class Profile extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            displayName?: string;
            email?: string;
            phone?: string;
            address?: string;
            city?: string;
            state?: string;
            zip?: string;
            country?: string;
            website?: string;
            avatar?: string;
            address2?: string;
            nickName?: string;
            roles?: Roles;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("displayName" in data && data.displayName != undefined) {
                    this.displayName = data.displayName;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("city" in data && data.city != undefined) {
                    this.city = data.city;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("zip" in data && data.zip != undefined) {
                    this.zip = data.zip;
                }
                if ("country" in data && data.country != undefined) {
                    this.country = data.country;
                }
                if ("website" in data && data.website != undefined) {
                    this.website = data.website;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
                if ("address2" in data && data.address2 != undefined) {
                    this.address2 = data.address2;
                }
                if ("nickName" in data && data.nickName != undefined) {
                    this.nickName = data.nickName;
                }
                if ("roles" in data && data.roles != undefined) {
                    this.roles = data.roles;
                }
            }
        }
        get displayName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set displayName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get city() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set city(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get zip() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set zip(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get country() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set country(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get website() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set website(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get address2() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set address2(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get nickName() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set nickName(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get roles() {
            return pb_1.Message.getWrapperField(this, Roles, 13) as Roles;
        }
        set roles(value: Roles) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get has_roles() {
            return pb_1.Message.getField(this, 13) != null;
        }
        static fromObject(data: {
            displayName?: string;
            email?: string;
            phone?: string;
            address?: string;
            city?: string;
            state?: string;
            zip?: string;
            country?: string;
            website?: string;
            avatar?: string;
            address2?: string;
            nickName?: string;
            roles?: ReturnType<typeof Roles.prototype.toObject>;
        }): Profile {
            const message = new Profile({});
            if (data.displayName != null) {
                message.displayName = data.displayName;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.city != null) {
                message.city = data.city;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.zip != null) {
                message.zip = data.zip;
            }
            if (data.country != null) {
                message.country = data.country;
            }
            if (data.website != null) {
                message.website = data.website;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            if (data.address2 != null) {
                message.address2 = data.address2;
            }
            if (data.nickName != null) {
                message.nickName = data.nickName;
            }
            if (data.roles != null) {
                message.roles = Roles.fromObject(data.roles);
            }
            return message;
        }
        toObject() {
            const data: {
                displayName?: string;
                email?: string;
                phone?: string;
                address?: string;
                city?: string;
                state?: string;
                zip?: string;
                country?: string;
                website?: string;
                avatar?: string;
                address2?: string;
                nickName?: string;
                roles?: ReturnType<typeof Roles.prototype.toObject>;
            } = {};
            if (this.displayName != null) {
                data.displayName = this.displayName;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.city != null) {
                data.city = this.city;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.zip != null) {
                data.zip = this.zip;
            }
            if (this.country != null) {
                data.country = this.country;
            }
            if (this.website != null) {
                data.website = this.website;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            if (this.address2 != null) {
                data.address2 = this.address2;
            }
            if (this.nickName != null) {
                data.nickName = this.nickName;
            }
            if (this.roles != null) {
                data.roles = this.roles.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.displayName.length)
                writer.writeString(1, this.displayName);
            if (this.email.length)
                writer.writeString(2, this.email);
            if (this.phone.length)
                writer.writeString(3, this.phone);
            if (this.address.length)
                writer.writeString(4, this.address);
            if (this.city.length)
                writer.writeString(5, this.city);
            if (this.state.length)
                writer.writeString(6, this.state);
            if (this.zip.length)
                writer.writeString(7, this.zip);
            if (this.country.length)
                writer.writeString(8, this.country);
            if (this.website.length)
                writer.writeString(9, this.website);
            if (this.avatar.length)
                writer.writeString(10, this.avatar);
            if (this.address2.length)
                writer.writeString(11, this.address2);
            if (this.nickName.length)
                writer.writeString(12, this.nickName);
            if (this.has_roles)
                writer.writeMessage(13, this.roles, () => this.roles.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Profile {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Profile();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.displayName = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    case 3:
                        message.phone = reader.readString();
                        break;
                    case 4:
                        message.address = reader.readString();
                        break;
                    case 5:
                        message.city = reader.readString();
                        break;
                    case 6:
                        message.state = reader.readString();
                        break;
                    case 7:
                        message.zip = reader.readString();
                        break;
                    case 8:
                        message.country = reader.readString();
                        break;
                    case 9:
                        message.website = reader.readString();
                        break;
                    case 10:
                        message.avatar = reader.readString();
                        break;
                    case 11:
                        message.address2 = reader.readString();
                        break;
                    case 12:
                        message.nickName = reader.readString();
                        break;
                    case 13:
                        reader.readMessage(message.roles, () => message.roles = Roles.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Profile {
            return Profile.deserialize(bytes);
        }
    }
    export class AccAccountResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            customerId?: string;
            emails?: Emails[];
            userName?: string;
            profile?: Profile;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("customerId" in data && data.customerId != undefined) {
                    this.customerId = data.customerId;
                }
                if ("emails" in data && data.emails != undefined) {
                    this.emails = data.emails;
                }
                if ("userName" in data && data.userName != undefined) {
                    this.userName = data.userName;
                }
                if ("profile" in data && data.profile != undefined) {
                    this.profile = data.profile;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get customerId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set customerId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get emails() {
            return pb_1.Message.getRepeatedWrapperField(this, Emails, 3) as Emails[];
        }
        set emails(value: Emails[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get userName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set userName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get profile() {
            return pb_1.Message.getWrapperField(this, Profile, 5) as Profile;
        }
        set profile(value: Profile) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_profile() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            id?: string;
            customerId?: string;
            emails?: ReturnType<typeof Emails.prototype.toObject>[];
            userName?: string;
            profile?: ReturnType<typeof Profile.prototype.toObject>;
        }): AccAccountResponse {
            const message = new AccAccountResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.customerId != null) {
                message.customerId = data.customerId;
            }
            if (data.emails != null) {
                message.emails = data.emails.map(item => Emails.fromObject(item));
            }
            if (data.userName != null) {
                message.userName = data.userName;
            }
            if (data.profile != null) {
                message.profile = Profile.fromObject(data.profile);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                customerId?: string;
                emails?: ReturnType<typeof Emails.prototype.toObject>[];
                userName?: string;
                profile?: ReturnType<typeof Profile.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.customerId != null) {
                data.customerId = this.customerId;
            }
            if (this.emails != null) {
                data.emails = this.emails.map((item: Emails) => item.toObject());
            }
            if (this.userName != null) {
                data.userName = this.userName;
            }
            if (this.profile != null) {
                data.profile = this.profile.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.customerId.length)
                writer.writeString(2, this.customerId);
            if (this.emails.length)
                writer.writeRepeatedMessage(3, this.emails, (item: Emails) => item.serialize(writer));
            if (this.userName.length)
                writer.writeString(4, this.userName);
            if (this.has_profile)
                writer.writeMessage(5, this.profile, () => this.profile.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccAccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccAccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.customerId = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.emails, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Emails.deserialize(reader), Emails));
                        break;
                    case 4:
                        message.userName = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.profile, () => message.profile = Profile.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccAccountResponse {
            return AccAccountResponse.deserialize(bytes);
        }
    }
    export class AccAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            userId?: string;
        }): AccAccountRequest {
            const message = new AccAccountRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccAccountRequest {
            return AccAccountRequest.deserialize(bytes);
        }
    }
    export class UpdateAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            phone?: string;
            address?: string;
            currentPassword?: string;
            newPassword?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("currentPassword" in data && data.currentPassword != undefined) {
                    this.currentPassword = data.currentPassword;
                }
                if ("newPassword" in data && data.newPassword != undefined) {
                    this.newPassword = data.newPassword;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get currentPassword() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set currentPassword(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get newPassword() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set newPassword(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            userId?: string;
            phone?: string;
            address?: string;
            currentPassword?: string;
            newPassword?: string;
        }): UpdateAccountRequest {
            const message = new UpdateAccountRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.currentPassword != null) {
                message.currentPassword = data.currentPassword;
            }
            if (data.newPassword != null) {
                message.newPassword = data.newPassword;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                phone?: string;
                address?: string;
                currentPassword?: string;
                newPassword?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.currentPassword != null) {
                data.currentPassword = this.currentPassword;
            }
            if (this.newPassword != null) {
                data.newPassword = this.newPassword;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.phone.length)
                writer.writeString(2, this.phone);
            if (this.address.length)
                writer.writeString(3, this.address);
            if (this.currentPassword.length)
                writer.writeString(4, this.currentPassword);
            if (this.newPassword.length)
                writer.writeString(5, this.newPassword);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.phone = reader.readString();
                        break;
                    case 3:
                        message.address = reader.readString();
                        break;
                    case 4:
                        message.currentPassword = reader.readString();
                        break;
                    case 5:
                        message.newPassword = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAccountRequest {
            return UpdateAccountRequest.deserialize(bytes);
        }
    }
    export class UpdateAccountResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: string;
            message?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set success(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set message(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: string;
            message?: boolean;
        }): UpdateAccountResponse {
            const message = new UpdateAccountResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: string;
                message?: boolean;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success.length)
                writer.writeString(1, this.success);
            if (this.message != false)
                writer.writeBool(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readString();
                        break;
                    case 2:
                        message.message = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAccountResponse {
            return UpdateAccountResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAccServiceService {
        static definition = {
            fetchCustomerId: {
                path: "/tmq.AccService/fetchCustomerId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AccCustomerIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AccCustomerIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AccCustomerIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AccCustomerIdResponse.deserialize(new Uint8Array(bytes))
            },
            fetchAccountDetails: {
                path: "/tmq.AccService/fetchAccountDetails",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AccAccountRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AccAccountRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AccAccountResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AccAccountResponse.deserialize(new Uint8Array(bytes))
            },
            updateAccountDetails: {
                path: "/tmq.AccService/updateAccountDetails",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateAccountRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateAccountRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateAccountResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateAccountResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract fetchCustomerId(call: grpc_1.ServerUnaryCall<AccCustomerIdRequest, AccCustomerIdResponse>, callback: grpc_1.sendUnaryData<AccCustomerIdResponse>): void;
        abstract fetchAccountDetails(call: grpc_1.ServerUnaryCall<AccAccountRequest, AccAccountResponse>, callback: grpc_1.sendUnaryData<AccAccountResponse>): void;
        abstract updateAccountDetails(call: grpc_1.ServerUnaryCall<UpdateAccountRequest, UpdateAccountResponse>, callback: grpc_1.sendUnaryData<UpdateAccountResponse>): void;
    }
    export class AccServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAccServiceService.definition, "AccService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        fetchCustomerId: GrpcUnaryServiceInterface<AccCustomerIdRequest, AccCustomerIdResponse> = (message: AccCustomerIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AccCustomerIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AccCustomerIdResponse>, callback?: grpc_1.requestCallback<AccCustomerIdResponse>): grpc_1.ClientUnaryCall => {
            return super.fetchCustomerId(message, metadata, options, callback);
        };
        fetchAccountDetails: GrpcUnaryServiceInterface<AccAccountRequest, AccAccountResponse> = (message: AccAccountRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AccAccountResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AccAccountResponse>, callback?: grpc_1.requestCallback<AccAccountResponse>): grpc_1.ClientUnaryCall => {
            return super.fetchAccountDetails(message, metadata, options, callback);
        };
        updateAccountDetails: GrpcUnaryServiceInterface<UpdateAccountRequest, UpdateAccountResponse> = (message: UpdateAccountRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateAccountResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateAccountResponse>, callback?: grpc_1.requestCallback<UpdateAccountResponse>): grpc_1.ClientUnaryCall => {
            return super.updateAccountDetails(message, metadata, options, callback);
        };
    }
}
