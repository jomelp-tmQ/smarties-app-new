// source: tmq/tool.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var tmq_common_pb = require('../tmq/common_pb.js');
goog.object.extend(proto, tmq_common_pb);
goog.exportSymbol('proto.tmq.FetchToolsRequest', null, global);
goog.exportSymbol('proto.tmq.FetchToolsResponse', null, global);
goog.exportSymbol('proto.tmq.ToolFunction', null, global);
goog.exportSymbol('proto.tmq.ToolHeaders', null, global);
goog.exportSymbol('proto.tmq.ToolMessageType', null, global);
goog.exportSymbol('proto.tmq.ToolMessages', null, global);
goog.exportSymbol('proto.tmq.ToolParameterProperties', null, global);
goog.exportSymbol('proto.tmq.ToolParameterType', null, global);
goog.exportSymbol('proto.tmq.ToolParameters', null, global);
goog.exportSymbol('proto.tmq.ToolRequest', null, global);
goog.exportSymbol('proto.tmq.ToolResponse', null, global);
goog.exportSymbol('proto.tmq.ToolServerConfig', null, global);
goog.exportSymbol('proto.tmq.Tools', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmq.ToolResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tmq.ToolResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmq.ToolResponse.displayName = 'proto.tmq.ToolResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmq.ToolParameterProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tmq.ToolParameterProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmq.ToolParameterProperties.displayName = 'proto.tmq.ToolParameterProperties';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmq.ToolParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tmq.ToolParameters.repeatedFields_, null);
};
goog.inherits(proto.tmq.ToolParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmq.ToolParameters.displayName = 'proto.tmq.ToolParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmq.ToolHeaders = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tmq.ToolHeaders, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmq.ToolHeaders.displayName = 'proto.tmq.ToolHeaders';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmq.ToolMessages = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tmq.ToolMessages.repeatedFields_, null);
};
goog.inherits(proto.tmq.ToolMessages, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmq.ToolMessages.displayName = 'proto.tmq.ToolMessages';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmq.ToolServerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tmq.ToolServerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmq.ToolServerConfig.displayName = 'proto.tmq.ToolServerConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmq.ToolRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tmq.ToolRequest.repeatedFields_, null);
};
goog.inherits(proto.tmq.ToolRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmq.ToolRequest.displayName = 'proto.tmq.ToolRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmq.FetchToolsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tmq.FetchToolsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmq.FetchToolsRequest.displayName = 'proto.tmq.FetchToolsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmq.ToolFunction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tmq.ToolFunction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmq.ToolFunction.displayName = 'proto.tmq.ToolFunction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmq.Tools = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tmq.Tools.repeatedFields_, null);
};
goog.inherits(proto.tmq.Tools, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmq.Tools.displayName = 'proto.tmq.Tools';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmq.FetchToolsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tmq.FetchToolsResponse.repeatedFields_, null);
};
goog.inherits(proto.tmq.FetchToolsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmq.FetchToolsResponse.displayName = 'proto.tmq.FetchToolsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmq.ToolResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tmq.ToolResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmq.ToolResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.ToolResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmq.ToolResponse}
 */
proto.tmq.ToolResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmq.ToolResponse;
  return proto.tmq.ToolResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmq.ToolResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmq.ToolResponse}
 */
proto.tmq.ToolResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmq.ToolResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmq.ToolResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmq.ToolResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.ToolResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.tmq.ToolResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tmq.ToolResponse} returns this
 */
proto.tmq.ToolResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.tmq.ToolResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tmq.ToolResponse} returns this
 */
proto.tmq.ToolResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmq.ToolParameterProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.tmq.ToolParameterProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmq.ToolParameterProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.ToolParameterProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    description: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmq.ToolParameterProperties}
 */
proto.tmq.ToolParameterProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmq.ToolParameterProperties;
  return proto.tmq.ToolParameterProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmq.ToolParameterProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmq.ToolParameterProperties}
 */
proto.tmq.ToolParameterProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.tmq.ToolParameterType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmq.ToolParameterProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmq.ToolParameterProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmq.ToolParameterProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.ToolParameterProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tmq.ToolParameterProperties.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tmq.ToolParameterProperties} returns this
 */
proto.tmq.ToolParameterProperties.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ToolParameterType type = 2;
 * @return {!proto.tmq.ToolParameterType}
 */
proto.tmq.ToolParameterProperties.prototype.getType = function() {
  return /** @type {!proto.tmq.ToolParameterType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tmq.ToolParameterType} value
 * @return {!proto.tmq.ToolParameterProperties} returns this
 */
proto.tmq.ToolParameterProperties.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.tmq.ToolParameterProperties.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tmq.ToolParameterProperties} returns this
 */
proto.tmq.ToolParameterProperties.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tmq.ToolParameters.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmq.ToolParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.tmq.ToolParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmq.ToolParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.ToolParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    proto.tmq.ToolParameterProperties.toObject, includeInstance),
    requiredFieldsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    additionalproperties: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmq.ToolParameters}
 */
proto.tmq.ToolParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmq.ToolParameters;
  return proto.tmq.ToolParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmq.ToolParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmq.ToolParameters}
 */
proto.tmq.ToolParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tmq.ToolParameterType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.tmq.ToolParameterProperties;
      reader.readMessage(value,proto.tmq.ToolParameterProperties.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addRequiredFields(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdditionalproperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmq.ToolParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmq.ToolParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmq.ToolParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.ToolParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.tmq.ToolParameterProperties.serializeBinaryToWriter
    );
  }
  f = message.getRequiredFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getAdditionalproperties();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional ToolParameterType type = 1;
 * @return {!proto.tmq.ToolParameterType}
 */
proto.tmq.ToolParameters.prototype.getType = function() {
  return /** @type {!proto.tmq.ToolParameterType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.tmq.ToolParameterType} value
 * @return {!proto.tmq.ToolParameters} returns this
 */
proto.tmq.ToolParameters.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated ToolParameterProperties properties = 2;
 * @return {!Array<!proto.tmq.ToolParameterProperties>}
 */
proto.tmq.ToolParameters.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.tmq.ToolParameterProperties>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tmq.ToolParameterProperties, 2));
};


/**
 * @param {!Array<!proto.tmq.ToolParameterProperties>} value
 * @return {!proto.tmq.ToolParameters} returns this
*/
proto.tmq.ToolParameters.prototype.setPropertiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tmq.ToolParameterProperties=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tmq.ToolParameterProperties}
 */
proto.tmq.ToolParameters.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tmq.ToolParameterProperties, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tmq.ToolParameters} returns this
 */
proto.tmq.ToolParameters.prototype.clearPropertiesList = function() {
  return this.setPropertiesList([]);
};


/**
 * repeated string required_fields = 3;
 * @return {!Array<string>}
 */
proto.tmq.ToolParameters.prototype.getRequiredFieldsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tmq.ToolParameters} returns this
 */
proto.tmq.ToolParameters.prototype.setRequiredFieldsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tmq.ToolParameters} returns this
 */
proto.tmq.ToolParameters.prototype.addRequiredFields = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tmq.ToolParameters} returns this
 */
proto.tmq.ToolParameters.prototype.clearRequiredFieldsList = function() {
  return this.setRequiredFieldsList([]);
};


/**
 * optional bool additionalProperties = 4;
 * @return {boolean}
 */
proto.tmq.ToolParameters.prototype.getAdditionalproperties = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tmq.ToolParameters} returns this
 */
proto.tmq.ToolParameters.prototype.setAdditionalproperties = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmq.ToolHeaders.prototype.toObject = function(opt_includeInstance) {
  return proto.tmq.ToolHeaders.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmq.ToolHeaders} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.ToolHeaders.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmq.ToolHeaders}
 */
proto.tmq.ToolHeaders.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmq.ToolHeaders;
  return proto.tmq.ToolHeaders.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmq.ToolHeaders} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmq.ToolHeaders}
 */
proto.tmq.ToolHeaders.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmq.ToolHeaders.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmq.ToolHeaders.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmq.ToolHeaders} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.ToolHeaders.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.tmq.ToolHeaders.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tmq.ToolHeaders} returns this
 */
proto.tmq.ToolHeaders.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.tmq.ToolHeaders.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tmq.ToolHeaders} returns this
 */
proto.tmq.ToolHeaders.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tmq.ToolMessages.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmq.ToolMessages.prototype.toObject = function(opt_includeInstance) {
  return proto.tmq.ToolMessages.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmq.ToolMessages} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.ToolMessages.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    content: jspb.Message.getFieldWithDefault(msg, 2, ""),
    conditionsList: jspb.Message.toObjectList(msg.getConditionsList(),
    proto.tmq.ToolMessages.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmq.ToolMessages}
 */
proto.tmq.ToolMessages.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmq.ToolMessages;
  return proto.tmq.ToolMessages.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmq.ToolMessages} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmq.ToolMessages}
 */
proto.tmq.ToolMessages.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tmq.ToolMessageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 3:
      var value = new proto.tmq.ToolMessages;
      reader.readMessage(value,proto.tmq.ToolMessages.deserializeBinaryFromReader);
      msg.addConditions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmq.ToolMessages.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmq.ToolMessages.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmq.ToolMessages} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.ToolMessages.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConditionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.tmq.ToolMessages.serializeBinaryToWriter
    );
  }
};


/**
 * optional ToolMessageType type = 1;
 * @return {!proto.tmq.ToolMessageType}
 */
proto.tmq.ToolMessages.prototype.getType = function() {
  return /** @type {!proto.tmq.ToolMessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.tmq.ToolMessageType} value
 * @return {!proto.tmq.ToolMessages} returns this
 */
proto.tmq.ToolMessages.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string content = 2;
 * @return {string}
 */
proto.tmq.ToolMessages.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tmq.ToolMessages} returns this
 */
proto.tmq.ToolMessages.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated ToolMessages conditions = 3;
 * @return {!Array<!proto.tmq.ToolMessages>}
 */
proto.tmq.ToolMessages.prototype.getConditionsList = function() {
  return /** @type{!Array<!proto.tmq.ToolMessages>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tmq.ToolMessages, 3));
};


/**
 * @param {!Array<!proto.tmq.ToolMessages>} value
 * @return {!proto.tmq.ToolMessages} returns this
*/
proto.tmq.ToolMessages.prototype.setConditionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.tmq.ToolMessages=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tmq.ToolMessages}
 */
proto.tmq.ToolMessages.prototype.addConditions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.tmq.ToolMessages, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tmq.ToolMessages} returns this
 */
proto.tmq.ToolMessages.prototype.clearConditionsList = function() {
  return this.setConditionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmq.ToolServerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.tmq.ToolServerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmq.ToolServerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.ToolServerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverurl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    secret: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timeout: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmq.ToolServerConfig}
 */
proto.tmq.ToolServerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmq.ToolServerConfig;
  return proto.tmq.ToolServerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmq.ToolServerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmq.ToolServerConfig}
 */
proto.tmq.ToolServerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerurl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecret(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmq.ToolServerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmq.ToolServerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmq.ToolServerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.ToolServerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerurl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSecret();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string serverUrl = 1;
 * @return {string}
 */
proto.tmq.ToolServerConfig.prototype.getServerurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tmq.ToolServerConfig} returns this
 */
proto.tmq.ToolServerConfig.prototype.setServerurl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string secret = 2;
 * @return {string}
 */
proto.tmq.ToolServerConfig.prototype.getSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tmq.ToolServerConfig} returns this
 */
proto.tmq.ToolServerConfig.prototype.setSecret = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 timeout = 3;
 * @return {number}
 */
proto.tmq.ToolServerConfig.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tmq.ToolServerConfig} returns this
 */
proto.tmq.ToolServerConfig.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tmq.ToolRequest.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmq.ToolRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tmq.ToolRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmq.ToolRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.ToolRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    parameters: (f = msg.getParameters()) && proto.tmq.ToolParameters.toObject(includeInstance, f),
    serverconfig: (f = msg.getServerconfig()) && proto.tmq.ToolServerConfig.toObject(includeInstance, f),
    headersList: jspb.Message.toObjectList(msg.getHeadersList(),
    proto.tmq.ToolHeaders.toObject, includeInstance),
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.tmq.ToolMessages.toObject, includeInstance),
    async: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    strict: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    userid: jspb.Message.getFieldWithDefault(msg, 9, ""),
    id: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmq.ToolRequest}
 */
proto.tmq.ToolRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmq.ToolRequest;
  return proto.tmq.ToolRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmq.ToolRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmq.ToolRequest}
 */
proto.tmq.ToolRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.tmq.ToolParameters;
      reader.readMessage(value,proto.tmq.ToolParameters.deserializeBinaryFromReader);
      msg.setParameters(value);
      break;
    case 4:
      var value = new proto.tmq.ToolServerConfig;
      reader.readMessage(value,proto.tmq.ToolServerConfig.deserializeBinaryFromReader);
      msg.setServerconfig(value);
      break;
    case 5:
      var value = new proto.tmq.ToolHeaders;
      reader.readMessage(value,proto.tmq.ToolHeaders.deserializeBinaryFromReader);
      msg.addHeaders(value);
      break;
    case 6:
      var value = new proto.tmq.ToolMessages;
      reader.readMessage(value,proto.tmq.ToolMessages.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAsync(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStrict(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmq.ToolRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmq.ToolRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmq.ToolRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.ToolRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParameters();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tmq.ToolParameters.serializeBinaryToWriter
    );
  }
  f = message.getServerconfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tmq.ToolServerConfig.serializeBinaryToWriter
    );
  }
  f = message.getHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.tmq.ToolHeaders.serializeBinaryToWriter
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.tmq.ToolMessages.serializeBinaryToWriter
    );
  }
  f = message.getAsync();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getStrict();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tmq.ToolRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tmq.ToolRequest} returns this
 */
proto.tmq.ToolRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.tmq.ToolRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tmq.ToolRequest} returns this
 */
proto.tmq.ToolRequest.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ToolParameters parameters = 3;
 * @return {?proto.tmq.ToolParameters}
 */
proto.tmq.ToolRequest.prototype.getParameters = function() {
  return /** @type{?proto.tmq.ToolParameters} */ (
    jspb.Message.getWrapperField(this, proto.tmq.ToolParameters, 3));
};


/**
 * @param {?proto.tmq.ToolParameters|undefined} value
 * @return {!proto.tmq.ToolRequest} returns this
*/
proto.tmq.ToolRequest.prototype.setParameters = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tmq.ToolRequest} returns this
 */
proto.tmq.ToolRequest.prototype.clearParameters = function() {
  return this.setParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tmq.ToolRequest.prototype.hasParameters = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ToolServerConfig serverConfig = 4;
 * @return {?proto.tmq.ToolServerConfig}
 */
proto.tmq.ToolRequest.prototype.getServerconfig = function() {
  return /** @type{?proto.tmq.ToolServerConfig} */ (
    jspb.Message.getWrapperField(this, proto.tmq.ToolServerConfig, 4));
};


/**
 * @param {?proto.tmq.ToolServerConfig|undefined} value
 * @return {!proto.tmq.ToolRequest} returns this
*/
proto.tmq.ToolRequest.prototype.setServerconfig = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tmq.ToolRequest} returns this
 */
proto.tmq.ToolRequest.prototype.clearServerconfig = function() {
  return this.setServerconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tmq.ToolRequest.prototype.hasServerconfig = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated ToolHeaders headers = 5;
 * @return {!Array<!proto.tmq.ToolHeaders>}
 */
proto.tmq.ToolRequest.prototype.getHeadersList = function() {
  return /** @type{!Array<!proto.tmq.ToolHeaders>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tmq.ToolHeaders, 5));
};


/**
 * @param {!Array<!proto.tmq.ToolHeaders>} value
 * @return {!proto.tmq.ToolRequest} returns this
*/
proto.tmq.ToolRequest.prototype.setHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.tmq.ToolHeaders=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tmq.ToolHeaders}
 */
proto.tmq.ToolRequest.prototype.addHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.tmq.ToolHeaders, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tmq.ToolRequest} returns this
 */
proto.tmq.ToolRequest.prototype.clearHeadersList = function() {
  return this.setHeadersList([]);
};


/**
 * repeated ToolMessages messages = 6;
 * @return {!Array<!proto.tmq.ToolMessages>}
 */
proto.tmq.ToolRequest.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.tmq.ToolMessages>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tmq.ToolMessages, 6));
};


/**
 * @param {!Array<!proto.tmq.ToolMessages>} value
 * @return {!proto.tmq.ToolRequest} returns this
*/
proto.tmq.ToolRequest.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.tmq.ToolMessages=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tmq.ToolMessages}
 */
proto.tmq.ToolRequest.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.tmq.ToolMessages, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tmq.ToolRequest} returns this
 */
proto.tmq.ToolRequest.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};


/**
 * optional bool async = 7;
 * @return {boolean}
 */
proto.tmq.ToolRequest.prototype.getAsync = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tmq.ToolRequest} returns this
 */
proto.tmq.ToolRequest.prototype.setAsync = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool strict = 8;
 * @return {boolean}
 */
proto.tmq.ToolRequest.prototype.getStrict = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tmq.ToolRequest} returns this
 */
proto.tmq.ToolRequest.prototype.setStrict = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string userId = 9;
 * @return {string}
 */
proto.tmq.ToolRequest.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.tmq.ToolRequest} returns this
 */
proto.tmq.ToolRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string id = 10;
 * @return {string}
 */
proto.tmq.ToolRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.tmq.ToolRequest} returns this
 */
proto.tmq.ToolRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmq.FetchToolsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tmq.FetchToolsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmq.FetchToolsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.FetchToolsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lastbasis: jspb.Message.getFieldWithDefault(msg, 2, 0),
    searchquery: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmq.FetchToolsRequest}
 */
proto.tmq.FetchToolsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmq.FetchToolsRequest;
  return proto.tmq.FetchToolsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmq.FetchToolsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmq.FetchToolsRequest}
 */
proto.tmq.FetchToolsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastbasis(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearchquery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmq.FetchToolsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmq.FetchToolsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmq.FetchToolsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.FetchToolsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLastbasis();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSearchquery();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.tmq.FetchToolsRequest.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tmq.FetchToolsRequest} returns this
 */
proto.tmq.FetchToolsRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 lastBasis = 2;
 * @return {number}
 */
proto.tmq.FetchToolsRequest.prototype.getLastbasis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tmq.FetchToolsRequest} returns this
 */
proto.tmq.FetchToolsRequest.prototype.setLastbasis = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string searchQuery = 3;
 * @return {string}
 */
proto.tmq.FetchToolsRequest.prototype.getSearchquery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tmq.FetchToolsRequest} returns this
 */
proto.tmq.FetchToolsRequest.prototype.setSearchquery = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmq.ToolFunction.prototype.toObject = function(opt_includeInstance) {
  return proto.tmq.ToolFunction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmq.ToolFunction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.ToolFunction.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    parameters: (f = msg.getParameters()) && proto.tmq.ToolParameters.toObject(includeInstance, f),
    strict: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmq.ToolFunction}
 */
proto.tmq.ToolFunction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmq.ToolFunction;
  return proto.tmq.ToolFunction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmq.ToolFunction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmq.ToolFunction}
 */
proto.tmq.ToolFunction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.tmq.ToolParameters;
      reader.readMessage(value,proto.tmq.ToolParameters.deserializeBinaryFromReader);
      msg.setParameters(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStrict(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmq.ToolFunction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmq.ToolFunction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmq.ToolFunction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.ToolFunction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParameters();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tmq.ToolParameters.serializeBinaryToWriter
    );
  }
  f = message.getStrict();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tmq.ToolFunction.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tmq.ToolFunction} returns this
 */
proto.tmq.ToolFunction.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.tmq.ToolFunction.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tmq.ToolFunction} returns this
 */
proto.tmq.ToolFunction.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ToolParameters parameters = 3;
 * @return {?proto.tmq.ToolParameters}
 */
proto.tmq.ToolFunction.prototype.getParameters = function() {
  return /** @type{?proto.tmq.ToolParameters} */ (
    jspb.Message.getWrapperField(this, proto.tmq.ToolParameters, 3));
};


/**
 * @param {?proto.tmq.ToolParameters|undefined} value
 * @return {!proto.tmq.ToolFunction} returns this
*/
proto.tmq.ToolFunction.prototype.setParameters = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tmq.ToolFunction} returns this
 */
proto.tmq.ToolFunction.prototype.clearParameters = function() {
  return this.setParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tmq.ToolFunction.prototype.hasParameters = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool strict = 4;
 * @return {boolean}
 */
proto.tmq.ToolFunction.prototype.getStrict = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tmq.ToolFunction} returns this
 */
proto.tmq.ToolFunction.prototype.setStrict = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tmq.Tools.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmq.Tools.prototype.toObject = function(opt_includeInstance) {
  return proto.tmq.Tools.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmq.Tools} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.Tools.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serverconfig: (f = msg.getServerconfig()) && proto.tmq.ToolServerConfig.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pb_function: (f = msg.getFunction()) && proto.tmq.ToolFunction.toObject(includeInstance, f),
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.tmq.ToolMessages.toObject, includeInstance),
    headersList: jspb.Message.toObjectList(msg.getHeadersList(),
    proto.tmq.ToolHeaders.toObject, includeInstance),
    async: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    createdat: jspb.Message.getFieldWithDefault(msg, 8, 0),
    updatedat: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmq.Tools}
 */
proto.tmq.Tools.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmq.Tools;
  return proto.tmq.Tools.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmq.Tools} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmq.Tools}
 */
proto.tmq.Tools.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.tmq.ToolServerConfig;
      reader.readMessage(value,proto.tmq.ToolServerConfig.deserializeBinaryFromReader);
      msg.setServerconfig(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.tmq.ToolFunction;
      reader.readMessage(value,proto.tmq.ToolFunction.deserializeBinaryFromReader);
      msg.setFunction(value);
      break;
    case 5:
      var value = new proto.tmq.ToolMessages;
      reader.readMessage(value,proto.tmq.ToolMessages.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    case 6:
      var value = new proto.tmq.ToolHeaders;
      reader.readMessage(value,proto.tmq.ToolHeaders.deserializeBinaryFromReader);
      msg.addHeaders(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAsync(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedat(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmq.Tools.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmq.Tools.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmq.Tools} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.Tools.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServerconfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tmq.ToolServerConfig.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFunction();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tmq.ToolFunction.serializeBinaryToWriter
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.tmq.ToolMessages.serializeBinaryToWriter
    );
  }
  f = message.getHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.tmq.ToolHeaders.serializeBinaryToWriter
    );
  }
  f = message.getAsync();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getCreatedat();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getUpdatedat();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tmq.Tools.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tmq.Tools} returns this
 */
proto.tmq.Tools.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ToolServerConfig serverConfig = 2;
 * @return {?proto.tmq.ToolServerConfig}
 */
proto.tmq.Tools.prototype.getServerconfig = function() {
  return /** @type{?proto.tmq.ToolServerConfig} */ (
    jspb.Message.getWrapperField(this, proto.tmq.ToolServerConfig, 2));
};


/**
 * @param {?proto.tmq.ToolServerConfig|undefined} value
 * @return {!proto.tmq.Tools} returns this
*/
proto.tmq.Tools.prototype.setServerconfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tmq.Tools} returns this
 */
proto.tmq.Tools.prototype.clearServerconfig = function() {
  return this.setServerconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tmq.Tools.prototype.hasServerconfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.tmq.Tools.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tmq.Tools} returns this
 */
proto.tmq.Tools.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional ToolFunction function = 4;
 * @return {?proto.tmq.ToolFunction}
 */
proto.tmq.Tools.prototype.getFunction = function() {
  return /** @type{?proto.tmq.ToolFunction} */ (
    jspb.Message.getWrapperField(this, proto.tmq.ToolFunction, 4));
};


/**
 * @param {?proto.tmq.ToolFunction|undefined} value
 * @return {!proto.tmq.Tools} returns this
*/
proto.tmq.Tools.prototype.setFunction = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tmq.Tools} returns this
 */
proto.tmq.Tools.prototype.clearFunction = function() {
  return this.setFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tmq.Tools.prototype.hasFunction = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated ToolMessages messages = 5;
 * @return {!Array<!proto.tmq.ToolMessages>}
 */
proto.tmq.Tools.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.tmq.ToolMessages>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tmq.ToolMessages, 5));
};


/**
 * @param {!Array<!proto.tmq.ToolMessages>} value
 * @return {!proto.tmq.Tools} returns this
*/
proto.tmq.Tools.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.tmq.ToolMessages=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tmq.ToolMessages}
 */
proto.tmq.Tools.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.tmq.ToolMessages, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tmq.Tools} returns this
 */
proto.tmq.Tools.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};


/**
 * repeated ToolHeaders headers = 6;
 * @return {!Array<!proto.tmq.ToolHeaders>}
 */
proto.tmq.Tools.prototype.getHeadersList = function() {
  return /** @type{!Array<!proto.tmq.ToolHeaders>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tmq.ToolHeaders, 6));
};


/**
 * @param {!Array<!proto.tmq.ToolHeaders>} value
 * @return {!proto.tmq.Tools} returns this
*/
proto.tmq.Tools.prototype.setHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.tmq.ToolHeaders=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tmq.ToolHeaders}
 */
proto.tmq.Tools.prototype.addHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.tmq.ToolHeaders, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tmq.Tools} returns this
 */
proto.tmq.Tools.prototype.clearHeadersList = function() {
  return this.setHeadersList([]);
};


/**
 * optional bool async = 7;
 * @return {boolean}
 */
proto.tmq.Tools.prototype.getAsync = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tmq.Tools} returns this
 */
proto.tmq.Tools.prototype.setAsync = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional int64 createdAt = 8;
 * @return {number}
 */
proto.tmq.Tools.prototype.getCreatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.tmq.Tools} returns this
 */
proto.tmq.Tools.prototype.setCreatedat = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 updatedAt = 9;
 * @return {number}
 */
proto.tmq.Tools.prototype.getUpdatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.tmq.Tools} returns this
 */
proto.tmq.Tools.prototype.setUpdatedat = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tmq.FetchToolsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmq.FetchToolsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tmq.FetchToolsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmq.FetchToolsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.FetchToolsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    toolsList: jspb.Message.toObjectList(msg.getToolsList(),
    proto.tmq.Tools.toObject, includeInstance),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    lastbasis: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmq.FetchToolsResponse}
 */
proto.tmq.FetchToolsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmq.FetchToolsResponse;
  return proto.tmq.FetchToolsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmq.FetchToolsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmq.FetchToolsResponse}
 */
proto.tmq.FetchToolsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tmq.Tools;
      reader.readMessage(value,proto.tmq.Tools.deserializeBinaryFromReader);
      msg.addTools(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastbasis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmq.FetchToolsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmq.FetchToolsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmq.FetchToolsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmq.FetchToolsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToolsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tmq.Tools.serializeBinaryToWriter
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getLastbasis();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * repeated Tools tools = 1;
 * @return {!Array<!proto.tmq.Tools>}
 */
proto.tmq.FetchToolsResponse.prototype.getToolsList = function() {
  return /** @type{!Array<!proto.tmq.Tools>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tmq.Tools, 1));
};


/**
 * @param {!Array<!proto.tmq.Tools>} value
 * @return {!proto.tmq.FetchToolsResponse} returns this
*/
proto.tmq.FetchToolsResponse.prototype.setToolsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tmq.Tools=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tmq.Tools}
 */
proto.tmq.FetchToolsResponse.prototype.addTools = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tmq.Tools, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tmq.FetchToolsResponse} returns this
 */
proto.tmq.FetchToolsResponse.prototype.clearToolsList = function() {
  return this.setToolsList([]);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.tmq.FetchToolsResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tmq.FetchToolsResponse} returns this
 */
proto.tmq.FetchToolsResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int64 lastBasis = 3;
 * @return {number}
 */
proto.tmq.FetchToolsResponse.prototype.getLastbasis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tmq.FetchToolsResponse} returns this
 */
proto.tmq.FetchToolsResponse.prototype.setLastbasis = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.tmq.ToolParameterType = {
  STRING: 0,
  NUMBER: 1,
  BOOLEAN: 2,
  ARRAY: 3,
  OBJECT: 4
};

/**
 * @enum {number}
 */
proto.tmq.ToolMessageType = {
  REQUEST_START: 0,
  REQUEST_COMPLETE: 1,
  REQUEST_FAILED: 2,
  REQUEST_RESPONSE_DELAYED: 3
};

goog.object.extend(exports, proto.tmq);
export default proto.tmq;
