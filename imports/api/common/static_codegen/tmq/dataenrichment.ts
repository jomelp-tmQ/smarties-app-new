/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: tmq/dataenrichment.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class DataEnrichmentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            business_id?: string;
            consumer_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("business_id" in data && data.business_id != undefined) {
                    this.business_id = data.business_id;
                }
                if ("consumer_id" in data && data.consumer_id != undefined) {
                    this.consumer_id = data.consumer_id;
                }
            }
        }
        get business_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set business_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get consumer_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set consumer_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            business_id?: string;
            consumer_id?: string;
        }): DataEnrichmentRequest {
            const message = new DataEnrichmentRequest({});
            if (data.business_id != null) {
                message.business_id = data.business_id;
            }
            if (data.consumer_id != null) {
                message.consumer_id = data.consumer_id;
            }
            return message;
        }
        toObject() {
            const data: {
                business_id?: string;
                consumer_id?: string;
            } = {};
            if (this.business_id != null) {
                data.business_id = this.business_id;
            }
            if (this.consumer_id != null) {
                data.consumer_id = this.consumer_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.business_id.length)
                writer.writeString(1, this.business_id);
            if (this.consumer_id.length)
                writer.writeString(2, this.consumer_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataEnrichmentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataEnrichmentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.business_id = reader.readString();
                        break;
                    case 2:
                        message.consumer_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DataEnrichmentRequest {
            return DataEnrichmentRequest.deserialize(bytes);
        }
    }
    export class DataEnrichmentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DataEnrichmentResponse {
            const message = new DataEnrichmentResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataEnrichmentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataEnrichmentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DataEnrichmentResponse {
            return DataEnrichmentResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedDataEnrichmentServiceService {
        static definition = {
            FetchDataEnrichment: {
                path: "/tmq.DataEnrichmentService/FetchDataEnrichment",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DataEnrichmentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DataEnrichmentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DataEnrichmentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DataEnrichmentResponse.deserialize(new Uint8Array(bytes))
            },
            ProcessDataEnrichment: {
                path: "/tmq.DataEnrichmentService/ProcessDataEnrichment",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DataEnrichmentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DataEnrichmentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DataEnrichmentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DataEnrichmentResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract FetchDataEnrichment(call: grpc_1.ServerUnaryCall<DataEnrichmentRequest, DataEnrichmentResponse>, callback: grpc_1.sendUnaryData<DataEnrichmentResponse>): void;
        abstract ProcessDataEnrichment(call: grpc_1.ServerUnaryCall<DataEnrichmentRequest, DataEnrichmentResponse>, callback: grpc_1.sendUnaryData<DataEnrichmentResponse>): void;
    }
    export class DataEnrichmentServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedDataEnrichmentServiceService.definition, "DataEnrichmentService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        FetchDataEnrichment: GrpcUnaryServiceInterface<DataEnrichmentRequest, DataEnrichmentResponse> = (message: DataEnrichmentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DataEnrichmentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DataEnrichmentResponse>, callback?: grpc_1.requestCallback<DataEnrichmentResponse>): grpc_1.ClientUnaryCall => {
            return super.FetchDataEnrichment(message, metadata, options, callback);
        };
        ProcessDataEnrichment: GrpcUnaryServiceInterface<DataEnrichmentRequest, DataEnrichmentResponse> = (message: DataEnrichmentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DataEnrichmentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DataEnrichmentResponse>, callback?: grpc_1.requestCallback<DataEnrichmentResponse>): grpc_1.ClientUnaryCall => {
            return super.ProcessDataEnrichment(message, metadata, options, callback);
        };
    }
}
