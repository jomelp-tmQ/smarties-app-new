/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: tmq/attachment.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/any";
import * as dependency_2 from "./inbox";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class AttachmentAttribute extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
            value?: dependency_1.google.protobuf.Any;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 2) as dependency_1.google.protobuf.Any;
        }
        set value(value: dependency_1.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            key?: string;
            value?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
        }): AttachmentAttribute {
            const message = new AttachmentAttribute({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = dependency_1.google.protobuf.Any.fromObject(data.value);
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                value?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (this.has_value)
                writer.writeMessage(2, this.value, () => this.value.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AttachmentAttribute {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AttachmentAttribute();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.value, () => message.value = dependency_1.google.protobuf.Any.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AttachmentAttribute {
            return AttachmentAttribute.deserialize(bytes);
        }
    }
    export class Attachment extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            business_id?: string;
            inbox_id?: string;
            interaction_id?: string;
            consumer_id?: string;
            channel_id?: string;
            original_name?: string;
            file_size?: number;
            mime_type?: string;
            file_extension?: string;
            local_path?: string;
            local_url?: string;
            remote_url?: string;
            source?: string;
            recording_id?: string;
            created_at?: number;
            attributes?: AttachmentAttribute[];
            thumbnail_url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [17], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("business_id" in data && data.business_id != undefined) {
                    this.business_id = data.business_id;
                }
                if ("inbox_id" in data && data.inbox_id != undefined) {
                    this.inbox_id = data.inbox_id;
                }
                if ("interaction_id" in data && data.interaction_id != undefined) {
                    this.interaction_id = data.interaction_id;
                }
                if ("consumer_id" in data && data.consumer_id != undefined) {
                    this.consumer_id = data.consumer_id;
                }
                if ("channel_id" in data && data.channel_id != undefined) {
                    this.channel_id = data.channel_id;
                }
                if ("original_name" in data && data.original_name != undefined) {
                    this.original_name = data.original_name;
                }
                if ("file_size" in data && data.file_size != undefined) {
                    this.file_size = data.file_size;
                }
                if ("mime_type" in data && data.mime_type != undefined) {
                    this.mime_type = data.mime_type;
                }
                if ("file_extension" in data && data.file_extension != undefined) {
                    this.file_extension = data.file_extension;
                }
                if ("local_path" in data && data.local_path != undefined) {
                    this.local_path = data.local_path;
                }
                if ("local_url" in data && data.local_url != undefined) {
                    this.local_url = data.local_url;
                }
                if ("remote_url" in data && data.remote_url != undefined) {
                    this.remote_url = data.remote_url;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("recording_id" in data && data.recording_id != undefined) {
                    this.recording_id = data.recording_id;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("attributes" in data && data.attributes != undefined) {
                    this.attributes = data.attributes;
                }
                if ("thumbnail_url" in data && data.thumbnail_url != undefined) {
                    this.thumbnail_url = data.thumbnail_url;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get business_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set business_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get inbox_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set inbox_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get interaction_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set interaction_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get consumer_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set consumer_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get channel_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set channel_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get original_name() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set original_name(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get file_size() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set file_size(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get mime_type() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set mime_type(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get file_extension() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set file_extension(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get local_path() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set local_path(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get local_url() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set local_url(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get remote_url() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set remote_url(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set source(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get recording_id() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set recording_id(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get attributes() {
            return pb_1.Message.getRepeatedWrapperField(this, AttachmentAttribute, 17) as AttachmentAttribute[];
        }
        set attributes(value: AttachmentAttribute[]) {
            pb_1.Message.setRepeatedWrapperField(this, 17, value);
        }
        get thumbnail_url() {
            return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
        }
        set thumbnail_url(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        static fromObject(data: {
            id?: string;
            business_id?: string;
            inbox_id?: string;
            interaction_id?: string;
            consumer_id?: string;
            channel_id?: string;
            original_name?: string;
            file_size?: number;
            mime_type?: string;
            file_extension?: string;
            local_path?: string;
            local_url?: string;
            remote_url?: string;
            source?: string;
            recording_id?: string;
            created_at?: number;
            attributes?: ReturnType<typeof AttachmentAttribute.prototype.toObject>[];
            thumbnail_url?: string;
        }): Attachment {
            const message = new Attachment({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.business_id != null) {
                message.business_id = data.business_id;
            }
            if (data.inbox_id != null) {
                message.inbox_id = data.inbox_id;
            }
            if (data.interaction_id != null) {
                message.interaction_id = data.interaction_id;
            }
            if (data.consumer_id != null) {
                message.consumer_id = data.consumer_id;
            }
            if (data.channel_id != null) {
                message.channel_id = data.channel_id;
            }
            if (data.original_name != null) {
                message.original_name = data.original_name;
            }
            if (data.file_size != null) {
                message.file_size = data.file_size;
            }
            if (data.mime_type != null) {
                message.mime_type = data.mime_type;
            }
            if (data.file_extension != null) {
                message.file_extension = data.file_extension;
            }
            if (data.local_path != null) {
                message.local_path = data.local_path;
            }
            if (data.local_url != null) {
                message.local_url = data.local_url;
            }
            if (data.remote_url != null) {
                message.remote_url = data.remote_url;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.recording_id != null) {
                message.recording_id = data.recording_id;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.attributes != null) {
                message.attributes = data.attributes.map(item => AttachmentAttribute.fromObject(item));
            }
            if (data.thumbnail_url != null) {
                message.thumbnail_url = data.thumbnail_url;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                business_id?: string;
                inbox_id?: string;
                interaction_id?: string;
                consumer_id?: string;
                channel_id?: string;
                original_name?: string;
                file_size?: number;
                mime_type?: string;
                file_extension?: string;
                local_path?: string;
                local_url?: string;
                remote_url?: string;
                source?: string;
                recording_id?: string;
                created_at?: number;
                attributes?: ReturnType<typeof AttachmentAttribute.prototype.toObject>[];
                thumbnail_url?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.business_id != null) {
                data.business_id = this.business_id;
            }
            if (this.inbox_id != null) {
                data.inbox_id = this.inbox_id;
            }
            if (this.interaction_id != null) {
                data.interaction_id = this.interaction_id;
            }
            if (this.consumer_id != null) {
                data.consumer_id = this.consumer_id;
            }
            if (this.channel_id != null) {
                data.channel_id = this.channel_id;
            }
            if (this.original_name != null) {
                data.original_name = this.original_name;
            }
            if (this.file_size != null) {
                data.file_size = this.file_size;
            }
            if (this.mime_type != null) {
                data.mime_type = this.mime_type;
            }
            if (this.file_extension != null) {
                data.file_extension = this.file_extension;
            }
            if (this.local_path != null) {
                data.local_path = this.local_path;
            }
            if (this.local_url != null) {
                data.local_url = this.local_url;
            }
            if (this.remote_url != null) {
                data.remote_url = this.remote_url;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.recording_id != null) {
                data.recording_id = this.recording_id;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.attributes != null) {
                data.attributes = this.attributes.map((item: AttachmentAttribute) => item.toObject());
            }
            if (this.thumbnail_url != null) {
                data.thumbnail_url = this.thumbnail_url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.business_id.length)
                writer.writeString(2, this.business_id);
            if (this.inbox_id.length)
                writer.writeString(3, this.inbox_id);
            if (this.interaction_id.length)
                writer.writeString(4, this.interaction_id);
            if (this.consumer_id.length)
                writer.writeString(5, this.consumer_id);
            if (this.channel_id.length)
                writer.writeString(6, this.channel_id);
            if (this.original_name.length)
                writer.writeString(7, this.original_name);
            if (this.file_size != 0)
                writer.writeDouble(8, this.file_size);
            if (this.mime_type.length)
                writer.writeString(9, this.mime_type);
            if (this.file_extension.length)
                writer.writeString(10, this.file_extension);
            if (this.local_path.length)
                writer.writeString(11, this.local_path);
            if (this.local_url.length)
                writer.writeString(12, this.local_url);
            if (this.remote_url.length)
                writer.writeString(13, this.remote_url);
            if (this.source.length)
                writer.writeString(14, this.source);
            if (this.recording_id.length)
                writer.writeString(15, this.recording_id);
            if (this.created_at != 0)
                writer.writeDouble(16, this.created_at);
            if (this.attributes.length)
                writer.writeRepeatedMessage(17, this.attributes, (item: AttachmentAttribute) => item.serialize(writer));
            if (this.thumbnail_url.length)
                writer.writeString(18, this.thumbnail_url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Attachment {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Attachment();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.business_id = reader.readString();
                        break;
                    case 3:
                        message.inbox_id = reader.readString();
                        break;
                    case 4:
                        message.interaction_id = reader.readString();
                        break;
                    case 5:
                        message.consumer_id = reader.readString();
                        break;
                    case 6:
                        message.channel_id = reader.readString();
                        break;
                    case 7:
                        message.original_name = reader.readString();
                        break;
                    case 8:
                        message.file_size = reader.readDouble();
                        break;
                    case 9:
                        message.mime_type = reader.readString();
                        break;
                    case 10:
                        message.file_extension = reader.readString();
                        break;
                    case 11:
                        message.local_path = reader.readString();
                        break;
                    case 12:
                        message.local_url = reader.readString();
                        break;
                    case 13:
                        message.remote_url = reader.readString();
                        break;
                    case 14:
                        message.source = reader.readString();
                        break;
                    case 15:
                        message.recording_id = reader.readString();
                        break;
                    case 16:
                        message.created_at = reader.readDouble();
                        break;
                    case 17:
                        reader.readMessage(message.attributes, () => pb_1.Message.addToRepeatedWrapperField(message, 17, AttachmentAttribute.deserialize(reader), AttachmentAttribute));
                        break;
                    case 18:
                        message.thumbnail_url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Attachment {
            return Attachment.deserialize(bytes);
        }
    }
    export class GetAttachmentsByInboxIdsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            inbox_ids?: dependency_2.tmq.InboxIds[];
            page?: dependency_2.tmq.Pagination;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("inbox_ids" in data && data.inbox_ids != undefined) {
                    this.inbox_ids = data.inbox_ids;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
            }
        }
        get inbox_ids() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.tmq.InboxIds, 1) as dependency_2.tmq.InboxIds[];
        }
        set inbox_ids(value: dependency_2.tmq.InboxIds[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getWrapperField(this, dependency_2.tmq.Pagination, 2) as dependency_2.tmq.Pagination;
        }
        set page(value: dependency_2.tmq.Pagination) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_page() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            inbox_ids?: ReturnType<typeof dependency_2.tmq.InboxIds.prototype.toObject>[];
            page?: ReturnType<typeof dependency_2.tmq.Pagination.prototype.toObject>;
        }): GetAttachmentsByInboxIdsRequest {
            const message = new GetAttachmentsByInboxIdsRequest({});
            if (data.inbox_ids != null) {
                message.inbox_ids = data.inbox_ids.map(item => dependency_2.tmq.InboxIds.fromObject(item));
            }
            if (data.page != null) {
                message.page = dependency_2.tmq.Pagination.fromObject(data.page);
            }
            return message;
        }
        toObject() {
            const data: {
                inbox_ids?: ReturnType<typeof dependency_2.tmq.InboxIds.prototype.toObject>[];
                page?: ReturnType<typeof dependency_2.tmq.Pagination.prototype.toObject>;
            } = {};
            if (this.inbox_ids != null) {
                data.inbox_ids = this.inbox_ids.map((item: dependency_2.tmq.InboxIds) => item.toObject());
            }
            if (this.page != null) {
                data.page = this.page.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.inbox_ids.length)
                writer.writeRepeatedMessage(1, this.inbox_ids, (item: dependency_2.tmq.InboxIds) => item.serialize(writer));
            if (this.has_page)
                writer.writeMessage(2, this.page, () => this.page.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAttachmentsByInboxIdsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAttachmentsByInboxIdsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.inbox_ids, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.tmq.InboxIds.deserialize(reader), dependency_2.tmq.InboxIds));
                        break;
                    case 2:
                        reader.readMessage(message.page, () => message.page = dependency_2.tmq.Pagination.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAttachmentsByInboxIdsRequest {
            return GetAttachmentsByInboxIdsRequest.deserialize(bytes);
        }
    }
    export class GetAttachmentsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            attachments?: Attachment[];
            total_count?: number;
            success?: boolean;
            error_message?: string;
            last_basis?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("attachments" in data && data.attachments != undefined) {
                    this.attachments = data.attachments;
                }
                if ("total_count" in data && data.total_count != undefined) {
                    this.total_count = data.total_count;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
                if ("last_basis" in data && data.last_basis != undefined) {
                    this.last_basis = data.last_basis;
                }
            }
        }
        get attachments() {
            return pb_1.Message.getRepeatedWrapperField(this, Attachment, 1) as Attachment[];
        }
        set attachments(value: Attachment[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get last_basis() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set last_basis(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            attachments?: ReturnType<typeof Attachment.prototype.toObject>[];
            total_count?: number;
            success?: boolean;
            error_message?: string;
            last_basis?: number;
        }): GetAttachmentsResponse {
            const message = new GetAttachmentsResponse({});
            if (data.attachments != null) {
                message.attachments = data.attachments.map(item => Attachment.fromObject(item));
            }
            if (data.total_count != null) {
                message.total_count = data.total_count;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            if (data.last_basis != null) {
                message.last_basis = data.last_basis;
            }
            return message;
        }
        toObject() {
            const data: {
                attachments?: ReturnType<typeof Attachment.prototype.toObject>[];
                total_count?: number;
                success?: boolean;
                error_message?: string;
                last_basis?: number;
            } = {};
            if (this.attachments != null) {
                data.attachments = this.attachments.map((item: Attachment) => item.toObject());
            }
            if (this.total_count != null) {
                data.total_count = this.total_count;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            if (this.last_basis != null) {
                data.last_basis = this.last_basis;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.attachments.length)
                writer.writeRepeatedMessage(1, this.attachments, (item: Attachment) => item.serialize(writer));
            if (this.total_count != 0)
                writer.writeInt32(2, this.total_count);
            if (this.success != false)
                writer.writeBool(3, this.success);
            if (this.error_message.length)
                writer.writeString(4, this.error_message);
            if (this.last_basis != 0)
                writer.writeDouble(5, this.last_basis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAttachmentsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAttachmentsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.attachments, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Attachment.deserialize(reader), Attachment));
                        break;
                    case 2:
                        message.total_count = reader.readInt32();
                        break;
                    case 3:
                        message.success = reader.readBool();
                        break;
                    case 4:
                        message.error_message = reader.readString();
                        break;
                    case 5:
                        message.last_basis = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAttachmentsResponse {
            return GetAttachmentsResponse.deserialize(bytes);
        }
    }
    export class DeleteAttachmentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            attachment_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("attachment_id" in data && data.attachment_id != undefined) {
                    this.attachment_id = data.attachment_id;
                }
            }
        }
        get attachment_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set attachment_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            attachment_id?: string;
        }): DeleteAttachmentRequest {
            const message = new DeleteAttachmentRequest({});
            if (data.attachment_id != null) {
                message.attachment_id = data.attachment_id;
            }
            return message;
        }
        toObject() {
            const data: {
                attachment_id?: string;
            } = {};
            if (this.attachment_id != null) {
                data.attachment_id = this.attachment_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.attachment_id.length)
                writer.writeString(1, this.attachment_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAttachmentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAttachmentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.attachment_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteAttachmentRequest {
            return DeleteAttachmentRequest.deserialize(bytes);
        }
    }
    export class DeleteAttachmentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            error_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            error_message?: string;
        }): DeleteAttachmentResponse {
            const message = new DeleteAttachmentResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                error_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.error_message.length)
                writer.writeString(2, this.error_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAttachmentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAttachmentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.error_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteAttachmentResponse {
            return DeleteAttachmentResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAttachmentServiceService {
        static definition = {
            GetAttachmentsByInboxIds: {
                path: "/tmq.AttachmentService/GetAttachmentsByInboxIds",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAttachmentsByInboxIdsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAttachmentsByInboxIdsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAttachmentsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAttachmentsResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteAttachment: {
                path: "/tmq.AttachmentService/DeleteAttachment",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteAttachmentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteAttachmentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteAttachmentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteAttachmentResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetAttachmentsByInboxIds(call: grpc_1.ServerUnaryCall<GetAttachmentsByInboxIdsRequest, GetAttachmentsResponse>, callback: grpc_1.sendUnaryData<GetAttachmentsResponse>): void;
        abstract DeleteAttachment(call: grpc_1.ServerUnaryCall<DeleteAttachmentRequest, DeleteAttachmentResponse>, callback: grpc_1.sendUnaryData<DeleteAttachmentResponse>): void;
    }
    export class AttachmentServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAttachmentServiceService.definition, "AttachmentService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetAttachmentsByInboxIds: GrpcUnaryServiceInterface<GetAttachmentsByInboxIdsRequest, GetAttachmentsResponse> = (message: GetAttachmentsByInboxIdsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAttachmentsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAttachmentsResponse>, callback?: grpc_1.requestCallback<GetAttachmentsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAttachmentsByInboxIds(message, metadata, options, callback);
        };
        DeleteAttachment: GrpcUnaryServiceInterface<DeleteAttachmentRequest, DeleteAttachmentResponse> = (message: DeleteAttachmentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteAttachmentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteAttachmentResponse>, callback?: grpc_1.requestCallback<DeleteAttachmentResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteAttachment(message, metadata, options, callback);
        };
    }
}
