/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: tmq/assistant.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/struct";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class Model extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            provider?: string;
            model?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("provider" in data && data.provider != undefined) {
                    this.provider = data.provider;
                }
                if ("model" in data && data.model != undefined) {
                    this.model = data.model;
                }
            }
        }
        get provider() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set provider(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get model() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set model(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            provider?: string;
            model?: string;
        }): Model {
            const message = new Model({});
            if (data.provider != null) {
                message.provider = data.provider;
            }
            if (data.model != null) {
                message.model = data.model;
            }
            return message;
        }
        toObject() {
            const data: {
                provider?: string;
                model?: string;
            } = {};
            if (this.provider != null) {
                data.provider = this.provider;
            }
            if (this.model != null) {
                data.model = this.model;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.provider.length)
                writer.writeString(1, this.provider);
            if (this.model.length)
                writer.writeString(2, this.model);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Model {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Model();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.provider = reader.readString();
                        break;
                    case 2:
                        message.model = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Model {
            return Model.deserialize(bytes);
        }
    }
    export class Voice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            provider?: string;
            voiceId?: string;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("provider" in data && data.provider != undefined) {
                    this.provider = data.provider;
                }
                if ("voiceId" in data && data.voiceId != undefined) {
                    this.voiceId = data.voiceId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get provider() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set provider(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get voiceId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set voiceId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            provider?: string;
            voiceId?: string;
            name?: string;
        }): Voice {
            const message = new Voice({});
            if (data.provider != null) {
                message.provider = data.provider;
            }
            if (data.voiceId != null) {
                message.voiceId = data.voiceId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                provider?: string;
                voiceId?: string;
                name?: string;
            } = {};
            if (this.provider != null) {
                data.provider = this.provider;
            }
            if (this.voiceId != null) {
                data.voiceId = this.voiceId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.provider.length)
                writer.writeString(1, this.provider);
            if (this.voiceId.length)
                writer.writeString(2, this.voiceId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Voice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Voice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.provider = reader.readString();
                        break;
                    case 2:
                        message.voiceId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Voice {
            return Voice.deserialize(bytes);
        }
    }
    export class KnowledgeBase extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            provider?: string;
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("provider" in data && data.provider != undefined) {
                    this.provider = data.provider;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get provider() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set provider(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            provider?: string;
            id?: string;
        }): KnowledgeBase {
            const message = new KnowledgeBase({});
            if (data.provider != null) {
                message.provider = data.provider;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                provider?: string;
                id?: string;
            } = {};
            if (this.provider != null) {
                data.provider = this.provider;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.provider.length)
                writer.writeString(1, this.provider);
            if (this.id.length)
                writer.writeString(2, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KnowledgeBase {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KnowledgeBase();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.provider = reader.readString();
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KnowledgeBase {
            return KnowledgeBase.deserialize(bytes);
        }
    }
    export class Transcriber extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            provider?: string;
            model?: string;
            language?: string;
            smartFormat?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("provider" in data && data.provider != undefined) {
                    this.provider = data.provider;
                }
                if ("model" in data && data.model != undefined) {
                    this.model = data.model;
                }
                if ("language" in data && data.language != undefined) {
                    this.language = data.language;
                }
                if ("smartFormat" in data && data.smartFormat != undefined) {
                    this.smartFormat = data.smartFormat;
                }
            }
        }
        get provider() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set provider(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get model() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set model(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get language() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set language(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get smartFormat() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set smartFormat(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            provider?: string;
            model?: string;
            language?: string;
            smartFormat?: boolean;
        }): Transcriber {
            const message = new Transcriber({});
            if (data.provider != null) {
                message.provider = data.provider;
            }
            if (data.model != null) {
                message.model = data.model;
            }
            if (data.language != null) {
                message.language = data.language;
            }
            if (data.smartFormat != null) {
                message.smartFormat = data.smartFormat;
            }
            return message;
        }
        toObject() {
            const data: {
                provider?: string;
                model?: string;
                language?: string;
                smartFormat?: boolean;
            } = {};
            if (this.provider != null) {
                data.provider = this.provider;
            }
            if (this.model != null) {
                data.model = this.model;
            }
            if (this.language != null) {
                data.language = this.language;
            }
            if (this.smartFormat != null) {
                data.smartFormat = this.smartFormat;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.provider.length)
                writer.writeString(1, this.provider);
            if (this.model.length)
                writer.writeString(2, this.model);
            if (this.language.length)
                writer.writeString(3, this.language);
            if (this.smartFormat != false)
                writer.writeBool(4, this.smartFormat);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Transcriber {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Transcriber();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.provider = reader.readString();
                        break;
                    case 2:
                        message.model = reader.readString();
                        break;
                    case 3:
                        message.language = reader.readString();
                        break;
                    case 4:
                        message.smartFormat = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Transcriber {
            return Transcriber.deserialize(bytes);
        }
    }
    export class Tool extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            function?: dependency_1.google.protobuf.Struct;
            name?: string;
            description?: string;
            serverUrl?: string;
            token?: string;
            timeout?: number;
            headers?: Map<string, string>;
            async?: boolean;
            messages?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("function" in data && data.function != undefined) {
                    this.function = data.function;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("serverUrl" in data && data.serverUrl != undefined) {
                    this.serverUrl = data.serverUrl;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("timeout" in data && data.timeout != undefined) {
                    this.timeout = data.timeout;
                }
                if ("headers" in data && data.headers != undefined) {
                    this.headers = data.headers;
                }
                if ("async" in data && data.async != undefined) {
                    this.async = data.async;
                }
                if ("messages" in data && data.messages != undefined) {
                    this.messages = data.messages;
                }
            }
            if (!this.headers)
                this.headers = new Map();
            if (!this.messages)
                this.messages = new Map();
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get function() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 2) as dependency_1.google.protobuf.Struct;
        }
        set function(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_function() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get serverUrl() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set serverUrl(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get timeout() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set timeout(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get headers() {
            return pb_1.Message.getField(this, 8) as any as Map<string, string>;
        }
        set headers(value: Map<string, string>) {
            pb_1.Message.setField(this, 8, value as any);
        }
        get async() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set async(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get messages() {
            return pb_1.Message.getField(this, 10) as any as Map<string, string>;
        }
        set messages(value: Map<string, string>) {
            pb_1.Message.setField(this, 10, value as any);
        }
        static fromObject(data: {
            type?: string;
            function?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            name?: string;
            description?: string;
            serverUrl?: string;
            token?: string;
            timeout?: number;
            headers?: {
                [key: string]: string;
            };
            async?: boolean;
            messages?: {
                [key: string]: string;
            };
        }): Tool {
            const message = new Tool({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.function != null) {
                message.function = dependency_1.google.protobuf.Struct.fromObject(data.function);
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.serverUrl != null) {
                message.serverUrl = data.serverUrl;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.timeout != null) {
                message.timeout = data.timeout;
            }
            if (typeof data.headers == "object") {
                message.headers = new Map(Object.entries(data.headers));
            }
            if (data.async != null) {
                message.async = data.async;
            }
            if (typeof data.messages == "object") {
                message.messages = new Map(Object.entries(data.messages));
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                function?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
                name?: string;
                description?: string;
                serverUrl?: string;
                token?: string;
                timeout?: number;
                headers?: {
                    [key: string]: string;
                };
                async?: boolean;
                messages?: {
                    [key: string]: string;
                };
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.function != null) {
                data.function = this.function.toObject();
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.serverUrl != null) {
                data.serverUrl = this.serverUrl;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.timeout != null) {
                data.timeout = this.timeout;
            }
            if (this.headers != null) {
                data.headers = (Object.fromEntries)(this.headers);
            }
            if (this.async != null) {
                data.async = this.async;
            }
            if (this.messages != null) {
                data.messages = (Object.fromEntries)(this.messages);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.has_function)
                writer.writeMessage(2, this.function, () => this.function.serialize(writer));
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.description.length)
                writer.writeString(4, this.description);
            if (this.serverUrl.length)
                writer.writeString(5, this.serverUrl);
            if (this.token.length)
                writer.writeString(6, this.token);
            if (this.timeout != 0)
                writer.writeInt32(7, this.timeout);
            for (const [key, value] of this.headers) {
                writer.writeMessage(8, this.headers, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.async != false)
                writer.writeBool(9, this.async);
            for (const [key, value] of this.messages) {
                writer.writeMessage(10, this.messages, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Tool {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Tool();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.function, () => message.function = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.description = reader.readString();
                        break;
                    case 5:
                        message.serverUrl = reader.readString();
                        break;
                    case 6:
                        message.token = reader.readString();
                        break;
                    case 7:
                        message.timeout = reader.readInt32();
                        break;
                    case 8:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.headers as any, reader, reader.readString, reader.readString));
                        break;
                    case 9:
                        message.async = reader.readBool();
                        break;
                    case 10:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.messages as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Tool {
            return Tool.deserialize(bytes);
        }
    }
    export class AssistantRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            userId?: string;
            businessId?: string;
            assistantId?: string;
            assistantIdLlm?: string;
            model?: Model;
            voice?: Voice;
            metadata?: dependency_1.google.protobuf.Struct;
            description?: string;
            firstMessage?: string;
            systemMessage?: string;
            serverUrl?: string;
            transcriber?: Transcriber;
            serverMessages?: string[];
            tools?: Tool[];
            knowledgeBase?: KnowledgeBase;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [14, 15], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("businessId" in data && data.businessId != undefined) {
                    this.businessId = data.businessId;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("assistantIdLlm" in data && data.assistantIdLlm != undefined) {
                    this.assistantIdLlm = data.assistantIdLlm;
                }
                if ("model" in data && data.model != undefined) {
                    this.model = data.model;
                }
                if ("voice" in data && data.voice != undefined) {
                    this.voice = data.voice;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("firstMessage" in data && data.firstMessage != undefined) {
                    this.firstMessage = data.firstMessage;
                }
                if ("systemMessage" in data && data.systemMessage != undefined) {
                    this.systemMessage = data.systemMessage;
                }
                if ("serverUrl" in data && data.serverUrl != undefined) {
                    this.serverUrl = data.serverUrl;
                }
                if ("transcriber" in data && data.transcriber != undefined) {
                    this.transcriber = data.transcriber;
                }
                if ("serverMessages" in data && data.serverMessages != undefined) {
                    this.serverMessages = data.serverMessages;
                }
                if ("tools" in data && data.tools != undefined) {
                    this.tools = data.tools;
                }
                if ("knowledgeBase" in data && data.knowledgeBase != undefined) {
                    this.knowledgeBase = data.knowledgeBase;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get businessId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set businessId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get assistantIdLlm() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set assistantIdLlm(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get model() {
            return pb_1.Message.getWrapperField(this, Model, 6) as Model;
        }
        set model(value: Model) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_model() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get voice() {
            return pb_1.Message.getWrapperField(this, Voice, 7) as Voice;
        }
        set voice(value: Voice) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_voice() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 8) as dependency_1.google.protobuf.Struct;
        }
        set metadata(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get firstMessage() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set firstMessage(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get systemMessage() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set systemMessage(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get serverUrl() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set serverUrl(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get transcriber() {
            return pb_1.Message.getWrapperField(this, Transcriber, 13) as Transcriber;
        }
        set transcriber(value: Transcriber) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get has_transcriber() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get serverMessages() {
            return pb_1.Message.getFieldWithDefault(this, 14, []) as string[];
        }
        set serverMessages(value: string[]) {
            pb_1.Message.setField(this, 14, value);
        }
        get tools() {
            return pb_1.Message.getRepeatedWrapperField(this, Tool, 15) as Tool[];
        }
        set tools(value: Tool[]) {
            pb_1.Message.setRepeatedWrapperField(this, 15, value);
        }
        get knowledgeBase() {
            return pb_1.Message.getWrapperField(this, KnowledgeBase, 16) as KnowledgeBase;
        }
        set knowledgeBase(value: KnowledgeBase) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get has_knowledgeBase() {
            return pb_1.Message.getField(this, 16) != null;
        }
        static fromObject(data: {
            name?: string;
            userId?: string;
            businessId?: string;
            assistantId?: string;
            assistantIdLlm?: string;
            model?: ReturnType<typeof Model.prototype.toObject>;
            voice?: ReturnType<typeof Voice.prototype.toObject>;
            metadata?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            description?: string;
            firstMessage?: string;
            systemMessage?: string;
            serverUrl?: string;
            transcriber?: ReturnType<typeof Transcriber.prototype.toObject>;
            serverMessages?: string[];
            tools?: ReturnType<typeof Tool.prototype.toObject>[];
            knowledgeBase?: ReturnType<typeof KnowledgeBase.prototype.toObject>;
        }): AssistantRequest {
            const message = new AssistantRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.businessId != null) {
                message.businessId = data.businessId;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.assistantIdLlm != null) {
                message.assistantIdLlm = data.assistantIdLlm;
            }
            if (data.model != null) {
                message.model = Model.fromObject(data.model);
            }
            if (data.voice != null) {
                message.voice = Voice.fromObject(data.voice);
            }
            if (data.metadata != null) {
                message.metadata = dependency_1.google.protobuf.Struct.fromObject(data.metadata);
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.firstMessage != null) {
                message.firstMessage = data.firstMessage;
            }
            if (data.systemMessage != null) {
                message.systemMessage = data.systemMessage;
            }
            if (data.serverUrl != null) {
                message.serverUrl = data.serverUrl;
            }
            if (data.transcriber != null) {
                message.transcriber = Transcriber.fromObject(data.transcriber);
            }
            if (data.serverMessages != null) {
                message.serverMessages = data.serverMessages;
            }
            if (data.tools != null) {
                message.tools = data.tools.map(item => Tool.fromObject(item));
            }
            if (data.knowledgeBase != null) {
                message.knowledgeBase = KnowledgeBase.fromObject(data.knowledgeBase);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                userId?: string;
                businessId?: string;
                assistantId?: string;
                assistantIdLlm?: string;
                model?: ReturnType<typeof Model.prototype.toObject>;
                voice?: ReturnType<typeof Voice.prototype.toObject>;
                metadata?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
                description?: string;
                firstMessage?: string;
                systemMessage?: string;
                serverUrl?: string;
                transcriber?: ReturnType<typeof Transcriber.prototype.toObject>;
                serverMessages?: string[];
                tools?: ReturnType<typeof Tool.prototype.toObject>[];
                knowledgeBase?: ReturnType<typeof KnowledgeBase.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.businessId != null) {
                data.businessId = this.businessId;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.assistantIdLlm != null) {
                data.assistantIdLlm = this.assistantIdLlm;
            }
            if (this.model != null) {
                data.model = this.model.toObject();
            }
            if (this.voice != null) {
                data.voice = this.voice.toObject();
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.firstMessage != null) {
                data.firstMessage = this.firstMessage;
            }
            if (this.systemMessage != null) {
                data.systemMessage = this.systemMessage;
            }
            if (this.serverUrl != null) {
                data.serverUrl = this.serverUrl;
            }
            if (this.transcriber != null) {
                data.transcriber = this.transcriber.toObject();
            }
            if (this.serverMessages != null) {
                data.serverMessages = this.serverMessages;
            }
            if (this.tools != null) {
                data.tools = this.tools.map((item: Tool) => item.toObject());
            }
            if (this.knowledgeBase != null) {
                data.knowledgeBase = this.knowledgeBase.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.userId.length)
                writer.writeString(2, this.userId);
            if (this.businessId.length)
                writer.writeString(3, this.businessId);
            if (this.assistantId.length)
                writer.writeString(4, this.assistantId);
            if (this.assistantIdLlm.length)
                writer.writeString(5, this.assistantIdLlm);
            if (this.has_model)
                writer.writeMessage(6, this.model, () => this.model.serialize(writer));
            if (this.has_voice)
                writer.writeMessage(7, this.voice, () => this.voice.serialize(writer));
            if (this.has_metadata)
                writer.writeMessage(8, this.metadata, () => this.metadata.serialize(writer));
            if (this.description.length)
                writer.writeString(9, this.description);
            if (this.firstMessage.length)
                writer.writeString(10, this.firstMessage);
            if (this.systemMessage.length)
                writer.writeString(11, this.systemMessage);
            if (this.serverUrl.length)
                writer.writeString(12, this.serverUrl);
            if (this.has_transcriber)
                writer.writeMessage(13, this.transcriber, () => this.transcriber.serialize(writer));
            if (this.serverMessages.length)
                writer.writeRepeatedString(14, this.serverMessages);
            if (this.tools.length)
                writer.writeRepeatedMessage(15, this.tools, (item: Tool) => item.serialize(writer));
            if (this.has_knowledgeBase)
                writer.writeMessage(16, this.knowledgeBase, () => this.knowledgeBase.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.userId = reader.readString();
                        break;
                    case 3:
                        message.businessId = reader.readString();
                        break;
                    case 4:
                        message.assistantId = reader.readString();
                        break;
                    case 5:
                        message.assistantIdLlm = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.model, () => message.model = Model.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.voice, () => message.voice = Voice.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.metadata, () => message.metadata = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 9:
                        message.description = reader.readString();
                        break;
                    case 10:
                        message.firstMessage = reader.readString();
                        break;
                    case 11:
                        message.systemMessage = reader.readString();
                        break;
                    case 12:
                        message.serverUrl = reader.readString();
                        break;
                    case 13:
                        reader.readMessage(message.transcriber, () => message.transcriber = Transcriber.deserialize(reader));
                        break;
                    case 14:
                        pb_1.Message.addToRepeatedField(message, 14, reader.readString());
                        break;
                    case 15:
                        reader.readMessage(message.tools, () => pb_1.Message.addToRepeatedWrapperField(message, 15, Tool.deserialize(reader), Tool));
                        break;
                    case 16:
                        reader.readMessage(message.knowledgeBase, () => message.knowledgeBase = KnowledgeBase.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssistantRequest {
            return AssistantRequest.deserialize(bytes);
        }
    }
    export class AssistantResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): AssistantResponse {
            const message = new AssistantResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssistantResponse {
            return AssistantResponse.deserialize(bytes);
        }
    }
    export class FetchAssistantRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            lastBasis?: number;
            keywords?: string;
            userId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("lastBasis" in data && data.lastBasis != undefined) {
                    this.lastBasis = data.lastBasis;
                }
                if ("keywords" in data && data.keywords != undefined) {
                    this.keywords = data.keywords;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
            }
        }
        get lastBasis() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set lastBasis(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get keywords() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set keywords(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            lastBasis?: number;
            keywords?: string;
            userId?: string;
        }): FetchAssistantRequest {
            const message = new FetchAssistantRequest({});
            if (data.lastBasis != null) {
                message.lastBasis = data.lastBasis;
            }
            if (data.keywords != null) {
                message.keywords = data.keywords;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            return message;
        }
        toObject() {
            const data: {
                lastBasis?: number;
                keywords?: string;
                userId?: string;
            } = {};
            if (this.lastBasis != null) {
                data.lastBasis = this.lastBasis;
            }
            if (this.keywords != null) {
                data.keywords = this.keywords;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.lastBasis != 0)
                writer.writeInt64(1, this.lastBasis);
            if (this.keywords.length)
                writer.writeString(2, this.keywords);
            if (this.userId.length)
                writer.writeString(3, this.userId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchAssistantRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchAssistantRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.lastBasis = reader.readInt64();
                        break;
                    case 2:
                        message.keywords = reader.readString();
                        break;
                    case 3:
                        message.userId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchAssistantRequest {
            return FetchAssistantRequest.deserialize(bytes);
        }
    }
    export class AllAssistants extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            userId?: string;
            businessId?: string;
            assistantId?: string;
            assistantIdLlm?: string;
            model?: Model;
            voice?: Voice;
            metadata?: dependency_1.google.protobuf.Struct;
            createdAt?: number;
            updatedAt?: number;
            description?: string;
            firstMessage?: string;
            systemMessage?: string;
            serverUrl?: string;
            transcriber?: Transcriber;
            serverMessages?: string[];
            tools?: Tool[];
            knowledgeBase?: KnowledgeBase;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [17, 18], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("businessId" in data && data.businessId != undefined) {
                    this.businessId = data.businessId;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("assistantIdLlm" in data && data.assistantIdLlm != undefined) {
                    this.assistantIdLlm = data.assistantIdLlm;
                }
                if ("model" in data && data.model != undefined) {
                    this.model = data.model;
                }
                if ("voice" in data && data.voice != undefined) {
                    this.voice = data.voice;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("firstMessage" in data && data.firstMessage != undefined) {
                    this.firstMessage = data.firstMessage;
                }
                if ("systemMessage" in data && data.systemMessage != undefined) {
                    this.systemMessage = data.systemMessage;
                }
                if ("serverUrl" in data && data.serverUrl != undefined) {
                    this.serverUrl = data.serverUrl;
                }
                if ("transcriber" in data && data.transcriber != undefined) {
                    this.transcriber = data.transcriber;
                }
                if ("serverMessages" in data && data.serverMessages != undefined) {
                    this.serverMessages = data.serverMessages;
                }
                if ("tools" in data && data.tools != undefined) {
                    this.tools = data.tools;
                }
                if ("knowledgeBase" in data && data.knowledgeBase != undefined) {
                    this.knowledgeBase = data.knowledgeBase;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get businessId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set businessId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get assistantIdLlm() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set assistantIdLlm(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get model() {
            return pb_1.Message.getWrapperField(this, Model, 7) as Model;
        }
        set model(value: Model) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_model() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get voice() {
            return pb_1.Message.getWrapperField(this, Voice, 8) as Voice;
        }
        set voice(value: Voice) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_voice() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 9) as dependency_1.google.protobuf.Struct;
        }
        set metadata(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set createdAt(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get updatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set updatedAt(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get firstMessage() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set firstMessage(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get systemMessage() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set systemMessage(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get serverUrl() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set serverUrl(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get transcriber() {
            return pb_1.Message.getWrapperField(this, Transcriber, 16) as Transcriber;
        }
        set transcriber(value: Transcriber) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get has_transcriber() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get serverMessages() {
            return pb_1.Message.getFieldWithDefault(this, 17, []) as string[];
        }
        set serverMessages(value: string[]) {
            pb_1.Message.setField(this, 17, value);
        }
        get tools() {
            return pb_1.Message.getRepeatedWrapperField(this, Tool, 18) as Tool[];
        }
        set tools(value: Tool[]) {
            pb_1.Message.setRepeatedWrapperField(this, 18, value);
        }
        get knowledgeBase() {
            return pb_1.Message.getWrapperField(this, KnowledgeBase, 19) as KnowledgeBase;
        }
        set knowledgeBase(value: KnowledgeBase) {
            pb_1.Message.setWrapperField(this, 19, value);
        }
        get has_knowledgeBase() {
            return pb_1.Message.getField(this, 19) != null;
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            userId?: string;
            businessId?: string;
            assistantId?: string;
            assistantIdLlm?: string;
            model?: ReturnType<typeof Model.prototype.toObject>;
            voice?: ReturnType<typeof Voice.prototype.toObject>;
            metadata?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            createdAt?: number;
            updatedAt?: number;
            description?: string;
            firstMessage?: string;
            systemMessage?: string;
            serverUrl?: string;
            transcriber?: ReturnType<typeof Transcriber.prototype.toObject>;
            serverMessages?: string[];
            tools?: ReturnType<typeof Tool.prototype.toObject>[];
            knowledgeBase?: ReturnType<typeof KnowledgeBase.prototype.toObject>;
        }): AllAssistants {
            const message = new AllAssistants({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.businessId != null) {
                message.businessId = data.businessId;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.assistantIdLlm != null) {
                message.assistantIdLlm = data.assistantIdLlm;
            }
            if (data.model != null) {
                message.model = Model.fromObject(data.model);
            }
            if (data.voice != null) {
                message.voice = Voice.fromObject(data.voice);
            }
            if (data.metadata != null) {
                message.metadata = dependency_1.google.protobuf.Struct.fromObject(data.metadata);
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.updatedAt != null) {
                message.updatedAt = data.updatedAt;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.firstMessage != null) {
                message.firstMessage = data.firstMessage;
            }
            if (data.systemMessage != null) {
                message.systemMessage = data.systemMessage;
            }
            if (data.serverUrl != null) {
                message.serverUrl = data.serverUrl;
            }
            if (data.transcriber != null) {
                message.transcriber = Transcriber.fromObject(data.transcriber);
            }
            if (data.serverMessages != null) {
                message.serverMessages = data.serverMessages;
            }
            if (data.tools != null) {
                message.tools = data.tools.map(item => Tool.fromObject(item));
            }
            if (data.knowledgeBase != null) {
                message.knowledgeBase = KnowledgeBase.fromObject(data.knowledgeBase);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                userId?: string;
                businessId?: string;
                assistantId?: string;
                assistantIdLlm?: string;
                model?: ReturnType<typeof Model.prototype.toObject>;
                voice?: ReturnType<typeof Voice.prototype.toObject>;
                metadata?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
                createdAt?: number;
                updatedAt?: number;
                description?: string;
                firstMessage?: string;
                systemMessage?: string;
                serverUrl?: string;
                transcriber?: ReturnType<typeof Transcriber.prototype.toObject>;
                serverMessages?: string[];
                tools?: ReturnType<typeof Tool.prototype.toObject>[];
                knowledgeBase?: ReturnType<typeof KnowledgeBase.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.businessId != null) {
                data.businessId = this.businessId;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.assistantIdLlm != null) {
                data.assistantIdLlm = this.assistantIdLlm;
            }
            if (this.model != null) {
                data.model = this.model.toObject();
            }
            if (this.voice != null) {
                data.voice = this.voice.toObject();
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.firstMessage != null) {
                data.firstMessage = this.firstMessage;
            }
            if (this.systemMessage != null) {
                data.systemMessage = this.systemMessage;
            }
            if (this.serverUrl != null) {
                data.serverUrl = this.serverUrl;
            }
            if (this.transcriber != null) {
                data.transcriber = this.transcriber.toObject();
            }
            if (this.serverMessages != null) {
                data.serverMessages = this.serverMessages;
            }
            if (this.tools != null) {
                data.tools = this.tools.map((item: Tool) => item.toObject());
            }
            if (this.knowledgeBase != null) {
                data.knowledgeBase = this.knowledgeBase.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.userId.length)
                writer.writeString(3, this.userId);
            if (this.businessId.length)
                writer.writeString(4, this.businessId);
            if (this.assistantId.length)
                writer.writeString(5, this.assistantId);
            if (this.assistantIdLlm.length)
                writer.writeString(6, this.assistantIdLlm);
            if (this.has_model)
                writer.writeMessage(7, this.model, () => this.model.serialize(writer));
            if (this.has_voice)
                writer.writeMessage(8, this.voice, () => this.voice.serialize(writer));
            if (this.has_metadata)
                writer.writeMessage(9, this.metadata, () => this.metadata.serialize(writer));
            if (this.createdAt != 0)
                writer.writeInt64(10, this.createdAt);
            if (this.updatedAt != 0)
                writer.writeInt64(11, this.updatedAt);
            if (this.description.length)
                writer.writeString(12, this.description);
            if (this.firstMessage.length)
                writer.writeString(13, this.firstMessage);
            if (this.systemMessage.length)
                writer.writeString(14, this.systemMessage);
            if (this.serverUrl.length)
                writer.writeString(15, this.serverUrl);
            if (this.has_transcriber)
                writer.writeMessage(16, this.transcriber, () => this.transcriber.serialize(writer));
            if (this.serverMessages.length)
                writer.writeRepeatedString(17, this.serverMessages);
            if (this.tools.length)
                writer.writeRepeatedMessage(18, this.tools, (item: Tool) => item.serialize(writer));
            if (this.has_knowledgeBase)
                writer.writeMessage(19, this.knowledgeBase, () => this.knowledgeBase.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AllAssistants {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AllAssistants();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.userId = reader.readString();
                        break;
                    case 4:
                        message.businessId = reader.readString();
                        break;
                    case 5:
                        message.assistantId = reader.readString();
                        break;
                    case 6:
                        message.assistantIdLlm = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.model, () => message.model = Model.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.voice, () => message.voice = Voice.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.metadata, () => message.metadata = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 10:
                        message.createdAt = reader.readInt64();
                        break;
                    case 11:
                        message.updatedAt = reader.readInt64();
                        break;
                    case 12:
                        message.description = reader.readString();
                        break;
                    case 13:
                        message.firstMessage = reader.readString();
                        break;
                    case 14:
                        message.systemMessage = reader.readString();
                        break;
                    case 15:
                        message.serverUrl = reader.readString();
                        break;
                    case 16:
                        reader.readMessage(message.transcriber, () => message.transcriber = Transcriber.deserialize(reader));
                        break;
                    case 17:
                        pb_1.Message.addToRepeatedField(message, 17, reader.readString());
                        break;
                    case 18:
                        reader.readMessage(message.tools, () => pb_1.Message.addToRepeatedWrapperField(message, 18, Tool.deserialize(reader), Tool));
                        break;
                    case 19:
                        reader.readMessage(message.knowledgeBase, () => message.knowledgeBase = KnowledgeBase.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AllAssistants {
            return AllAssistants.deserialize(bytes);
        }
    }
    export class FetchAssistantResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            assistants?: AllAssistants[];
            lastBasis?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("assistants" in data && data.assistants != undefined) {
                    this.assistants = data.assistants;
                }
                if ("lastBasis" in data && data.lastBasis != undefined) {
                    this.lastBasis = data.lastBasis;
                }
            }
        }
        get assistants() {
            return pb_1.Message.getRepeatedWrapperField(this, AllAssistants, 1) as AllAssistants[];
        }
        set assistants(value: AllAssistants[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get lastBasis() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set lastBasis(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            assistants?: ReturnType<typeof AllAssistants.prototype.toObject>[];
            lastBasis?: number;
        }): FetchAssistantResponse {
            const message = new FetchAssistantResponse({});
            if (data.assistants != null) {
                message.assistants = data.assistants.map(item => AllAssistants.fromObject(item));
            }
            if (data.lastBasis != null) {
                message.lastBasis = data.lastBasis;
            }
            return message;
        }
        toObject() {
            const data: {
                assistants?: ReturnType<typeof AllAssistants.prototype.toObject>[];
                lastBasis?: number;
            } = {};
            if (this.assistants != null) {
                data.assistants = this.assistants.map((item: AllAssistants) => item.toObject());
            }
            if (this.lastBasis != null) {
                data.lastBasis = this.lastBasis;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.assistants.length)
                writer.writeRepeatedMessage(1, this.assistants, (item: AllAssistants) => item.serialize(writer));
            if (this.lastBasis != 0)
                writer.writeInt64(2, this.lastBasis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchAssistantResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchAssistantResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.assistants, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AllAssistants.deserialize(reader), AllAssistants));
                        break;
                    case 2:
                        message.lastBasis = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchAssistantResponse {
            return FetchAssistantResponse.deserialize(bytes);
        }
    }
    export class AssistantConfigRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): AssistantConfigRequest {
            const message = new AssistantConfigRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantConfigRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantConfigRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssistantConfigRequest {
            return AssistantConfigRequest.deserialize(bytes);
        }
    }
    export class AssistantConfigResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            apiKey?: string;
            serverUrl?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("apiKey" in data && data.apiKey != undefined) {
                    this.apiKey = data.apiKey;
                }
                if ("serverUrl" in data && data.serverUrl != undefined) {
                    this.serverUrl = data.serverUrl;
                }
            }
        }
        get apiKey() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set apiKey(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get serverUrl() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set serverUrl(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            apiKey?: string;
            serverUrl?: string;
        }): AssistantConfigResponse {
            const message = new AssistantConfigResponse({});
            if (data.apiKey != null) {
                message.apiKey = data.apiKey;
            }
            if (data.serverUrl != null) {
                message.serverUrl = data.serverUrl;
            }
            return message;
        }
        toObject() {
            const data: {
                apiKey?: string;
                serverUrl?: string;
            } = {};
            if (this.apiKey != null) {
                data.apiKey = this.apiKey;
            }
            if (this.serverUrl != null) {
                data.serverUrl = this.serverUrl;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.apiKey.length)
                writer.writeString(1, this.apiKey);
            if (this.serverUrl.length)
                writer.writeString(2, this.serverUrl);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantConfigResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantConfigResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.apiKey = reader.readString();
                        break;
                    case 2:
                        message.serverUrl = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssistantConfigResponse {
            return AssistantConfigResponse.deserialize(bytes);
        }
    }
    export class AllVoices extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            provider?: string;
            voiceId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("provider" in data && data.provider != undefined) {
                    this.provider = data.provider;
                }
                if ("voiceId" in data && data.voiceId != undefined) {
                    this.voiceId = data.voiceId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get provider() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set provider(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get voiceId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set voiceId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            provider?: string;
            voiceId?: string;
        }): AllVoices {
            const message = new AllVoices({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.provider != null) {
                message.provider = data.provider;
            }
            if (data.voiceId != null) {
                message.voiceId = data.voiceId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                provider?: string;
                voiceId?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.provider != null) {
                data.provider = this.provider;
            }
            if (this.voiceId != null) {
                data.voiceId = this.voiceId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.provider.length)
                writer.writeString(3, this.provider);
            if (this.voiceId.length)
                writer.writeString(4, this.voiceId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AllVoices {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AllVoices();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.provider = reader.readString();
                        break;
                    case 4:
                        message.voiceId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AllVoices {
            return AllVoices.deserialize(bytes);
        }
    }
    export class FetchVoicesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            voiceProvider?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("voiceProvider" in data && data.voiceProvider != undefined) {
                    this.voiceProvider = data.voiceProvider;
                }
            }
        }
        get voiceProvider() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set voiceProvider(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            voiceProvider?: string;
        }): FetchVoicesRequest {
            const message = new FetchVoicesRequest({});
            if (data.voiceProvider != null) {
                message.voiceProvider = data.voiceProvider;
            }
            return message;
        }
        toObject() {
            const data: {
                voiceProvider?: string;
            } = {};
            if (this.voiceProvider != null) {
                data.voiceProvider = this.voiceProvider;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.voiceProvider.length)
                writer.writeString(1, this.voiceProvider);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchVoicesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchVoicesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.voiceProvider = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchVoicesRequest {
            return FetchVoicesRequest.deserialize(bytes);
        }
    }
    export class FetchVoicesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            voices?: AllVoices[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("voices" in data && data.voices != undefined) {
                    this.voices = data.voices;
                }
            }
        }
        get voices() {
            return pb_1.Message.getRepeatedWrapperField(this, AllVoices, 1) as AllVoices[];
        }
        set voices(value: AllVoices[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            voices?: ReturnType<typeof AllVoices.prototype.toObject>[];
        }): FetchVoicesResponse {
            const message = new FetchVoicesResponse({});
            if (data.voices != null) {
                message.voices = data.voices.map(item => AllVoices.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                voices?: ReturnType<typeof AllVoices.prototype.toObject>[];
            } = {};
            if (this.voices != null) {
                data.voices = this.voices.map((item: AllVoices) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.voices.length)
                writer.writeRepeatedMessage(1, this.voices, (item: AllVoices) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchVoicesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchVoicesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.voices, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AllVoices.deserialize(reader), AllVoices));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchVoicesResponse {
            return FetchVoicesResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAssistantServiceService {
        static definition = {
            createAssistant: {
                path: "/tmq.AssistantService/createAssistant",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AssistantRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AssistantRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AssistantResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AssistantResponse.deserialize(new Uint8Array(bytes))
            },
            fetchAssistant: {
                path: "/tmq.AssistantService/fetchAssistant",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FetchAssistantRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FetchAssistantRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FetchAssistantResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FetchAssistantResponse.deserialize(new Uint8Array(bytes))
            },
            updateAssistant: {
                path: "/tmq.AssistantService/updateAssistant",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AssistantRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AssistantRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AssistantResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AssistantResponse.deserialize(new Uint8Array(bytes))
            },
            fetchAssistantConfig: {
                path: "/tmq.AssistantService/fetchAssistantConfig",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AssistantConfigRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AssistantConfigRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AssistantConfigResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AssistantConfigResponse.deserialize(new Uint8Array(bytes))
            },
            fetchVoices: {
                path: "/tmq.AssistantService/fetchVoices",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FetchVoicesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FetchVoicesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FetchVoicesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FetchVoicesResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract createAssistant(call: grpc_1.ServerUnaryCall<AssistantRequest, AssistantResponse>, callback: grpc_1.sendUnaryData<AssistantResponse>): void;
        abstract fetchAssistant(call: grpc_1.ServerUnaryCall<FetchAssistantRequest, FetchAssistantResponse>, callback: grpc_1.sendUnaryData<FetchAssistantResponse>): void;
        abstract updateAssistant(call: grpc_1.ServerUnaryCall<AssistantRequest, AssistantResponse>, callback: grpc_1.sendUnaryData<AssistantResponse>): void;
        abstract fetchAssistantConfig(call: grpc_1.ServerUnaryCall<AssistantConfigRequest, AssistantConfigResponse>, callback: grpc_1.sendUnaryData<AssistantConfigResponse>): void;
        abstract fetchVoices(call: grpc_1.ServerUnaryCall<FetchVoicesRequest, FetchVoicesResponse>, callback: grpc_1.sendUnaryData<FetchVoicesResponse>): void;
    }
    export class AssistantServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAssistantServiceService.definition, "AssistantService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        createAssistant: GrpcUnaryServiceInterface<AssistantRequest, AssistantResponse> = (message: AssistantRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AssistantResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AssistantResponse>, callback?: grpc_1.requestCallback<AssistantResponse>): grpc_1.ClientUnaryCall => {
            return super.createAssistant(message, metadata, options, callback);
        };
        fetchAssistant: GrpcUnaryServiceInterface<FetchAssistantRequest, FetchAssistantResponse> = (message: FetchAssistantRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FetchAssistantResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FetchAssistantResponse>, callback?: grpc_1.requestCallback<FetchAssistantResponse>): grpc_1.ClientUnaryCall => {
            return super.fetchAssistant(message, metadata, options, callback);
        };
        updateAssistant: GrpcUnaryServiceInterface<AssistantRequest, AssistantResponse> = (message: AssistantRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AssistantResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AssistantResponse>, callback?: grpc_1.requestCallback<AssistantResponse>): grpc_1.ClientUnaryCall => {
            return super.updateAssistant(message, metadata, options, callback);
        };
        fetchAssistantConfig: GrpcUnaryServiceInterface<AssistantConfigRequest, AssistantConfigResponse> = (message: AssistantConfigRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AssistantConfigResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AssistantConfigResponse>, callback?: grpc_1.requestCallback<AssistantConfigResponse>): grpc_1.ClientUnaryCall => {
            return super.fetchAssistantConfig(message, metadata, options, callback);
        };
        fetchVoices: GrpcUnaryServiceInterface<FetchVoicesRequest, FetchVoicesResponse> = (message: FetchVoicesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FetchVoicesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FetchVoicesResponse>, callback?: grpc_1.requestCallback<FetchVoicesResponse>): grpc_1.ClientUnaryCall => {
            return super.fetchVoices(message, metadata, options, callback);
        };
    }
}
