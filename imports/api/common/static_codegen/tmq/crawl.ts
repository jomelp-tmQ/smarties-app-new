/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: tmq/crawl.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as dependency_2 from "./../google/protobuf/struct";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class CrawlRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            url?: string;
            depth?: number;
            max_pages?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("depth" in data && data.depth != undefined) {
                    this.depth = data.depth;
                }
                if ("max_pages" in data && data.max_pages != undefined) {
                    this.max_pages = data.max_pages;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get depth() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set depth(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get max_pages() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set max_pages(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            userId?: string;
            url?: string;
            depth?: number;
            max_pages?: number;
        }): CrawlRequest {
            const message = new CrawlRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.depth != null) {
                message.depth = data.depth;
            }
            if (data.max_pages != null) {
                message.max_pages = data.max_pages;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                url?: string;
                depth?: number;
                max_pages?: number;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.depth != null) {
                data.depth = this.depth;
            }
            if (this.max_pages != null) {
                data.max_pages = this.max_pages;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.url.length)
                writer.writeString(2, this.url);
            if (this.depth != 0)
                writer.writeInt32(3, this.depth);
            if (this.max_pages != 0)
                writer.writeInt32(4, this.max_pages);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CrawlRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CrawlRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.url = reader.readString();
                        break;
                    case 3:
                        message.depth = reader.readInt32();
                        break;
                    case 4:
                        message.max_pages = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CrawlRequest {
            return CrawlRequest.deserialize(bytes);
        }
    }
    export class Crawl extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            url?: string;
            created_at?: string;
            updated_at?: string;
            user_id?: string;
            depth?: string;
            max_pages?: string;
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("depth" in data && data.depth != undefined) {
                    this.depth = data.depth;
                }
                if ("max_pages" in data && data.max_pages != undefined) {
                    this.max_pages = data.max_pages;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set created_at(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get updated_at() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set updated_at(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get depth() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set depth(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get max_pages() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set max_pages(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: string;
            url?: string;
            created_at?: string;
            updated_at?: string;
            user_id?: string;
            depth?: string;
            max_pages?: string;
            status?: string;
        }): Crawl {
            const message = new Crawl({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.updated_at != null) {
                message.updated_at = data.updated_at;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.depth != null) {
                message.depth = data.depth;
            }
            if (data.max_pages != null) {
                message.max_pages = data.max_pages;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                url?: string;
                created_at?: string;
                updated_at?: string;
                user_id?: string;
                depth?: string;
                max_pages?: string;
                status?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.depth != null) {
                data.depth = this.depth;
            }
            if (this.max_pages != null) {
                data.max_pages = this.max_pages;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.url.length)
                writer.writeString(2, this.url);
            if (this.created_at.length)
                writer.writeString(3, this.created_at);
            if (this.updated_at.length)
                writer.writeString(4, this.updated_at);
            if (this.user_id.length)
                writer.writeString(5, this.user_id);
            if (this.depth.length)
                writer.writeString(6, this.depth);
            if (this.max_pages.length)
                writer.writeString(7, this.max_pages);
            if (this.status.length)
                writer.writeString(8, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Crawl {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Crawl();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.url = reader.readString();
                        break;
                    case 3:
                        message.created_at = reader.readString();
                        break;
                    case 4:
                        message.updated_at = reader.readString();
                        break;
                    case 5:
                        message.user_id = reader.readString();
                        break;
                    case 6:
                        message.depth = reader.readString();
                        break;
                    case 7:
                        message.max_pages = reader.readString();
                        break;
                    case 8:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Crawl {
            return Crawl.deserialize(bytes);
        }
    }
    export class CrawlPages extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            crawl_id?: string;
            url?: string;
            title?: string;
            status?: string;
            error?: string;
            created_at?: string;
            updated_at?: string;
            user_id?: string;
            active?: boolean;
            metadata?: dependency_2.google.protobuf.Struct;
            file_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("crawl_id" in data && data.crawl_id != undefined) {
                    this.crawl_id = data.crawl_id;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("active" in data && data.active != undefined) {
                    this.active = data.active;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("file_id" in data && data.file_id != undefined) {
                    this.file_id = data.file_id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get crawl_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set crawl_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set error(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set created_at(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get updated_at() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set updated_at(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get active() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set active(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Struct, 11) as dependency_2.google.protobuf.Struct;
        }
        set metadata(value: dependency_2.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get file_id() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set file_id(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            id?: string;
            crawl_id?: string;
            url?: string;
            title?: string;
            status?: string;
            error?: string;
            created_at?: string;
            updated_at?: string;
            user_id?: string;
            active?: boolean;
            metadata?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
            file_id?: string;
        }): CrawlPages {
            const message = new CrawlPages({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.crawl_id != null) {
                message.crawl_id = data.crawl_id;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.updated_at != null) {
                message.updated_at = data.updated_at;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.active != null) {
                message.active = data.active;
            }
            if (data.metadata != null) {
                message.metadata = dependency_2.google.protobuf.Struct.fromObject(data.metadata);
            }
            if (data.file_id != null) {
                message.file_id = data.file_id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                crawl_id?: string;
                url?: string;
                title?: string;
                status?: string;
                error?: string;
                created_at?: string;
                updated_at?: string;
                user_id?: string;
                active?: boolean;
                metadata?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
                file_id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.crawl_id != null) {
                data.crawl_id = this.crawl_id;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.active != null) {
                data.active = this.active;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.file_id != null) {
                data.file_id = this.file_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.crawl_id.length)
                writer.writeString(2, this.crawl_id);
            if (this.url.length)
                writer.writeString(3, this.url);
            if (this.title.length)
                writer.writeString(4, this.title);
            if (this.status.length)
                writer.writeString(5, this.status);
            if (this.error.length)
                writer.writeString(6, this.error);
            if (this.created_at.length)
                writer.writeString(7, this.created_at);
            if (this.updated_at.length)
                writer.writeString(8, this.updated_at);
            if (this.user_id.length)
                writer.writeString(9, this.user_id);
            if (this.active != false)
                writer.writeBool(10, this.active);
            if (this.has_metadata)
                writer.writeMessage(11, this.metadata, () => this.metadata.serialize(writer));
            if (this.file_id.length)
                writer.writeString(12, this.file_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CrawlPages {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CrawlPages();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.crawl_id = reader.readString();
                        break;
                    case 3:
                        message.url = reader.readString();
                        break;
                    case 4:
                        message.title = reader.readString();
                        break;
                    case 5:
                        message.status = reader.readString();
                        break;
                    case 6:
                        message.error = reader.readString();
                        break;
                    case 7:
                        message.created_at = reader.readString();
                        break;
                    case 8:
                        message.updated_at = reader.readString();
                        break;
                    case 9:
                        message.user_id = reader.readString();
                        break;
                    case 10:
                        message.active = reader.readBool();
                        break;
                    case 11:
                        reader.readMessage(message.metadata, () => message.metadata = dependency_2.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 12:
                        message.file_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CrawlPages {
            return CrawlPages.deserialize(bytes);
        }
    }
    export class FetchCrawlRequestsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            searchQuery?: string;
            lastBasis?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("searchQuery" in data && data.searchQuery != undefined) {
                    this.searchQuery = data.searchQuery;
                }
                if ("lastBasis" in data && data.lastBasis != undefined) {
                    this.lastBasis = data.lastBasis;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get searchQuery() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set searchQuery(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get lastBasis() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set lastBasis(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            userId?: string;
            searchQuery?: string;
            lastBasis?: number;
        }): FetchCrawlRequestsRequest {
            const message = new FetchCrawlRequestsRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.searchQuery != null) {
                message.searchQuery = data.searchQuery;
            }
            if (data.lastBasis != null) {
                message.lastBasis = data.lastBasis;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                searchQuery?: string;
                lastBasis?: number;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.searchQuery != null) {
                data.searchQuery = this.searchQuery;
            }
            if (this.lastBasis != null) {
                data.lastBasis = this.lastBasis;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.searchQuery.length)
                writer.writeString(2, this.searchQuery);
            if (this.lastBasis != 0)
                writer.writeInt64(3, this.lastBasis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchCrawlRequestsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchCrawlRequestsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.searchQuery = reader.readString();
                        break;
                    case 3:
                        message.lastBasis = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchCrawlRequestsRequest {
            return FetchCrawlRequestsRequest.deserialize(bytes);
        }
    }
    export class FetchCrawlRequestsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            crawlRequests?: Crawl[];
            lastBasis?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("crawlRequests" in data && data.crawlRequests != undefined) {
                    this.crawlRequests = data.crawlRequests;
                }
                if ("lastBasis" in data && data.lastBasis != undefined) {
                    this.lastBasis = data.lastBasis;
                }
            }
        }
        get crawlRequests() {
            return pb_1.Message.getRepeatedWrapperField(this, Crawl, 1) as Crawl[];
        }
        set crawlRequests(value: Crawl[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get lastBasis() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set lastBasis(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            crawlRequests?: ReturnType<typeof Crawl.prototype.toObject>[];
            lastBasis?: number;
        }): FetchCrawlRequestsResponse {
            const message = new FetchCrawlRequestsResponse({});
            if (data.crawlRequests != null) {
                message.crawlRequests = data.crawlRequests.map(item => Crawl.fromObject(item));
            }
            if (data.lastBasis != null) {
                message.lastBasis = data.lastBasis;
            }
            return message;
        }
        toObject() {
            const data: {
                crawlRequests?: ReturnType<typeof Crawl.prototype.toObject>[];
                lastBasis?: number;
            } = {};
            if (this.crawlRequests != null) {
                data.crawlRequests = this.crawlRequests.map((item: Crawl) => item.toObject());
            }
            if (this.lastBasis != null) {
                data.lastBasis = this.lastBasis;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.crawlRequests.length)
                writer.writeRepeatedMessage(1, this.crawlRequests, (item: Crawl) => item.serialize(writer));
            if (this.lastBasis != 0)
                writer.writeInt64(2, this.lastBasis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchCrawlRequestsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchCrawlRequestsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.crawlRequests, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Crawl.deserialize(reader), Crawl));
                        break;
                    case 2:
                        message.lastBasis = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchCrawlRequestsResponse {
            return FetchCrawlRequestsResponse.deserialize(bytes);
        }
    }
    export class FetchCrawlPagesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            crawlId?: string;
            searchQuery?: string;
            lastBasis?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("crawlId" in data && data.crawlId != undefined) {
                    this.crawlId = data.crawlId;
                }
                if ("searchQuery" in data && data.searchQuery != undefined) {
                    this.searchQuery = data.searchQuery;
                }
                if ("lastBasis" in data && data.lastBasis != undefined) {
                    this.lastBasis = data.lastBasis;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get crawlId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set crawlId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get searchQuery() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set searchQuery(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get lastBasis() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set lastBasis(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            userId?: string;
            crawlId?: string;
            searchQuery?: string;
            lastBasis?: number;
        }): FetchCrawlPagesRequest {
            const message = new FetchCrawlPagesRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.crawlId != null) {
                message.crawlId = data.crawlId;
            }
            if (data.searchQuery != null) {
                message.searchQuery = data.searchQuery;
            }
            if (data.lastBasis != null) {
                message.lastBasis = data.lastBasis;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                crawlId?: string;
                searchQuery?: string;
                lastBasis?: number;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.crawlId != null) {
                data.crawlId = this.crawlId;
            }
            if (this.searchQuery != null) {
                data.searchQuery = this.searchQuery;
            }
            if (this.lastBasis != null) {
                data.lastBasis = this.lastBasis;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.crawlId.length)
                writer.writeString(2, this.crawlId);
            if (this.searchQuery.length)
                writer.writeString(3, this.searchQuery);
            if (this.lastBasis != 0)
                writer.writeInt64(4, this.lastBasis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchCrawlPagesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchCrawlPagesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.crawlId = reader.readString();
                        break;
                    case 3:
                        message.searchQuery = reader.readString();
                        break;
                    case 4:
                        message.lastBasis = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchCrawlPagesRequest {
            return FetchCrawlPagesRequest.deserialize(bytes);
        }
    }
    export class FetchCrawlPagesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            crawlPages?: CrawlPages[];
            lastBasis?: number;
            errorMessage?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("crawlPages" in data && data.crawlPages != undefined) {
                    this.crawlPages = data.crawlPages;
                }
                if ("lastBasis" in data && data.lastBasis != undefined) {
                    this.lastBasis = data.lastBasis;
                }
                if ("errorMessage" in data && data.errorMessage != undefined) {
                    this.errorMessage = data.errorMessage;
                }
            }
        }
        get crawlPages() {
            return pb_1.Message.getRepeatedWrapperField(this, CrawlPages, 1) as CrawlPages[];
        }
        set crawlPages(value: CrawlPages[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get lastBasis() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set lastBasis(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get errorMessage() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set errorMessage(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            crawlPages?: ReturnType<typeof CrawlPages.prototype.toObject>[];
            lastBasis?: number;
            errorMessage?: string;
        }): FetchCrawlPagesResponse {
            const message = new FetchCrawlPagesResponse({});
            if (data.crawlPages != null) {
                message.crawlPages = data.crawlPages.map(item => CrawlPages.fromObject(item));
            }
            if (data.lastBasis != null) {
                message.lastBasis = data.lastBasis;
            }
            if (data.errorMessage != null) {
                message.errorMessage = data.errorMessage;
            }
            return message;
        }
        toObject() {
            const data: {
                crawlPages?: ReturnType<typeof CrawlPages.prototype.toObject>[];
                lastBasis?: number;
                errorMessage?: string;
            } = {};
            if (this.crawlPages != null) {
                data.crawlPages = this.crawlPages.map((item: CrawlPages) => item.toObject());
            }
            if (this.lastBasis != null) {
                data.lastBasis = this.lastBasis;
            }
            if (this.errorMessage != null) {
                data.errorMessage = this.errorMessage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.crawlPages.length)
                writer.writeRepeatedMessage(1, this.crawlPages, (item: CrawlPages) => item.serialize(writer));
            if (this.lastBasis != 0)
                writer.writeInt64(2, this.lastBasis);
            if (this.errorMessage.length)
                writer.writeString(3, this.errorMessage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchCrawlPagesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchCrawlPagesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.crawlPages, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CrawlPages.deserialize(reader), CrawlPages));
                        break;
                    case 2:
                        message.lastBasis = reader.readInt64();
                        break;
                    case 3:
                        message.errorMessage = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchCrawlPagesResponse {
            return FetchCrawlPagesResponse.deserialize(bytes);
        }
    }
    export class UpdateCrawlPagesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            id?: string;
            active?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("active" in data && data.active != undefined) {
                    this.active = data.active;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get active() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set active(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            userId?: string;
            id?: string;
            active?: boolean;
        }): UpdateCrawlPagesRequest {
            const message = new UpdateCrawlPagesRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.active != null) {
                message.active = data.active;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                id?: string;
                active?: boolean;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.active != null) {
                data.active = this.active;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.id.length)
                writer.writeString(2, this.id);
            if (this.active != false)
                writer.writeBool(3, this.active);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateCrawlPagesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateCrawlPagesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    case 3:
                        message.active = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateCrawlPagesRequest {
            return UpdateCrawlPagesRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedCrawlServiceService {
        static definition = {
            Crawl: {
                path: "/tmq.CrawlService/Crawl",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CrawlRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CrawlRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.tmq.DefaultResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.tmq.DefaultResponse.deserialize(new Uint8Array(bytes))
            },
            fetchCrawlRequests: {
                path: "/tmq.CrawlService/fetchCrawlRequests",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FetchCrawlRequestsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FetchCrawlRequestsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FetchCrawlRequestsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FetchCrawlRequestsResponse.deserialize(new Uint8Array(bytes))
            },
            fetchCrawlPages: {
                path: "/tmq.CrawlService/fetchCrawlPages",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FetchCrawlPagesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FetchCrawlPagesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FetchCrawlPagesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FetchCrawlPagesResponse.deserialize(new Uint8Array(bytes))
            },
            updateCrawlPages: {
                path: "/tmq.CrawlService/updateCrawlPages",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateCrawlPagesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateCrawlPagesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.tmq.DefaultResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.tmq.DefaultResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Crawl(call: grpc_1.ServerUnaryCall<CrawlRequest, dependency_1.tmq.DefaultResponse>, callback: grpc_1.sendUnaryData<dependency_1.tmq.DefaultResponse>): void;
        abstract fetchCrawlRequests(call: grpc_1.ServerUnaryCall<FetchCrawlRequestsRequest, FetchCrawlRequestsResponse>, callback: grpc_1.sendUnaryData<FetchCrawlRequestsResponse>): void;
        abstract fetchCrawlPages(call: grpc_1.ServerUnaryCall<FetchCrawlPagesRequest, FetchCrawlPagesResponse>, callback: grpc_1.sendUnaryData<FetchCrawlPagesResponse>): void;
        abstract updateCrawlPages(call: grpc_1.ServerUnaryCall<UpdateCrawlPagesRequest, dependency_1.tmq.DefaultResponse>, callback: grpc_1.sendUnaryData<dependency_1.tmq.DefaultResponse>): void;
    }
    export class CrawlServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedCrawlServiceService.definition, "CrawlService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Crawl: GrpcUnaryServiceInterface<CrawlRequest, dependency_1.tmq.DefaultResponse> = (message: CrawlRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.tmq.DefaultResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.tmq.DefaultResponse>, callback?: grpc_1.requestCallback<dependency_1.tmq.DefaultResponse>): grpc_1.ClientUnaryCall => {
            return super.Crawl(message, metadata, options, callback);
        };
        fetchCrawlRequests: GrpcUnaryServiceInterface<FetchCrawlRequestsRequest, FetchCrawlRequestsResponse> = (message: FetchCrawlRequestsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FetchCrawlRequestsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FetchCrawlRequestsResponse>, callback?: grpc_1.requestCallback<FetchCrawlRequestsResponse>): grpc_1.ClientUnaryCall => {
            return super.fetchCrawlRequests(message, metadata, options, callback);
        };
        fetchCrawlPages: GrpcUnaryServiceInterface<FetchCrawlPagesRequest, FetchCrawlPagesResponse> = (message: FetchCrawlPagesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FetchCrawlPagesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FetchCrawlPagesResponse>, callback?: grpc_1.requestCallback<FetchCrawlPagesResponse>): grpc_1.ClientUnaryCall => {
            return super.fetchCrawlPages(message, metadata, options, callback);
        };
        updateCrawlPages: GrpcUnaryServiceInterface<UpdateCrawlPagesRequest, dependency_1.tmq.DefaultResponse> = (message: UpdateCrawlPagesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.tmq.DefaultResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.tmq.DefaultResponse>, callback?: grpc_1.requestCallback<dependency_1.tmq.DefaultResponse>): grpc_1.ClientUnaryCall => {
            return super.updateCrawlPages(message, metadata, options, callback);
        };
    }
}
