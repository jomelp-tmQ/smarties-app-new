/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: tmq/inbox.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/any";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class Consumer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            display_name?: string;
            primary_email?: string;
            primary_phone?: string;
            avatar_url?: string;
            tags_preview?: string[];
            is_vip?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("display_name" in data && data.display_name != undefined) {
                    this.display_name = data.display_name;
                }
                if ("primary_email" in data && data.primary_email != undefined) {
                    this.primary_email = data.primary_email;
                }
                if ("primary_phone" in data && data.primary_phone != undefined) {
                    this.primary_phone = data.primary_phone;
                }
                if ("avatar_url" in data && data.avatar_url != undefined) {
                    this.avatar_url = data.avatar_url;
                }
                if ("tags_preview" in data && data.tags_preview != undefined) {
                    this.tags_preview = data.tags_preview;
                }
                if ("is_vip" in data && data.is_vip != undefined) {
                    this.is_vip = data.is_vip;
                }
            }
        }
        get display_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set display_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get primary_email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set primary_email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get primary_phone() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set primary_phone(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get avatar_url() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set avatar_url(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get tags_preview() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set tags_preview(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get is_vip() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set is_vip(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            display_name?: string;
            primary_email?: string;
            primary_phone?: string;
            avatar_url?: string;
            tags_preview?: string[];
            is_vip?: boolean;
        }): Consumer {
            const message = new Consumer({});
            if (data.display_name != null) {
                message.display_name = data.display_name;
            }
            if (data.primary_email != null) {
                message.primary_email = data.primary_email;
            }
            if (data.primary_phone != null) {
                message.primary_phone = data.primary_phone;
            }
            if (data.avatar_url != null) {
                message.avatar_url = data.avatar_url;
            }
            if (data.tags_preview != null) {
                message.tags_preview = data.tags_preview;
            }
            if (data.is_vip != null) {
                message.is_vip = data.is_vip;
            }
            return message;
        }
        toObject() {
            const data: {
                display_name?: string;
                primary_email?: string;
                primary_phone?: string;
                avatar_url?: string;
                tags_preview?: string[];
                is_vip?: boolean;
            } = {};
            if (this.display_name != null) {
                data.display_name = this.display_name;
            }
            if (this.primary_email != null) {
                data.primary_email = this.primary_email;
            }
            if (this.primary_phone != null) {
                data.primary_phone = this.primary_phone;
            }
            if (this.avatar_url != null) {
                data.avatar_url = this.avatar_url;
            }
            if (this.tags_preview != null) {
                data.tags_preview = this.tags_preview;
            }
            if (this.is_vip != null) {
                data.is_vip = this.is_vip;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.display_name.length)
                writer.writeString(1, this.display_name);
            if (this.primary_email.length)
                writer.writeString(2, this.primary_email);
            if (this.primary_phone.length)
                writer.writeString(3, this.primary_phone);
            if (this.avatar_url.length)
                writer.writeString(4, this.avatar_url);
            if (this.tags_preview.length)
                writer.writeRepeatedString(5, this.tags_preview);
            if (this.is_vip != false)
                writer.writeBool(6, this.is_vip);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Consumer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Consumer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.display_name = reader.readString();
                        break;
                    case 2:
                        message.primary_email = reader.readString();
                        break;
                    case 3:
                        message.primary_phone = reader.readString();
                        break;
                    case 4:
                        message.avatar_url = reader.readString();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        message.is_vip = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Consumer {
            return Consumer.deserialize(bytes);
        }
    }
    export class Channel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            identifier?: string;
            type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("identifier" in data && data.identifier != undefined) {
                    this.identifier = data.identifier;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get identifier() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set identifier(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: string;
            identifier?: string;
            type?: string;
        }): Channel {
            const message = new Channel({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.identifier != null) {
                message.identifier = data.identifier;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                identifier?: string;
                type?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.identifier != null) {
                data.identifier = this.identifier;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.identifier.length)
                writer.writeString(2, this.identifier);
            if (this.type.length)
                writer.writeString(3, this.type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Channel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Channel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.identifier = reader.readString();
                        break;
                    case 3:
                        message.type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Channel {
            return Channel.deserialize(bytes);
        }
    }
    export class GetInboxRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            business_id?: string;
            page?: Pagination;
            query?: InboxQuery[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("business_id" in data && data.business_id != undefined) {
                    this.business_id = data.business_id;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
            }
        }
        get business_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set business_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getWrapperField(this, Pagination, 2) as Pagination;
        }
        set page(value: Pagination) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_page() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get query() {
            return pb_1.Message.getRepeatedWrapperField(this, InboxQuery, 3) as InboxQuery[];
        }
        set query(value: InboxQuery[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            business_id?: string;
            page?: ReturnType<typeof Pagination.prototype.toObject>;
            query?: ReturnType<typeof InboxQuery.prototype.toObject>[];
        }): GetInboxRequest {
            const message = new GetInboxRequest({});
            if (data.business_id != null) {
                message.business_id = data.business_id;
            }
            if (data.page != null) {
                message.page = Pagination.fromObject(data.page);
            }
            if (data.query != null) {
                message.query = data.query.map(item => InboxQuery.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                business_id?: string;
                page?: ReturnType<typeof Pagination.prototype.toObject>;
                query?: ReturnType<typeof InboxQuery.prototype.toObject>[];
            } = {};
            if (this.business_id != null) {
                data.business_id = this.business_id;
            }
            if (this.page != null) {
                data.page = this.page.toObject();
            }
            if (this.query != null) {
                data.query = this.query.map((item: InboxQuery) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.business_id.length)
                writer.writeString(1, this.business_id);
            if (this.has_page)
                writer.writeMessage(2, this.page, () => this.page.serialize(writer));
            if (this.query.length)
                writer.writeRepeatedMessage(3, this.query, (item: InboxQuery) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetInboxRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetInboxRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.business_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.page, () => message.page = Pagination.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.query, () => pb_1.Message.addToRepeatedWrapperField(message, 3, InboxQuery.deserialize(reader), InboxQuery));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetInboxRequest {
            return GetInboxRequest.deserialize(bytes);
        }
    }
    export class Inbox extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            business_id?: string;
            consumer_id?: string;
            channel?: Channel;
            status?: string;
            assignee_id?: string;
            locked_at?: number;
            unread_for_assignee?: number;
            latest_interaction_id?: string;
            latest_snippet?: string;
            latest_at?: number;
            latest_direction?: string;
            created_at?: number;
            consumer?: Consumer;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("business_id" in data && data.business_id != undefined) {
                    this.business_id = data.business_id;
                }
                if ("consumer_id" in data && data.consumer_id != undefined) {
                    this.consumer_id = data.consumer_id;
                }
                if ("channel" in data && data.channel != undefined) {
                    this.channel = data.channel;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("assignee_id" in data && data.assignee_id != undefined) {
                    this.assignee_id = data.assignee_id;
                }
                if ("locked_at" in data && data.locked_at != undefined) {
                    this.locked_at = data.locked_at;
                }
                if ("unread_for_assignee" in data && data.unread_for_assignee != undefined) {
                    this.unread_for_assignee = data.unread_for_assignee;
                }
                if ("latest_interaction_id" in data && data.latest_interaction_id != undefined) {
                    this.latest_interaction_id = data.latest_interaction_id;
                }
                if ("latest_snippet" in data && data.latest_snippet != undefined) {
                    this.latest_snippet = data.latest_snippet;
                }
                if ("latest_at" in data && data.latest_at != undefined) {
                    this.latest_at = data.latest_at;
                }
                if ("latest_direction" in data && data.latest_direction != undefined) {
                    this.latest_direction = data.latest_direction;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("consumer" in data && data.consumer != undefined) {
                    this.consumer = data.consumer;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get business_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set business_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get consumer_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set consumer_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get channel() {
            return pb_1.Message.getWrapperField(this, Channel, 4) as Channel;
        }
        set channel(value: Channel) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_channel() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get assignee_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set assignee_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get locked_at() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set locked_at(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get unread_for_assignee() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set unread_for_assignee(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get latest_interaction_id() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set latest_interaction_id(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get latest_snippet() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set latest_snippet(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get latest_at() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set latest_at(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get latest_direction() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set latest_direction(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get consumer() {
            return pb_1.Message.getWrapperField(this, Consumer, 14) as Consumer;
        }
        set consumer(value: Consumer) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_consumer() {
            return pb_1.Message.getField(this, 14) != null;
        }
        static fromObject(data: {
            id?: string;
            business_id?: string;
            consumer_id?: string;
            channel?: ReturnType<typeof Channel.prototype.toObject>;
            status?: string;
            assignee_id?: string;
            locked_at?: number;
            unread_for_assignee?: number;
            latest_interaction_id?: string;
            latest_snippet?: string;
            latest_at?: number;
            latest_direction?: string;
            created_at?: number;
            consumer?: ReturnType<typeof Consumer.prototype.toObject>;
        }): Inbox {
            const message = new Inbox({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.business_id != null) {
                message.business_id = data.business_id;
            }
            if (data.consumer_id != null) {
                message.consumer_id = data.consumer_id;
            }
            if (data.channel != null) {
                message.channel = Channel.fromObject(data.channel);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.assignee_id != null) {
                message.assignee_id = data.assignee_id;
            }
            if (data.locked_at != null) {
                message.locked_at = data.locked_at;
            }
            if (data.unread_for_assignee != null) {
                message.unread_for_assignee = data.unread_for_assignee;
            }
            if (data.latest_interaction_id != null) {
                message.latest_interaction_id = data.latest_interaction_id;
            }
            if (data.latest_snippet != null) {
                message.latest_snippet = data.latest_snippet;
            }
            if (data.latest_at != null) {
                message.latest_at = data.latest_at;
            }
            if (data.latest_direction != null) {
                message.latest_direction = data.latest_direction;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.consumer != null) {
                message.consumer = Consumer.fromObject(data.consumer);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                business_id?: string;
                consumer_id?: string;
                channel?: ReturnType<typeof Channel.prototype.toObject>;
                status?: string;
                assignee_id?: string;
                locked_at?: number;
                unread_for_assignee?: number;
                latest_interaction_id?: string;
                latest_snippet?: string;
                latest_at?: number;
                latest_direction?: string;
                created_at?: number;
                consumer?: ReturnType<typeof Consumer.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.business_id != null) {
                data.business_id = this.business_id;
            }
            if (this.consumer_id != null) {
                data.consumer_id = this.consumer_id;
            }
            if (this.channel != null) {
                data.channel = this.channel.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.assignee_id != null) {
                data.assignee_id = this.assignee_id;
            }
            if (this.locked_at != null) {
                data.locked_at = this.locked_at;
            }
            if (this.unread_for_assignee != null) {
                data.unread_for_assignee = this.unread_for_assignee;
            }
            if (this.latest_interaction_id != null) {
                data.latest_interaction_id = this.latest_interaction_id;
            }
            if (this.latest_snippet != null) {
                data.latest_snippet = this.latest_snippet;
            }
            if (this.latest_at != null) {
                data.latest_at = this.latest_at;
            }
            if (this.latest_direction != null) {
                data.latest_direction = this.latest_direction;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.consumer != null) {
                data.consumer = this.consumer.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.business_id.length)
                writer.writeString(2, this.business_id);
            if (this.consumer_id.length)
                writer.writeString(3, this.consumer_id);
            if (this.has_channel)
                writer.writeMessage(4, this.channel, () => this.channel.serialize(writer));
            if (this.status.length)
                writer.writeString(5, this.status);
            if (this.assignee_id.length)
                writer.writeString(6, this.assignee_id);
            if (this.locked_at != 0)
                writer.writeDouble(7, this.locked_at);
            if (this.unread_for_assignee != 0)
                writer.writeInt32(8, this.unread_for_assignee);
            if (this.latest_interaction_id.length)
                writer.writeString(9, this.latest_interaction_id);
            if (this.latest_snippet.length)
                writer.writeString(10, this.latest_snippet);
            if (this.latest_at != 0)
                writer.writeDouble(11, this.latest_at);
            if (this.latest_direction.length)
                writer.writeString(12, this.latest_direction);
            if (this.created_at != 0)
                writer.writeDouble(13, this.created_at);
            if (this.has_consumer)
                writer.writeMessage(14, this.consumer, () => this.consumer.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Inbox {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Inbox();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.business_id = reader.readString();
                        break;
                    case 3:
                        message.consumer_id = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.channel, () => message.channel = Channel.deserialize(reader));
                        break;
                    case 5:
                        message.status = reader.readString();
                        break;
                    case 6:
                        message.assignee_id = reader.readString();
                        break;
                    case 7:
                        message.locked_at = reader.readDouble();
                        break;
                    case 8:
                        message.unread_for_assignee = reader.readInt32();
                        break;
                    case 9:
                        message.latest_interaction_id = reader.readString();
                        break;
                    case 10:
                        message.latest_snippet = reader.readString();
                        break;
                    case 11:
                        message.latest_at = reader.readDouble();
                        break;
                    case 12:
                        message.latest_direction = reader.readString();
                        break;
                    case 13:
                        message.created_at = reader.readDouble();
                        break;
                    case 14:
                        reader.readMessage(message.consumer, () => message.consumer = Consumer.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Inbox {
            return Inbox.deserialize(bytes);
        }
    }
    export class GetInboxResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            inboxes?: Inbox[];
            total_count?: number;
            success?: boolean;
            error_message?: string;
            last_basis?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("inboxes" in data && data.inboxes != undefined) {
                    this.inboxes = data.inboxes;
                }
                if ("total_count" in data && data.total_count != undefined) {
                    this.total_count = data.total_count;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
                if ("last_basis" in data && data.last_basis != undefined) {
                    this.last_basis = data.last_basis;
                }
            }
        }
        get inboxes() {
            return pb_1.Message.getRepeatedWrapperField(this, Inbox, 1) as Inbox[];
        }
        set inboxes(value: Inbox[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get last_basis() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set last_basis(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            inboxes?: ReturnType<typeof Inbox.prototype.toObject>[];
            total_count?: number;
            success?: boolean;
            error_message?: string;
            last_basis?: number;
        }): GetInboxResponse {
            const message = new GetInboxResponse({});
            if (data.inboxes != null) {
                message.inboxes = data.inboxes.map(item => Inbox.fromObject(item));
            }
            if (data.total_count != null) {
                message.total_count = data.total_count;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            if (data.last_basis != null) {
                message.last_basis = data.last_basis;
            }
            return message;
        }
        toObject() {
            const data: {
                inboxes?: ReturnType<typeof Inbox.prototype.toObject>[];
                total_count?: number;
                success?: boolean;
                error_message?: string;
                last_basis?: number;
            } = {};
            if (this.inboxes != null) {
                data.inboxes = this.inboxes.map((item: Inbox) => item.toObject());
            }
            if (this.total_count != null) {
                data.total_count = this.total_count;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            if (this.last_basis != null) {
                data.last_basis = this.last_basis;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.inboxes.length)
                writer.writeRepeatedMessage(1, this.inboxes, (item: Inbox) => item.serialize(writer));
            if (this.total_count != 0)
                writer.writeInt32(2, this.total_count);
            if (this.success != false)
                writer.writeBool(3, this.success);
            if (this.error_message.length)
                writer.writeString(4, this.error_message);
            if (this.last_basis != 0)
                writer.writeDouble(5, this.last_basis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetInboxResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetInboxResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.inboxes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Inbox.deserialize(reader), Inbox));
                        break;
                    case 2:
                        message.total_count = reader.readInt32();
                        break;
                    case 3:
                        message.success = reader.readBool();
                        break;
                    case 4:
                        message.error_message = reader.readString();
                        break;
                    case 5:
                        message.last_basis = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetInboxResponse {
            return GetInboxResponse.deserialize(bytes);
        }
    }
    export class MergedInbox extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consumer_id?: string;
            inbox_ids?: string[];
            representative_inbox_id?: string;
            latest_interaction_id?: string;
            latest_snippet?: string;
            latest_at?: number;
            latest_direction?: string;
            total_unread_for_assignee?: number;
            consumer?: Consumer;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consumer_id" in data && data.consumer_id != undefined) {
                    this.consumer_id = data.consumer_id;
                }
                if ("inbox_ids" in data && data.inbox_ids != undefined) {
                    this.inbox_ids = data.inbox_ids;
                }
                if ("representative_inbox_id" in data && data.representative_inbox_id != undefined) {
                    this.representative_inbox_id = data.representative_inbox_id;
                }
                if ("latest_interaction_id" in data && data.latest_interaction_id != undefined) {
                    this.latest_interaction_id = data.latest_interaction_id;
                }
                if ("latest_snippet" in data && data.latest_snippet != undefined) {
                    this.latest_snippet = data.latest_snippet;
                }
                if ("latest_at" in data && data.latest_at != undefined) {
                    this.latest_at = data.latest_at;
                }
                if ("latest_direction" in data && data.latest_direction != undefined) {
                    this.latest_direction = data.latest_direction;
                }
                if ("total_unread_for_assignee" in data && data.total_unread_for_assignee != undefined) {
                    this.total_unread_for_assignee = data.total_unread_for_assignee;
                }
                if ("consumer" in data && data.consumer != undefined) {
                    this.consumer = data.consumer;
                }
            }
        }
        get consumer_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set consumer_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get inbox_ids() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set inbox_ids(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get representative_inbox_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set representative_inbox_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get latest_interaction_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set latest_interaction_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get latest_snippet() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set latest_snippet(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get latest_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set latest_at(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get latest_direction() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set latest_direction(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get total_unread_for_assignee() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set total_unread_for_assignee(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get consumer() {
            return pb_1.Message.getWrapperField(this, Consumer, 9) as Consumer;
        }
        set consumer(value: Consumer) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_consumer() {
            return pb_1.Message.getField(this, 9) != null;
        }
        static fromObject(data: {
            consumer_id?: string;
            inbox_ids?: string[];
            representative_inbox_id?: string;
            latest_interaction_id?: string;
            latest_snippet?: string;
            latest_at?: number;
            latest_direction?: string;
            total_unread_for_assignee?: number;
            consumer?: ReturnType<typeof Consumer.prototype.toObject>;
        }): MergedInbox {
            const message = new MergedInbox({});
            if (data.consumer_id != null) {
                message.consumer_id = data.consumer_id;
            }
            if (data.inbox_ids != null) {
                message.inbox_ids = data.inbox_ids;
            }
            if (data.representative_inbox_id != null) {
                message.representative_inbox_id = data.representative_inbox_id;
            }
            if (data.latest_interaction_id != null) {
                message.latest_interaction_id = data.latest_interaction_id;
            }
            if (data.latest_snippet != null) {
                message.latest_snippet = data.latest_snippet;
            }
            if (data.latest_at != null) {
                message.latest_at = data.latest_at;
            }
            if (data.latest_direction != null) {
                message.latest_direction = data.latest_direction;
            }
            if (data.total_unread_for_assignee != null) {
                message.total_unread_for_assignee = data.total_unread_for_assignee;
            }
            if (data.consumer != null) {
                message.consumer = Consumer.fromObject(data.consumer);
            }
            return message;
        }
        toObject() {
            const data: {
                consumer_id?: string;
                inbox_ids?: string[];
                representative_inbox_id?: string;
                latest_interaction_id?: string;
                latest_snippet?: string;
                latest_at?: number;
                latest_direction?: string;
                total_unread_for_assignee?: number;
                consumer?: ReturnType<typeof Consumer.prototype.toObject>;
            } = {};
            if (this.consumer_id != null) {
                data.consumer_id = this.consumer_id;
            }
            if (this.inbox_ids != null) {
                data.inbox_ids = this.inbox_ids;
            }
            if (this.representative_inbox_id != null) {
                data.representative_inbox_id = this.representative_inbox_id;
            }
            if (this.latest_interaction_id != null) {
                data.latest_interaction_id = this.latest_interaction_id;
            }
            if (this.latest_snippet != null) {
                data.latest_snippet = this.latest_snippet;
            }
            if (this.latest_at != null) {
                data.latest_at = this.latest_at;
            }
            if (this.latest_direction != null) {
                data.latest_direction = this.latest_direction;
            }
            if (this.total_unread_for_assignee != null) {
                data.total_unread_for_assignee = this.total_unread_for_assignee;
            }
            if (this.consumer != null) {
                data.consumer = this.consumer.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consumer_id.length)
                writer.writeString(1, this.consumer_id);
            if (this.inbox_ids.length)
                writer.writeRepeatedString(2, this.inbox_ids);
            if (this.representative_inbox_id.length)
                writer.writeString(3, this.representative_inbox_id);
            if (this.latest_interaction_id.length)
                writer.writeString(4, this.latest_interaction_id);
            if (this.latest_snippet.length)
                writer.writeString(5, this.latest_snippet);
            if (this.latest_at != 0)
                writer.writeDouble(6, this.latest_at);
            if (this.latest_direction.length)
                writer.writeString(7, this.latest_direction);
            if (this.total_unread_for_assignee != 0)
                writer.writeInt32(8, this.total_unread_for_assignee);
            if (this.has_consumer)
                writer.writeMessage(9, this.consumer, () => this.consumer.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MergedInbox {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MergedInbox();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.consumer_id = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.representative_inbox_id = reader.readString();
                        break;
                    case 4:
                        message.latest_interaction_id = reader.readString();
                        break;
                    case 5:
                        message.latest_snippet = reader.readString();
                        break;
                    case 6:
                        message.latest_at = reader.readDouble();
                        break;
                    case 7:
                        message.latest_direction = reader.readString();
                        break;
                    case 8:
                        message.total_unread_for_assignee = reader.readInt32();
                        break;
                    case 9:
                        reader.readMessage(message.consumer, () => message.consumer = Consumer.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MergedInbox {
            return MergedInbox.deserialize(bytes);
        }
    }
    export class InboxQuery extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
            value?: dependency_1.google.protobuf.Any;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 2) as dependency_1.google.protobuf.Any;
        }
        set value(value: dependency_1.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            key?: string;
            value?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
        }): InboxQuery {
            const message = new InboxQuery({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = dependency_1.google.protobuf.Any.fromObject(data.value);
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                value?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (this.has_value)
                writer.writeMessage(2, this.value, () => this.value.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InboxQuery {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InboxQuery();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.value, () => message.value = dependency_1.google.protobuf.Any.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InboxQuery {
            return InboxQuery.deserialize(bytes);
        }
    }
    export class Pagination extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            last_basis?: number;
            limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("last_basis" in data && data.last_basis != undefined) {
                    this.last_basis = data.last_basis;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
            }
        }
        get last_basis() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set last_basis(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            last_basis?: number;
            limit?: number;
        }): Pagination {
            const message = new Pagination({});
            if (data.last_basis != null) {
                message.last_basis = data.last_basis;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            return message;
        }
        toObject() {
            const data: {
                last_basis?: number;
                limit?: number;
            } = {};
            if (this.last_basis != null) {
                data.last_basis = this.last_basis;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.last_basis != 0)
                writer.writeDouble(1, this.last_basis);
            if (this.limit != 0)
                writer.writeInt32(2, this.limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Pagination {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Pagination();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.last_basis = reader.readDouble();
                        break;
                    case 2:
                        message.limit = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Pagination {
            return Pagination.deserialize(bytes);
        }
    }
    export class GetMergedInboxRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            business_id?: string;
            query?: InboxQuery;
            page?: Pagination;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("business_id" in data && data.business_id != undefined) {
                    this.business_id = data.business_id;
                }
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
            }
        }
        get business_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set business_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get query() {
            return pb_1.Message.getWrapperField(this, InboxQuery, 2) as InboxQuery;
        }
        set query(value: InboxQuery) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_query() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get page() {
            return pb_1.Message.getWrapperField(this, Pagination, 3) as Pagination;
        }
        set page(value: Pagination) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_page() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            business_id?: string;
            query?: ReturnType<typeof InboxQuery.prototype.toObject>;
            page?: ReturnType<typeof Pagination.prototype.toObject>;
        }): GetMergedInboxRequest {
            const message = new GetMergedInboxRequest({});
            if (data.business_id != null) {
                message.business_id = data.business_id;
            }
            if (data.query != null) {
                message.query = InboxQuery.fromObject(data.query);
            }
            if (data.page != null) {
                message.page = Pagination.fromObject(data.page);
            }
            return message;
        }
        toObject() {
            const data: {
                business_id?: string;
                query?: ReturnType<typeof InboxQuery.prototype.toObject>;
                page?: ReturnType<typeof Pagination.prototype.toObject>;
            } = {};
            if (this.business_id != null) {
                data.business_id = this.business_id;
            }
            if (this.query != null) {
                data.query = this.query.toObject();
            }
            if (this.page != null) {
                data.page = this.page.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.business_id.length)
                writer.writeString(1, this.business_id);
            if (this.has_query)
                writer.writeMessage(2, this.query, () => this.query.serialize(writer));
            if (this.has_page)
                writer.writeMessage(3, this.page, () => this.page.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMergedInboxRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMergedInboxRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.business_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.query, () => message.query = InboxQuery.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.page, () => message.page = Pagination.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMergedInboxRequest {
            return GetMergedInboxRequest.deserialize(bytes);
        }
    }
    export class GetMergedInboxResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            inboxes?: MergedInbox[];
            total_count?: number;
            success?: boolean;
            error_message?: string;
            last_basis?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("inboxes" in data && data.inboxes != undefined) {
                    this.inboxes = data.inboxes;
                }
                if ("total_count" in data && data.total_count != undefined) {
                    this.total_count = data.total_count;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
                if ("last_basis" in data && data.last_basis != undefined) {
                    this.last_basis = data.last_basis;
                }
            }
        }
        get inboxes() {
            return pb_1.Message.getRepeatedWrapperField(this, MergedInbox, 1) as MergedInbox[];
        }
        set inboxes(value: MergedInbox[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get last_basis() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set last_basis(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            inboxes?: ReturnType<typeof MergedInbox.prototype.toObject>[];
            total_count?: number;
            success?: boolean;
            error_message?: string;
            last_basis?: number;
        }): GetMergedInboxResponse {
            const message = new GetMergedInboxResponse({});
            if (data.inboxes != null) {
                message.inboxes = data.inboxes.map(item => MergedInbox.fromObject(item));
            }
            if (data.total_count != null) {
                message.total_count = data.total_count;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            if (data.last_basis != null) {
                message.last_basis = data.last_basis;
            }
            return message;
        }
        toObject() {
            const data: {
                inboxes?: ReturnType<typeof MergedInbox.prototype.toObject>[];
                total_count?: number;
                success?: boolean;
                error_message?: string;
                last_basis?: number;
            } = {};
            if (this.inboxes != null) {
                data.inboxes = this.inboxes.map((item: MergedInbox) => item.toObject());
            }
            if (this.total_count != null) {
                data.total_count = this.total_count;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            if (this.last_basis != null) {
                data.last_basis = this.last_basis;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.inboxes.length)
                writer.writeRepeatedMessage(1, this.inboxes, (item: MergedInbox) => item.serialize(writer));
            if (this.total_count != 0)
                writer.writeInt32(2, this.total_count);
            if (this.success != false)
                writer.writeBool(3, this.success);
            if (this.error_message.length)
                writer.writeString(4, this.error_message);
            if (this.last_basis != 0)
                writer.writeDouble(5, this.last_basis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMergedInboxResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMergedInboxResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.inboxes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, MergedInbox.deserialize(reader), MergedInbox));
                        break;
                    case 2:
                        message.total_count = reader.readInt32();
                        break;
                    case 3:
                        message.success = reader.readBool();
                        break;
                    case 4:
                        message.error_message = reader.readString();
                        break;
                    case 5:
                        message.last_basis = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMergedInboxResponse {
            return GetMergedInboxResponse.deserialize(bytes);
        }
    }
    export class InboxIds extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            inbox_ids?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("inbox_ids" in data && data.inbox_ids != undefined) {
                    this.inbox_ids = data.inbox_ids;
                }
            }
        }
        get inbox_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set inbox_ids(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            inbox_ids?: string;
        }): InboxIds {
            const message = new InboxIds({});
            if (data.inbox_ids != null) {
                message.inbox_ids = data.inbox_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                inbox_ids?: string;
            } = {};
            if (this.inbox_ids != null) {
                data.inbox_ids = this.inbox_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.inbox_ids.length)
                writer.writeString(1, this.inbox_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InboxIds {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InboxIds();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.inbox_ids = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InboxIds {
            return InboxIds.deserialize(bytes);
        }
    }
    export class ReadCountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            inbox_ids?: InboxIds[];
            business_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("inbox_ids" in data && data.inbox_ids != undefined) {
                    this.inbox_ids = data.inbox_ids;
                }
                if ("business_id" in data && data.business_id != undefined) {
                    this.business_id = data.business_id;
                }
            }
        }
        get inbox_ids() {
            return pb_1.Message.getRepeatedWrapperField(this, InboxIds, 1) as InboxIds[];
        }
        set inbox_ids(value: InboxIds[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get business_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set business_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            inbox_ids?: ReturnType<typeof InboxIds.prototype.toObject>[];
            business_id?: string;
        }): ReadCountRequest {
            const message = new ReadCountRequest({});
            if (data.inbox_ids != null) {
                message.inbox_ids = data.inbox_ids.map(item => InboxIds.fromObject(item));
            }
            if (data.business_id != null) {
                message.business_id = data.business_id;
            }
            return message;
        }
        toObject() {
            const data: {
                inbox_ids?: ReturnType<typeof InboxIds.prototype.toObject>[];
                business_id?: string;
            } = {};
            if (this.inbox_ids != null) {
                data.inbox_ids = this.inbox_ids.map((item: InboxIds) => item.toObject());
            }
            if (this.business_id != null) {
                data.business_id = this.business_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.inbox_ids.length)
                writer.writeRepeatedMessage(1, this.inbox_ids, (item: InboxIds) => item.serialize(writer));
            if (this.business_id.length)
                writer.writeString(2, this.business_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadCountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadCountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.inbox_ids, () => pb_1.Message.addToRepeatedWrapperField(message, 1, InboxIds.deserialize(reader), InboxIds));
                        break;
                    case 2:
                        message.business_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadCountRequest {
            return ReadCountRequest.deserialize(bytes);
        }
    }
    export class ReadCountResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            message?: string;
            success?: boolean;
        }): ReadCountResponse {
            const message = new ReadCountResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
                success?: boolean;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadCountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadCountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadCountResponse {
            return ReadCountResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedInboxServiceService {
        static definition = {
            GetInbox: {
                path: "/tmq.InboxService/GetInbox",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetInboxRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetInboxRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetInboxResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetInboxResponse.deserialize(new Uint8Array(bytes))
            },
            GetMergedInbox: {
                path: "/tmq.InboxService/GetMergedInbox",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetMergedInboxRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetMergedInboxRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetMergedInboxResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetMergedInboxResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateReadCount: {
                path: "/tmq.InboxService/UpdateReadCount",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReadCountRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReadCountRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReadCountResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReadCountResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetInbox(call: grpc_1.ServerUnaryCall<GetInboxRequest, GetInboxResponse>, callback: grpc_1.sendUnaryData<GetInboxResponse>): void;
        abstract GetMergedInbox(call: grpc_1.ServerUnaryCall<GetMergedInboxRequest, GetMergedInboxResponse>, callback: grpc_1.sendUnaryData<GetMergedInboxResponse>): void;
        abstract UpdateReadCount(call: grpc_1.ServerUnaryCall<ReadCountRequest, ReadCountResponse>, callback: grpc_1.sendUnaryData<ReadCountResponse>): void;
    }
    export class InboxServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedInboxServiceService.definition, "InboxService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetInbox: GrpcUnaryServiceInterface<GetInboxRequest, GetInboxResponse> = (message: GetInboxRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetInboxResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetInboxResponse>, callback?: grpc_1.requestCallback<GetInboxResponse>): grpc_1.ClientUnaryCall => {
            return super.GetInbox(message, metadata, options, callback);
        };
        GetMergedInbox: GrpcUnaryServiceInterface<GetMergedInboxRequest, GetMergedInboxResponse> = (message: GetMergedInboxRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetMergedInboxResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetMergedInboxResponse>, callback?: grpc_1.requestCallback<GetMergedInboxResponse>): grpc_1.ClientUnaryCall => {
            return super.GetMergedInbox(message, metadata, options, callback);
        };
        UpdateReadCount: GrpcUnaryServiceInterface<ReadCountRequest, ReadCountResponse> = (message: ReadCountRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ReadCountResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ReadCountResponse>, callback?: grpc_1.requestCallback<ReadCountResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateReadCount(message, metadata, options, callback);
        };
    }
}
