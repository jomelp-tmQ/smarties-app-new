/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: tmq/knowledgeBase.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./inbox";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class createKnowledgeBaseRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            collectionName?: string;
            collectionId?: string;
            createAt?: string;
            updateAt?: string;
            isDeleted?: string;
            files?: string[];
            businessId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("collectionName" in data && data.collectionName != undefined) {
                    this.collectionName = data.collectionName;
                }
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("createAt" in data && data.createAt != undefined) {
                    this.createAt = data.createAt;
                }
                if ("updateAt" in data && data.updateAt != undefined) {
                    this.updateAt = data.updateAt;
                }
                if ("isDeleted" in data && data.isDeleted != undefined) {
                    this.isDeleted = data.isDeleted;
                }
                if ("files" in data && data.files != undefined) {
                    this.files = data.files;
                }
                if ("businessId" in data && data.businessId != undefined) {
                    this.businessId = data.businessId;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get collectionName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set collectionName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set collectionId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get createAt() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set createAt(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get updateAt() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set updateAt(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get isDeleted() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set isDeleted(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get files() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set files(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get businessId() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set businessId(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            userId?: string;
            collectionName?: string;
            collectionId?: string;
            createAt?: string;
            updateAt?: string;
            isDeleted?: string;
            files?: string[];
            businessId?: string;
        }): createKnowledgeBaseRequest {
            const message = new createKnowledgeBaseRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.collectionName != null) {
                message.collectionName = data.collectionName;
            }
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.createAt != null) {
                message.createAt = data.createAt;
            }
            if (data.updateAt != null) {
                message.updateAt = data.updateAt;
            }
            if (data.isDeleted != null) {
                message.isDeleted = data.isDeleted;
            }
            if (data.files != null) {
                message.files = data.files;
            }
            if (data.businessId != null) {
                message.businessId = data.businessId;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                collectionName?: string;
                collectionId?: string;
                createAt?: string;
                updateAt?: string;
                isDeleted?: string;
                files?: string[];
                businessId?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.collectionName != null) {
                data.collectionName = this.collectionName;
            }
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.createAt != null) {
                data.createAt = this.createAt;
            }
            if (this.updateAt != null) {
                data.updateAt = this.updateAt;
            }
            if (this.isDeleted != null) {
                data.isDeleted = this.isDeleted;
            }
            if (this.files != null) {
                data.files = this.files;
            }
            if (this.businessId != null) {
                data.businessId = this.businessId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.collectionName.length)
                writer.writeString(2, this.collectionName);
            if (this.collectionId.length)
                writer.writeString(3, this.collectionId);
            if (this.createAt.length)
                writer.writeString(4, this.createAt);
            if (this.updateAt.length)
                writer.writeString(5, this.updateAt);
            if (this.isDeleted.length)
                writer.writeString(6, this.isDeleted);
            if (this.files.length)
                writer.writeRepeatedString(7, this.files);
            if (this.businessId.length)
                writer.writeString(8, this.businessId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): createKnowledgeBaseRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new createKnowledgeBaseRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.collectionName = reader.readString();
                        break;
                    case 3:
                        message.collectionId = reader.readString();
                        break;
                    case 4:
                        message.createAt = reader.readString();
                        break;
                    case 5:
                        message.updateAt = reader.readString();
                        break;
                    case 6:
                        message.isDeleted = reader.readString();
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    case 8:
                        message.businessId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): createKnowledgeBaseRequest {
            return createKnowledgeBaseRequest.deserialize(bytes);
        }
    }
    export class KnowledgeBaseResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: string;
            message?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set success(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set message(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: string;
            message?: boolean;
        }): KnowledgeBaseResponse {
            const message = new KnowledgeBaseResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: string;
                message?: boolean;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success.length)
                writer.writeString(1, this.success);
            if (this.message != false)
                writer.writeBool(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KnowledgeBaseResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KnowledgeBaseResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readString();
                        break;
                    case 2:
                        message.message = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KnowledgeBaseResponse {
            return KnowledgeBaseResponse.deserialize(bytes);
        }
    }
    export class KnowledgeBaseUploadRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            collectionId?: string;
            fileIdList?: string[];
            urlList?: string[];
            businessId?: string;
            type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("fileIdList" in data && data.fileIdList != undefined) {
                    this.fileIdList = data.fileIdList;
                }
                if ("urlList" in data && data.urlList != undefined) {
                    this.urlList = data.urlList;
                }
                if ("businessId" in data && data.businessId != undefined) {
                    this.businessId = data.businessId;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set collectionId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get fileIdList() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set fileIdList(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get urlList() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set urlList(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get businessId() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set businessId(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            userId?: string;
            collectionId?: string;
            fileIdList?: string[];
            urlList?: string[];
            businessId?: string;
            type?: string;
        }): KnowledgeBaseUploadRequest {
            const message = new KnowledgeBaseUploadRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.fileIdList != null) {
                message.fileIdList = data.fileIdList;
            }
            if (data.urlList != null) {
                message.urlList = data.urlList;
            }
            if (data.businessId != null) {
                message.businessId = data.businessId;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                collectionId?: string;
                fileIdList?: string[];
                urlList?: string[];
                businessId?: string;
                type?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.fileIdList != null) {
                data.fileIdList = this.fileIdList;
            }
            if (this.urlList != null) {
                data.urlList = this.urlList;
            }
            if (this.businessId != null) {
                data.businessId = this.businessId;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.collectionId.length)
                writer.writeString(2, this.collectionId);
            if (this.fileIdList.length)
                writer.writeRepeatedString(3, this.fileIdList);
            if (this.urlList.length)
                writer.writeRepeatedString(4, this.urlList);
            if (this.businessId.length)
                writer.writeString(5, this.businessId);
            if (this.type.length)
                writer.writeString(6, this.type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KnowledgeBaseUploadRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KnowledgeBaseUploadRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.collectionId = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        message.businessId = reader.readString();
                        break;
                    case 6:
                        message.type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KnowledgeBaseUploadRequest {
            return KnowledgeBaseUploadRequest.deserialize(bytes);
        }
    }
    export class KnowledgeBaseUploadResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: string;
            message?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set success(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set message(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: string;
            message?: boolean;
        }): KnowledgeBaseUploadResponse {
            const message = new KnowledgeBaseUploadResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: string;
                message?: boolean;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success.length)
                writer.writeString(1, this.success);
            if (this.message != false)
                writer.writeBool(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KnowledgeBaseUploadResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KnowledgeBaseUploadResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readString();
                        break;
                    case 2:
                        message.message = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KnowledgeBaseUploadResponse {
            return KnowledgeBaseUploadResponse.deserialize(bytes);
        }
    }
    export class FetchKnowledgeBaseRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            searchQuery?: string;
            lastBasis?: number;
            page?: dependency_1.tmq.Pagination;
            limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("searchQuery" in data && data.searchQuery != undefined) {
                    this.searchQuery = data.searchQuery;
                }
                if ("lastBasis" in data && data.lastBasis != undefined) {
                    this.lastBasis = data.lastBasis;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get searchQuery() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set searchQuery(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get lastBasis() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set lastBasis(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get page() {
            return pb_1.Message.getWrapperField(this, dependency_1.tmq.Pagination, 4) as dependency_1.tmq.Pagination;
        }
        set page(value: dependency_1.tmq.Pagination) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_page() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            userId?: string;
            searchQuery?: string;
            lastBasis?: number;
            page?: ReturnType<typeof dependency_1.tmq.Pagination.prototype.toObject>;
            limit?: number;
        }): FetchKnowledgeBaseRequest {
            const message = new FetchKnowledgeBaseRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.searchQuery != null) {
                message.searchQuery = data.searchQuery;
            }
            if (data.lastBasis != null) {
                message.lastBasis = data.lastBasis;
            }
            if (data.page != null) {
                message.page = dependency_1.tmq.Pagination.fromObject(data.page);
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                searchQuery?: string;
                lastBasis?: number;
                page?: ReturnType<typeof dependency_1.tmq.Pagination.prototype.toObject>;
                limit?: number;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.searchQuery != null) {
                data.searchQuery = this.searchQuery;
            }
            if (this.lastBasis != null) {
                data.lastBasis = this.lastBasis;
            }
            if (this.page != null) {
                data.page = this.page.toObject();
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.searchQuery.length)
                writer.writeString(2, this.searchQuery);
            if (this.lastBasis != 0)
                writer.writeInt64(3, this.lastBasis);
            if (this.has_page)
                writer.writeMessage(4, this.page, () => this.page.serialize(writer));
            if (this.limit != 0)
                writer.writeInt32(5, this.limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchKnowledgeBaseRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchKnowledgeBaseRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.searchQuery = reader.readString();
                        break;
                    case 3:
                        message.lastBasis = reader.readInt64();
                        break;
                    case 4:
                        reader.readMessage(message.page, () => message.page = dependency_1.tmq.Pagination.deserialize(reader));
                        break;
                    case 5:
                        message.limit = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchKnowledgeBaseRequest {
            return FetchKnowledgeBaseRequest.deserialize(bytes);
        }
    }
    export class File extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            url?: string;
        }): File {
            const message = new File({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                url?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.url.length)
                writer.writeString(3, this.url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): File {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new File();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): File {
            return File.deserialize(bytes);
        }
    }
    export class Url extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            url?: string;
        }): Url {
            const message = new Url({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                url?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.url.length)
                writer.writeString(2, this.url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Url {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Url();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Url {
            return Url.deserialize(bytes);
        }
    }
    export class AllKnowledgeBase extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collectionId?: string;
            userId?: string;
            collectionName?: string;
            id?: string;
            createdAt?: number;
            updatedAt?: number;
            files?: File[];
            urls?: Url[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7, 8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("collectionName" in data && data.collectionName != undefined) {
                    this.collectionName = data.collectionName;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
                if ("files" in data && data.files != undefined) {
                    this.files = data.files;
                }
                if ("urls" in data && data.urls != undefined) {
                    this.urls = data.urls;
                }
            }
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collectionId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get collectionName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set collectionName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set createdAt(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get updatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set updatedAt(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get files() {
            return pb_1.Message.getRepeatedWrapperField(this, File, 7) as File[];
        }
        set files(value: File[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get urls() {
            return pb_1.Message.getRepeatedWrapperField(this, Url, 8) as Url[];
        }
        set urls(value: Url[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        static fromObject(data: {
            collectionId?: string;
            userId?: string;
            collectionName?: string;
            id?: string;
            createdAt?: number;
            updatedAt?: number;
            files?: ReturnType<typeof File.prototype.toObject>[];
            urls?: ReturnType<typeof Url.prototype.toObject>[];
        }): AllKnowledgeBase {
            const message = new AllKnowledgeBase({});
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.collectionName != null) {
                message.collectionName = data.collectionName;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.updatedAt != null) {
                message.updatedAt = data.updatedAt;
            }
            if (data.files != null) {
                message.files = data.files.map(item => File.fromObject(item));
            }
            if (data.urls != null) {
                message.urls = data.urls.map(item => Url.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                collectionId?: string;
                userId?: string;
                collectionName?: string;
                id?: string;
                createdAt?: number;
                updatedAt?: number;
                files?: ReturnType<typeof File.prototype.toObject>[];
                urls?: ReturnType<typeof Url.prototype.toObject>[];
            } = {};
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.collectionName != null) {
                data.collectionName = this.collectionName;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt;
            }
            if (this.files != null) {
                data.files = this.files.map((item: File) => item.toObject());
            }
            if (this.urls != null) {
                data.urls = this.urls.map((item: Url) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collectionId.length)
                writer.writeString(1, this.collectionId);
            if (this.userId.length)
                writer.writeString(2, this.userId);
            if (this.collectionName.length)
                writer.writeString(3, this.collectionName);
            if (this.id.length)
                writer.writeString(4, this.id);
            if (this.createdAt != 0)
                writer.writeUint64(5, this.createdAt);
            if (this.updatedAt != 0)
                writer.writeUint64(6, this.updatedAt);
            if (this.files.length)
                writer.writeRepeatedMessage(7, this.files, (item: File) => item.serialize(writer));
            if (this.urls.length)
                writer.writeRepeatedMessage(8, this.urls, (item: Url) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AllKnowledgeBase {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AllKnowledgeBase();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collectionId = reader.readString();
                        break;
                    case 2:
                        message.userId = reader.readString();
                        break;
                    case 3:
                        message.collectionName = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readString();
                        break;
                    case 5:
                        message.createdAt = reader.readUint64();
                        break;
                    case 6:
                        message.updatedAt = reader.readUint64();
                        break;
                    case 7:
                        reader.readMessage(message.files, () => pb_1.Message.addToRepeatedWrapperField(message, 7, File.deserialize(reader), File));
                        break;
                    case 8:
                        reader.readMessage(message.urls, () => pb_1.Message.addToRepeatedWrapperField(message, 8, Url.deserialize(reader), Url));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AllKnowledgeBase {
            return AllKnowledgeBase.deserialize(bytes);
        }
    }
    export class FetchKnowledgeBaseResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            knowledgeBases?: AllKnowledgeBase[];
            lastBasis?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("knowledgeBases" in data && data.knowledgeBases != undefined) {
                    this.knowledgeBases = data.knowledgeBases;
                }
                if ("lastBasis" in data && data.lastBasis != undefined) {
                    this.lastBasis = data.lastBasis;
                }
            }
        }
        get knowledgeBases() {
            return pb_1.Message.getRepeatedWrapperField(this, AllKnowledgeBase, 1) as AllKnowledgeBase[];
        }
        set knowledgeBases(value: AllKnowledgeBase[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get lastBasis() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set lastBasis(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            knowledgeBases?: ReturnType<typeof AllKnowledgeBase.prototype.toObject>[];
            lastBasis?: number;
        }): FetchKnowledgeBaseResponse {
            const message = new FetchKnowledgeBaseResponse({});
            if (data.knowledgeBases != null) {
                message.knowledgeBases = data.knowledgeBases.map(item => AllKnowledgeBase.fromObject(item));
            }
            if (data.lastBasis != null) {
                message.lastBasis = data.lastBasis;
            }
            return message;
        }
        toObject() {
            const data: {
                knowledgeBases?: ReturnType<typeof AllKnowledgeBase.prototype.toObject>[];
                lastBasis?: number;
            } = {};
            if (this.knowledgeBases != null) {
                data.knowledgeBases = this.knowledgeBases.map((item: AllKnowledgeBase) => item.toObject());
            }
            if (this.lastBasis != null) {
                data.lastBasis = this.lastBasis;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.knowledgeBases.length)
                writer.writeRepeatedMessage(1, this.knowledgeBases, (item: AllKnowledgeBase) => item.serialize(writer));
            if (this.lastBasis != 0)
                writer.writeInt64(2, this.lastBasis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchKnowledgeBaseResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchKnowledgeBaseResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.knowledgeBases, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AllKnowledgeBase.deserialize(reader), AllKnowledgeBase));
                        break;
                    case 2:
                        message.lastBasis = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchKnowledgeBaseResponse {
            return FetchKnowledgeBaseResponse.deserialize(bytes);
        }
    }
    export class FetchKbUrlRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collectionId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
            }
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collectionId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            collectionId?: string;
        }): FetchKbUrlRequest {
            const message = new FetchKbUrlRequest({});
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            return message;
        }
        toObject() {
            const data: {
                collectionId?: string;
            } = {};
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collectionId.length)
                writer.writeString(1, this.collectionId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchKbUrlRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchKbUrlRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collectionId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchKbUrlRequest {
            return FetchKbUrlRequest.deserialize(bytes);
        }
    }
    export class FetchKbUrlResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            url?: string;
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            url?: string;
            success?: boolean;
        }): FetchKbUrlResponse {
            const message = new FetchKbUrlResponse({});
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                url?: string;
                success?: boolean;
            } = {};
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.url.length)
                writer.writeString(1, this.url);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchKbUrlResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchKbUrlResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.url = reader.readString();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchKbUrlResponse {
            return FetchKbUrlResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedKnowledgeBaseServiceService {
        static definition = {
            createKnowledgeBase: {
                path: "/tmq.KnowledgeBaseService/createKnowledgeBase",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: createKnowledgeBaseRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => createKnowledgeBaseRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: KnowledgeBaseResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => KnowledgeBaseResponse.deserialize(new Uint8Array(bytes))
            },
            uploadKnowledgeBase: {
                path: "/tmq.KnowledgeBaseService/uploadKnowledgeBase",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: KnowledgeBaseUploadRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => KnowledgeBaseUploadRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: KnowledgeBaseUploadResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => KnowledgeBaseUploadResponse.deserialize(new Uint8Array(bytes))
            },
            fetchKnowledgeBase: {
                path: "/tmq.KnowledgeBaseService/fetchKnowledgeBase",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FetchKnowledgeBaseRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FetchKnowledgeBaseRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FetchKnowledgeBaseResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FetchKnowledgeBaseResponse.deserialize(new Uint8Array(bytes))
            },
            generateUrl: {
                path: "/tmq.KnowledgeBaseService/generateUrl",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FetchKbUrlRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FetchKbUrlRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FetchKbUrlResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FetchKbUrlResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract createKnowledgeBase(call: grpc_1.ServerUnaryCall<createKnowledgeBaseRequest, KnowledgeBaseResponse>, callback: grpc_1.sendUnaryData<KnowledgeBaseResponse>): void;
        abstract uploadKnowledgeBase(call: grpc_1.ServerUnaryCall<KnowledgeBaseUploadRequest, KnowledgeBaseUploadResponse>, callback: grpc_1.sendUnaryData<KnowledgeBaseUploadResponse>): void;
        abstract fetchKnowledgeBase(call: grpc_1.ServerUnaryCall<FetchKnowledgeBaseRequest, FetchKnowledgeBaseResponse>, callback: grpc_1.sendUnaryData<FetchKnowledgeBaseResponse>): void;
        abstract generateUrl(call: grpc_1.ServerUnaryCall<FetchKbUrlRequest, FetchKbUrlResponse>, callback: grpc_1.sendUnaryData<FetchKbUrlResponse>): void;
    }
    export class KnowledgeBaseServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedKnowledgeBaseServiceService.definition, "KnowledgeBaseService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        createKnowledgeBase: GrpcUnaryServiceInterface<createKnowledgeBaseRequest, KnowledgeBaseResponse> = (message: createKnowledgeBaseRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<KnowledgeBaseResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<KnowledgeBaseResponse>, callback?: grpc_1.requestCallback<KnowledgeBaseResponse>): grpc_1.ClientUnaryCall => {
            return super.createKnowledgeBase(message, metadata, options, callback);
        };
        uploadKnowledgeBase: GrpcUnaryServiceInterface<KnowledgeBaseUploadRequest, KnowledgeBaseUploadResponse> = (message: KnowledgeBaseUploadRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<KnowledgeBaseUploadResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<KnowledgeBaseUploadResponse>, callback?: grpc_1.requestCallback<KnowledgeBaseUploadResponse>): grpc_1.ClientUnaryCall => {
            return super.uploadKnowledgeBase(message, metadata, options, callback);
        };
        fetchKnowledgeBase: GrpcUnaryServiceInterface<FetchKnowledgeBaseRequest, FetchKnowledgeBaseResponse> = (message: FetchKnowledgeBaseRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FetchKnowledgeBaseResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FetchKnowledgeBaseResponse>, callback?: grpc_1.requestCallback<FetchKnowledgeBaseResponse>): grpc_1.ClientUnaryCall => {
            return super.fetchKnowledgeBase(message, metadata, options, callback);
        };
        generateUrl: GrpcUnaryServiceInterface<FetchKbUrlRequest, FetchKbUrlResponse> = (message: FetchKbUrlRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FetchKbUrlResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FetchKbUrlResponse>, callback?: grpc_1.requestCallback<FetchKbUrlResponse>): grpc_1.ClientUnaryCall => {
            return super.generateUrl(message, metadata, options, callback);
        };
    }
}
