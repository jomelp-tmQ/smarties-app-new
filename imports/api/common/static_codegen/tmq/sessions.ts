/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: tmq/sessions.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class Session extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            external_session_id?: string;
            business_id?: string;
            channel_id?: string;
            consumer_id?: string;
            inbox_id?: string;
            status?: string;
            started_at?: number;
            last_seen_at?: number;
            ended_at?: number;
            duration_ms?: number;
            page_count?: number;
            referrer?: string;
            device?: string;
            user_agent?: string;
            created_at?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("external_session_id" in data && data.external_session_id != undefined) {
                    this.external_session_id = data.external_session_id;
                }
                if ("business_id" in data && data.business_id != undefined) {
                    this.business_id = data.business_id;
                }
                if ("channel_id" in data && data.channel_id != undefined) {
                    this.channel_id = data.channel_id;
                }
                if ("consumer_id" in data && data.consumer_id != undefined) {
                    this.consumer_id = data.consumer_id;
                }
                if ("inbox_id" in data && data.inbox_id != undefined) {
                    this.inbox_id = data.inbox_id;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("started_at" in data && data.started_at != undefined) {
                    this.started_at = data.started_at;
                }
                if ("last_seen_at" in data && data.last_seen_at != undefined) {
                    this.last_seen_at = data.last_seen_at;
                }
                if ("ended_at" in data && data.ended_at != undefined) {
                    this.ended_at = data.ended_at;
                }
                if ("duration_ms" in data && data.duration_ms != undefined) {
                    this.duration_ms = data.duration_ms;
                }
                if ("page_count" in data && data.page_count != undefined) {
                    this.page_count = data.page_count;
                }
                if ("referrer" in data && data.referrer != undefined) {
                    this.referrer = data.referrer;
                }
                if ("device" in data && data.device != undefined) {
                    this.device = data.device;
                }
                if ("user_agent" in data && data.user_agent != undefined) {
                    this.user_agent = data.user_agent;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get external_session_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set external_session_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get business_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set business_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get channel_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set channel_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get consumer_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set consumer_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get inbox_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set inbox_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get started_at() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set started_at(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get last_seen_at() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set last_seen_at(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get ended_at() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set ended_at(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get duration_ms() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set duration_ms(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get page_count() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set page_count(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get referrer() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set referrer(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get device() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set device(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get user_agent() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set user_agent(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        static fromObject(data: {
            id?: string;
            external_session_id?: string;
            business_id?: string;
            channel_id?: string;
            consumer_id?: string;
            inbox_id?: string;
            status?: string;
            started_at?: number;
            last_seen_at?: number;
            ended_at?: number;
            duration_ms?: number;
            page_count?: number;
            referrer?: string;
            device?: string;
            user_agent?: string;
            created_at?: number;
        }): Session {
            const message = new Session({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.external_session_id != null) {
                message.external_session_id = data.external_session_id;
            }
            if (data.business_id != null) {
                message.business_id = data.business_id;
            }
            if (data.channel_id != null) {
                message.channel_id = data.channel_id;
            }
            if (data.consumer_id != null) {
                message.consumer_id = data.consumer_id;
            }
            if (data.inbox_id != null) {
                message.inbox_id = data.inbox_id;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.started_at != null) {
                message.started_at = data.started_at;
            }
            if (data.last_seen_at != null) {
                message.last_seen_at = data.last_seen_at;
            }
            if (data.ended_at != null) {
                message.ended_at = data.ended_at;
            }
            if (data.duration_ms != null) {
                message.duration_ms = data.duration_ms;
            }
            if (data.page_count != null) {
                message.page_count = data.page_count;
            }
            if (data.referrer != null) {
                message.referrer = data.referrer;
            }
            if (data.device != null) {
                message.device = data.device;
            }
            if (data.user_agent != null) {
                message.user_agent = data.user_agent;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                external_session_id?: string;
                business_id?: string;
                channel_id?: string;
                consumer_id?: string;
                inbox_id?: string;
                status?: string;
                started_at?: number;
                last_seen_at?: number;
                ended_at?: number;
                duration_ms?: number;
                page_count?: number;
                referrer?: string;
                device?: string;
                user_agent?: string;
                created_at?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.external_session_id != null) {
                data.external_session_id = this.external_session_id;
            }
            if (this.business_id != null) {
                data.business_id = this.business_id;
            }
            if (this.channel_id != null) {
                data.channel_id = this.channel_id;
            }
            if (this.consumer_id != null) {
                data.consumer_id = this.consumer_id;
            }
            if (this.inbox_id != null) {
                data.inbox_id = this.inbox_id;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.started_at != null) {
                data.started_at = this.started_at;
            }
            if (this.last_seen_at != null) {
                data.last_seen_at = this.last_seen_at;
            }
            if (this.ended_at != null) {
                data.ended_at = this.ended_at;
            }
            if (this.duration_ms != null) {
                data.duration_ms = this.duration_ms;
            }
            if (this.page_count != null) {
                data.page_count = this.page_count;
            }
            if (this.referrer != null) {
                data.referrer = this.referrer;
            }
            if (this.device != null) {
                data.device = this.device;
            }
            if (this.user_agent != null) {
                data.user_agent = this.user_agent;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.external_session_id.length)
                writer.writeString(2, this.external_session_id);
            if (this.business_id.length)
                writer.writeString(3, this.business_id);
            if (this.channel_id.length)
                writer.writeString(4, this.channel_id);
            if (this.consumer_id.length)
                writer.writeString(5, this.consumer_id);
            if (this.inbox_id.length)
                writer.writeString(6, this.inbox_id);
            if (this.status.length)
                writer.writeString(7, this.status);
            if (this.started_at != 0)
                writer.writeDouble(8, this.started_at);
            if (this.last_seen_at != 0)
                writer.writeDouble(9, this.last_seen_at);
            if (this.ended_at != 0)
                writer.writeDouble(10, this.ended_at);
            if (this.duration_ms != 0)
                writer.writeInt64(11, this.duration_ms);
            if (this.page_count != 0)
                writer.writeInt32(12, this.page_count);
            if (this.referrer.length)
                writer.writeString(13, this.referrer);
            if (this.device.length)
                writer.writeString(14, this.device);
            if (this.user_agent.length)
                writer.writeString(15, this.user_agent);
            if (this.created_at != 0)
                writer.writeDouble(16, this.created_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Session {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Session();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.external_session_id = reader.readString();
                        break;
                    case 3:
                        message.business_id = reader.readString();
                        break;
                    case 4:
                        message.channel_id = reader.readString();
                        break;
                    case 5:
                        message.consumer_id = reader.readString();
                        break;
                    case 6:
                        message.inbox_id = reader.readString();
                        break;
                    case 7:
                        message.status = reader.readString();
                        break;
                    case 8:
                        message.started_at = reader.readDouble();
                        break;
                    case 9:
                        message.last_seen_at = reader.readDouble();
                        break;
                    case 10:
                        message.ended_at = reader.readDouble();
                        break;
                    case 11:
                        message.duration_ms = reader.readInt64();
                        break;
                    case 12:
                        message.page_count = reader.readInt32();
                        break;
                    case 13:
                        message.referrer = reader.readString();
                        break;
                    case 14:
                        message.device = reader.readString();
                        break;
                    case 15:
                        message.user_agent = reader.readString();
                        break;
                    case 16:
                        message.created_at = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Session {
            return Session.deserialize(bytes);
        }
    }
    export class PageView extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            session_id?: string;
            business_id?: string;
            channel_id?: string;
            consumer_id?: string;
            inbox_id?: string;
            type?: string;
            path?: string;
            title?: string;
            order?: number;
            timestamp?: number;
            dwell_ms?: number;
            created_at?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("business_id" in data && data.business_id != undefined) {
                    this.business_id = data.business_id;
                }
                if ("channel_id" in data && data.channel_id != undefined) {
                    this.channel_id = data.channel_id;
                }
                if ("consumer_id" in data && data.consumer_id != undefined) {
                    this.consumer_id = data.consumer_id;
                }
                if ("inbox_id" in data && data.inbox_id != undefined) {
                    this.inbox_id = data.inbox_id;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("order" in data && data.order != undefined) {
                    this.order = data.order;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("dwell_ms" in data && data.dwell_ms != undefined) {
                    this.dwell_ms = data.dwell_ms;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get business_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set business_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get channel_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set channel_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get consumer_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set consumer_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get inbox_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set inbox_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get order() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set order(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get dwell_ms() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set dwell_ms(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            id?: string;
            session_id?: string;
            business_id?: string;
            channel_id?: string;
            consumer_id?: string;
            inbox_id?: string;
            type?: string;
            path?: string;
            title?: string;
            order?: number;
            timestamp?: number;
            dwell_ms?: number;
            created_at?: number;
        }): PageView {
            const message = new PageView({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.business_id != null) {
                message.business_id = data.business_id;
            }
            if (data.channel_id != null) {
                message.channel_id = data.channel_id;
            }
            if (data.consumer_id != null) {
                message.consumer_id = data.consumer_id;
            }
            if (data.inbox_id != null) {
                message.inbox_id = data.inbox_id;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.order != null) {
                message.order = data.order;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.dwell_ms != null) {
                message.dwell_ms = data.dwell_ms;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                session_id?: string;
                business_id?: string;
                channel_id?: string;
                consumer_id?: string;
                inbox_id?: string;
                type?: string;
                path?: string;
                title?: string;
                order?: number;
                timestamp?: number;
                dwell_ms?: number;
                created_at?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.business_id != null) {
                data.business_id = this.business_id;
            }
            if (this.channel_id != null) {
                data.channel_id = this.channel_id;
            }
            if (this.consumer_id != null) {
                data.consumer_id = this.consumer_id;
            }
            if (this.inbox_id != null) {
                data.inbox_id = this.inbox_id;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.order != null) {
                data.order = this.order;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.dwell_ms != null) {
                data.dwell_ms = this.dwell_ms;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.session_id.length)
                writer.writeString(2, this.session_id);
            if (this.business_id.length)
                writer.writeString(3, this.business_id);
            if (this.channel_id.length)
                writer.writeString(4, this.channel_id);
            if (this.consumer_id.length)
                writer.writeString(5, this.consumer_id);
            if (this.inbox_id.length)
                writer.writeString(6, this.inbox_id);
            if (this.type.length)
                writer.writeString(7, this.type);
            if (this.path.length)
                writer.writeString(8, this.path);
            if (this.title.length)
                writer.writeString(9, this.title);
            if (this.order != 0)
                writer.writeInt32(10, this.order);
            if (this.timestamp != 0)
                writer.writeDouble(11, this.timestamp);
            if (this.dwell_ms != 0)
                writer.writeInt64(12, this.dwell_ms);
            if (this.created_at != 0)
                writer.writeDouble(13, this.created_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PageView {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PageView();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.session_id = reader.readString();
                        break;
                    case 3:
                        message.business_id = reader.readString();
                        break;
                    case 4:
                        message.channel_id = reader.readString();
                        break;
                    case 5:
                        message.consumer_id = reader.readString();
                        break;
                    case 6:
                        message.inbox_id = reader.readString();
                        break;
                    case 7:
                        message.type = reader.readString();
                        break;
                    case 8:
                        message.path = reader.readString();
                        break;
                    case 9:
                        message.title = reader.readString();
                        break;
                    case 10:
                        message.order = reader.readInt32();
                        break;
                    case 11:
                        message.timestamp = reader.readDouble();
                        break;
                    case 12:
                        message.dwell_ms = reader.readInt64();
                        break;
                    case 13:
                        message.created_at = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PageView {
            return PageView.deserialize(bytes);
        }
    }
    export class GetCurrentSessionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            business_id?: string;
            consumer_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("business_id" in data && data.business_id != undefined) {
                    this.business_id = data.business_id;
                }
                if ("consumer_id" in data && data.consumer_id != undefined) {
                    this.consumer_id = data.consumer_id;
                }
            }
        }
        get business_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set business_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get consumer_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set consumer_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            business_id?: string;
            consumer_id?: string;
        }): GetCurrentSessionRequest {
            const message = new GetCurrentSessionRequest({});
            if (data.business_id != null) {
                message.business_id = data.business_id;
            }
            if (data.consumer_id != null) {
                message.consumer_id = data.consumer_id;
            }
            return message;
        }
        toObject() {
            const data: {
                business_id?: string;
                consumer_id?: string;
            } = {};
            if (this.business_id != null) {
                data.business_id = this.business_id;
            }
            if (this.consumer_id != null) {
                data.consumer_id = this.consumer_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.business_id.length)
                writer.writeString(1, this.business_id);
            if (this.consumer_id.length)
                writer.writeString(2, this.consumer_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCurrentSessionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCurrentSessionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.business_id = reader.readString();
                        break;
                    case 2:
                        message.consumer_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCurrentSessionRequest {
            return GetCurrentSessionRequest.deserialize(bytes);
        }
    }
    export class GetCurrentSessionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessions?: Session[];
            success?: boolean;
            error_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessions" in data && data.sessions != undefined) {
                    this.sessions = data.sessions;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
            }
        }
        get sessions() {
            return pb_1.Message.getRepeatedWrapperField(this, Session, 1) as Session[];
        }
        set sessions(value: Session[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            sessions?: ReturnType<typeof Session.prototype.toObject>[];
            success?: boolean;
            error_message?: string;
        }): GetCurrentSessionResponse {
            const message = new GetCurrentSessionResponse({});
            if (data.sessions != null) {
                message.sessions = data.sessions.map(item => Session.fromObject(item));
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            return message;
        }
        toObject() {
            const data: {
                sessions?: ReturnType<typeof Session.prototype.toObject>[];
                success?: boolean;
                error_message?: string;
            } = {};
            if (this.sessions != null) {
                data.sessions = this.sessions.map((item: Session) => item.toObject());
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessions.length)
                writer.writeRepeatedMessage(1, this.sessions, (item: Session) => item.serialize(writer));
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.error_message.length)
                writer.writeString(3, this.error_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCurrentSessionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCurrentSessionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.sessions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Session.deserialize(reader), Session));
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        message.error_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCurrentSessionResponse {
            return GetCurrentSessionResponse.deserialize(bytes);
        }
    }
    export class GetPageViewsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            business_id?: string;
            session_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("business_id" in data && data.business_id != undefined) {
                    this.business_id = data.business_id;
                }
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
            }
        }
        get business_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set business_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            business_id?: string;
            session_id?: string;
        }): GetPageViewsRequest {
            const message = new GetPageViewsRequest({});
            if (data.business_id != null) {
                message.business_id = data.business_id;
            }
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            return message;
        }
        toObject() {
            const data: {
                business_id?: string;
                session_id?: string;
            } = {};
            if (this.business_id != null) {
                data.business_id = this.business_id;
            }
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.business_id.length)
                writer.writeString(1, this.business_id);
            if (this.session_id.length)
                writer.writeString(2, this.session_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPageViewsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPageViewsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.business_id = reader.readString();
                        break;
                    case 2:
                        message.session_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPageViewsRequest {
            return GetPageViewsRequest.deserialize(bytes);
        }
    }
    export class GetPageViewsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_views?: PageView[];
            success?: boolean;
            error_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_views" in data && data.page_views != undefined) {
                    this.page_views = data.page_views;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
            }
        }
        get page_views() {
            return pb_1.Message.getRepeatedWrapperField(this, PageView, 1) as PageView[];
        }
        set page_views(value: PageView[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            page_views?: ReturnType<typeof PageView.prototype.toObject>[];
            success?: boolean;
            error_message?: string;
        }): GetPageViewsResponse {
            const message = new GetPageViewsResponse({});
            if (data.page_views != null) {
                message.page_views = data.page_views.map(item => PageView.fromObject(item));
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            return message;
        }
        toObject() {
            const data: {
                page_views?: ReturnType<typeof PageView.prototype.toObject>[];
                success?: boolean;
                error_message?: string;
            } = {};
            if (this.page_views != null) {
                data.page_views = this.page_views.map((item: PageView) => item.toObject());
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_views.length)
                writer.writeRepeatedMessage(1, this.page_views, (item: PageView) => item.serialize(writer));
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.error_message.length)
                writer.writeString(3, this.error_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPageViewsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPageViewsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.page_views, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PageView.deserialize(reader), PageView));
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        message.error_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPageViewsResponse {
            return GetPageViewsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedSessionServiceService {
        static definition = {
            GetCurrentSessions: {
                path: "/tmq.SessionService/GetCurrentSessions",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetCurrentSessionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetCurrentSessionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetCurrentSessionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetCurrentSessionResponse.deserialize(new Uint8Array(bytes))
            },
            GetPageViews: {
                path: "/tmq.SessionService/GetPageViews",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetPageViewsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetPageViewsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetPageViewsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetPageViewsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetCurrentSessions(call: grpc_1.ServerUnaryCall<GetCurrentSessionRequest, GetCurrentSessionResponse>, callback: grpc_1.sendUnaryData<GetCurrentSessionResponse>): void;
        abstract GetPageViews(call: grpc_1.ServerUnaryCall<GetPageViewsRequest, GetPageViewsResponse>, callback: grpc_1.sendUnaryData<GetPageViewsResponse>): void;
    }
    export class SessionServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedSessionServiceService.definition, "SessionService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetCurrentSessions: GrpcUnaryServiceInterface<GetCurrentSessionRequest, GetCurrentSessionResponse> = (message: GetCurrentSessionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetCurrentSessionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetCurrentSessionResponse>, callback?: grpc_1.requestCallback<GetCurrentSessionResponse>): grpc_1.ClientUnaryCall => {
            return super.GetCurrentSessions(message, metadata, options, callback);
        };
        GetPageViews: GrpcUnaryServiceInterface<GetPageViewsRequest, GetPageViewsResponse> = (message: GetPageViewsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetPageViewsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetPageViewsResponse>, callback?: grpc_1.requestCallback<GetPageViewsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetPageViews(message, metadata, options, callback);
        };
    }
}
