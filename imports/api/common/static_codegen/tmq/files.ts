/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: tmq/files.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./inbox";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class FileItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            file_id?: string;
            business_id?: string;
            user_id?: string;
            original_name?: string;
            file_size?: number;
            created_at?: number;
            mime_type?: string;
            status?: string;
            kb_status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("file_id" in data && data.file_id != undefined) {
                    this.file_id = data.file_id;
                }
                if ("business_id" in data && data.business_id != undefined) {
                    this.business_id = data.business_id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("original_name" in data && data.original_name != undefined) {
                    this.original_name = data.original_name;
                }
                if ("file_size" in data && data.file_size != undefined) {
                    this.file_size = data.file_size;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("mime_type" in data && data.mime_type != undefined) {
                    this.mime_type = data.mime_type;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("kb_status" in data && data.kb_status != undefined) {
                    this.kb_status = data.kb_status;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get file_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set file_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get business_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set business_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get original_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set original_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get file_size() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set file_size(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get mime_type() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set mime_type(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get kb_status() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set kb_status(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            id?: string;
            file_id?: string;
            business_id?: string;
            user_id?: string;
            original_name?: string;
            file_size?: number;
            created_at?: number;
            mime_type?: string;
            status?: string;
            kb_status?: string;
        }): FileItem {
            const message = new FileItem({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.file_id != null) {
                message.file_id = data.file_id;
            }
            if (data.business_id != null) {
                message.business_id = data.business_id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.original_name != null) {
                message.original_name = data.original_name;
            }
            if (data.file_size != null) {
                message.file_size = data.file_size;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.mime_type != null) {
                message.mime_type = data.mime_type;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.kb_status != null) {
                message.kb_status = data.kb_status;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                file_id?: string;
                business_id?: string;
                user_id?: string;
                original_name?: string;
                file_size?: number;
                created_at?: number;
                mime_type?: string;
                status?: string;
                kb_status?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.file_id != null) {
                data.file_id = this.file_id;
            }
            if (this.business_id != null) {
                data.business_id = this.business_id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.original_name != null) {
                data.original_name = this.original_name;
            }
            if (this.file_size != null) {
                data.file_size = this.file_size;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.mime_type != null) {
                data.mime_type = this.mime_type;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.kb_status != null) {
                data.kb_status = this.kb_status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.file_id.length)
                writer.writeString(2, this.file_id);
            if (this.business_id.length)
                writer.writeString(3, this.business_id);
            if (this.user_id.length)
                writer.writeString(4, this.user_id);
            if (this.original_name.length)
                writer.writeString(5, this.original_name);
            if (this.file_size != 0)
                writer.writeDouble(6, this.file_size);
            if (this.created_at != 0)
                writer.writeDouble(7, this.created_at);
            if (this.mime_type.length)
                writer.writeString(8, this.mime_type);
            if (this.status.length)
                writer.writeString(9, this.status);
            if (this.kb_status.length)
                writer.writeString(10, this.kb_status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FileItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.file_id = reader.readString();
                        break;
                    case 3:
                        message.business_id = reader.readString();
                        break;
                    case 4:
                        message.user_id = reader.readString();
                        break;
                    case 5:
                        message.original_name = reader.readString();
                        break;
                    case 6:
                        message.file_size = reader.readDouble();
                        break;
                    case 7:
                        message.created_at = reader.readDouble();
                        break;
                    case 8:
                        message.mime_type = reader.readString();
                        break;
                    case 9:
                        message.status = reader.readString();
                        break;
                    case 10:
                        message.kb_status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FileItem {
            return FileItem.deserialize(bytes);
        }
    }
    export class FetchFilesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            business_id?: string;
            page?: dependency_1.tmq.Pagination;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("business_id" in data && data.business_id != undefined) {
                    this.business_id = data.business_id;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
            }
        }
        get business_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set business_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getWrapperField(this, dependency_1.tmq.Pagination, 2) as dependency_1.tmq.Pagination;
        }
        set page(value: dependency_1.tmq.Pagination) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_page() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            business_id?: string;
            page?: ReturnType<typeof dependency_1.tmq.Pagination.prototype.toObject>;
        }): FetchFilesRequest {
            const message = new FetchFilesRequest({});
            if (data.business_id != null) {
                message.business_id = data.business_id;
            }
            if (data.page != null) {
                message.page = dependency_1.tmq.Pagination.fromObject(data.page);
            }
            return message;
        }
        toObject() {
            const data: {
                business_id?: string;
                page?: ReturnType<typeof dependency_1.tmq.Pagination.prototype.toObject>;
            } = {};
            if (this.business_id != null) {
                data.business_id = this.business_id;
            }
            if (this.page != null) {
                data.page = this.page.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.business_id.length)
                writer.writeString(1, this.business_id);
            if (this.has_page)
                writer.writeMessage(2, this.page, () => this.page.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchFilesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchFilesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.business_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.page, () => message.page = dependency_1.tmq.Pagination.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchFilesRequest {
            return FetchFilesRequest.deserialize(bytes);
        }
    }
    export class FetchFilesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            files?: FileItem[];
            total_count?: number;
            success?: boolean;
            error_message?: string;
            last_basis?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("files" in data && data.files != undefined) {
                    this.files = data.files;
                }
                if ("total_count" in data && data.total_count != undefined) {
                    this.total_count = data.total_count;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
                if ("last_basis" in data && data.last_basis != undefined) {
                    this.last_basis = data.last_basis;
                }
            }
        }
        get files() {
            return pb_1.Message.getRepeatedWrapperField(this, FileItem, 1) as FileItem[];
        }
        set files(value: FileItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get last_basis() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set last_basis(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            files?: ReturnType<typeof FileItem.prototype.toObject>[];
            total_count?: number;
            success?: boolean;
            error_message?: string;
            last_basis?: number;
        }): FetchFilesResponse {
            const message = new FetchFilesResponse({});
            if (data.files != null) {
                message.files = data.files.map(item => FileItem.fromObject(item));
            }
            if (data.total_count != null) {
                message.total_count = data.total_count;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            if (data.last_basis != null) {
                message.last_basis = data.last_basis;
            }
            return message;
        }
        toObject() {
            const data: {
                files?: ReturnType<typeof FileItem.prototype.toObject>[];
                total_count?: number;
                success?: boolean;
                error_message?: string;
                last_basis?: number;
            } = {};
            if (this.files != null) {
                data.files = this.files.map((item: FileItem) => item.toObject());
            }
            if (this.total_count != null) {
                data.total_count = this.total_count;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            if (this.last_basis != null) {
                data.last_basis = this.last_basis;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.files.length)
                writer.writeRepeatedMessage(1, this.files, (item: FileItem) => item.serialize(writer));
            if (this.total_count != 0)
                writer.writeInt32(2, this.total_count);
            if (this.success != false)
                writer.writeBool(3, this.success);
            if (this.error_message.length)
                writer.writeString(4, this.error_message);
            if (this.last_basis != 0)
                writer.writeDouble(5, this.last_basis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchFilesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchFilesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.files, () => pb_1.Message.addToRepeatedWrapperField(message, 1, FileItem.deserialize(reader), FileItem));
                        break;
                    case 2:
                        message.total_count = reader.readInt32();
                        break;
                    case 3:
                        message.success = reader.readBool();
                        break;
                    case 4:
                        message.error_message = reader.readString();
                        break;
                    case 5:
                        message.last_basis = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchFilesResponse {
            return FetchFilesResponse.deserialize(bytes);
        }
    }
    export class DeleteFileRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            file_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("file_id" in data && data.file_id != undefined) {
                    this.file_id = data.file_id;
                }
            }
        }
        get file_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set file_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            file_id?: string;
        }): DeleteFileRequest {
            const message = new DeleteFileRequest({});
            if (data.file_id != null) {
                message.file_id = data.file_id;
            }
            return message;
        }
        toObject() {
            const data: {
                file_id?: string;
            } = {};
            if (this.file_id != null) {
                data.file_id = this.file_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.file_id.length)
                writer.writeString(1, this.file_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteFileRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteFileRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.file_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteFileRequest {
            return DeleteFileRequest.deserialize(bytes);
        }
    }
    export class DeleteFileResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            error_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            error_message?: string;
        }): DeleteFileResponse {
            const message = new DeleteFileResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                error_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.error_message.length)
                writer.writeString(2, this.error_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteFileResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteFileResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.error_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteFileResponse {
            return DeleteFileResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedFilesServiceService {
        static definition = {
            FetchFiles: {
                path: "/tmq.FilesService/FetchFiles",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FetchFilesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FetchFilesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FetchFilesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FetchFilesResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteFile: {
                path: "/tmq.FilesService/DeleteFile",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteFileRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteFileRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteFileResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteFileResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract FetchFiles(call: grpc_1.ServerUnaryCall<FetchFilesRequest, FetchFilesResponse>, callback: grpc_1.sendUnaryData<FetchFilesResponse>): void;
        abstract DeleteFile(call: grpc_1.ServerUnaryCall<DeleteFileRequest, DeleteFileResponse>, callback: grpc_1.sendUnaryData<DeleteFileResponse>): void;
    }
    export class FilesServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedFilesServiceService.definition, "FilesService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        FetchFiles: GrpcUnaryServiceInterface<FetchFilesRequest, FetchFilesResponse> = (message: FetchFilesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FetchFilesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FetchFilesResponse>, callback?: grpc_1.requestCallback<FetchFilesResponse>): grpc_1.ClientUnaryCall => {
            return super.FetchFiles(message, metadata, options, callback);
        };
        DeleteFile: GrpcUnaryServiceInterface<DeleteFileRequest, DeleteFileResponse> = (message: DeleteFileRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteFileResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteFileResponse>, callback?: grpc_1.requestCallback<DeleteFileResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteFile(message, metadata, options, callback);
        };
    }
}
