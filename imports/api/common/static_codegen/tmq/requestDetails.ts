/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: tmq/requestDetails.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class RequestDetailsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): RequestDetailsRequest {
            const message = new RequestDetailsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestDetailsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestDetailsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestDetailsRequest {
            return RequestDetailsRequest.deserialize(bytes);
        }
    }
    export class RequestDetailsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            returnUrl?: string;
            appUrl?: string;
            appName?: string;
            cancelUrl?: string;
            checkOutUrl?: string;
            sessionStatusUrl?: string;
            stripePublicKey?: string;
            portalUrl?: string;
            priceId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("returnUrl" in data && data.returnUrl != undefined) {
                    this.returnUrl = data.returnUrl;
                }
                if ("appUrl" in data && data.appUrl != undefined) {
                    this.appUrl = data.appUrl;
                }
                if ("appName" in data && data.appName != undefined) {
                    this.appName = data.appName;
                }
                if ("cancelUrl" in data && data.cancelUrl != undefined) {
                    this.cancelUrl = data.cancelUrl;
                }
                if ("checkOutUrl" in data && data.checkOutUrl != undefined) {
                    this.checkOutUrl = data.checkOutUrl;
                }
                if ("sessionStatusUrl" in data && data.sessionStatusUrl != undefined) {
                    this.sessionStatusUrl = data.sessionStatusUrl;
                }
                if ("stripePublicKey" in data && data.stripePublicKey != undefined) {
                    this.stripePublicKey = data.stripePublicKey;
                }
                if ("portalUrl" in data && data.portalUrl != undefined) {
                    this.portalUrl = data.portalUrl;
                }
                if ("priceId" in data && data.priceId != undefined) {
                    this.priceId = data.priceId;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get returnUrl() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set returnUrl(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get appUrl() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set appUrl(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get appName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set appName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get cancelUrl() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set cancelUrl(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get checkOutUrl() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set checkOutUrl(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get sessionStatusUrl() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set sessionStatusUrl(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get stripePublicKey() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set stripePublicKey(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get portalUrl() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set portalUrl(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get priceId() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set priceId(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            success?: boolean;
            returnUrl?: string;
            appUrl?: string;
            appName?: string;
            cancelUrl?: string;
            checkOutUrl?: string;
            sessionStatusUrl?: string;
            stripePublicKey?: string;
            portalUrl?: string;
            priceId?: string;
        }): RequestDetailsResponse {
            const message = new RequestDetailsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.returnUrl != null) {
                message.returnUrl = data.returnUrl;
            }
            if (data.appUrl != null) {
                message.appUrl = data.appUrl;
            }
            if (data.appName != null) {
                message.appName = data.appName;
            }
            if (data.cancelUrl != null) {
                message.cancelUrl = data.cancelUrl;
            }
            if (data.checkOutUrl != null) {
                message.checkOutUrl = data.checkOutUrl;
            }
            if (data.sessionStatusUrl != null) {
                message.sessionStatusUrl = data.sessionStatusUrl;
            }
            if (data.stripePublicKey != null) {
                message.stripePublicKey = data.stripePublicKey;
            }
            if (data.portalUrl != null) {
                message.portalUrl = data.portalUrl;
            }
            if (data.priceId != null) {
                message.priceId = data.priceId;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                returnUrl?: string;
                appUrl?: string;
                appName?: string;
                cancelUrl?: string;
                checkOutUrl?: string;
                sessionStatusUrl?: string;
                stripePublicKey?: string;
                portalUrl?: string;
                priceId?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.returnUrl != null) {
                data.returnUrl = this.returnUrl;
            }
            if (this.appUrl != null) {
                data.appUrl = this.appUrl;
            }
            if (this.appName != null) {
                data.appName = this.appName;
            }
            if (this.cancelUrl != null) {
                data.cancelUrl = this.cancelUrl;
            }
            if (this.checkOutUrl != null) {
                data.checkOutUrl = this.checkOutUrl;
            }
            if (this.sessionStatusUrl != null) {
                data.sessionStatusUrl = this.sessionStatusUrl;
            }
            if (this.stripePublicKey != null) {
                data.stripePublicKey = this.stripePublicKey;
            }
            if (this.portalUrl != null) {
                data.portalUrl = this.portalUrl;
            }
            if (this.priceId != null) {
                data.priceId = this.priceId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.returnUrl.length)
                writer.writeString(2, this.returnUrl);
            if (this.appUrl.length)
                writer.writeString(3, this.appUrl);
            if (this.appName.length)
                writer.writeString(4, this.appName);
            if (this.cancelUrl.length)
                writer.writeString(5, this.cancelUrl);
            if (this.checkOutUrl.length)
                writer.writeString(6, this.checkOutUrl);
            if (this.sessionStatusUrl.length)
                writer.writeString(7, this.sessionStatusUrl);
            if (this.stripePublicKey.length)
                writer.writeString(8, this.stripePublicKey);
            if (this.portalUrl.length)
                writer.writeString(9, this.portalUrl);
            if (this.priceId.length)
                writer.writeString(10, this.priceId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestDetailsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestDetailsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.returnUrl = reader.readString();
                        break;
                    case 3:
                        message.appUrl = reader.readString();
                        break;
                    case 4:
                        message.appName = reader.readString();
                        break;
                    case 5:
                        message.cancelUrl = reader.readString();
                        break;
                    case 6:
                        message.checkOutUrl = reader.readString();
                        break;
                    case 7:
                        message.sessionStatusUrl = reader.readString();
                        break;
                    case 8:
                        message.stripePublicKey = reader.readString();
                        break;
                    case 9:
                        message.portalUrl = reader.readString();
                        break;
                    case 10:
                        message.priceId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestDetailsResponse {
            return RequestDetailsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedRequestDetailsServiceService {
        static definition = {
            fetchRequestDetails: {
                path: "/tmq.RequestDetailsService/fetchRequestDetails",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RequestDetailsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RequestDetailsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RequestDetailsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RequestDetailsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract fetchRequestDetails(call: grpc_1.ServerUnaryCall<RequestDetailsRequest, RequestDetailsResponse>, callback: grpc_1.sendUnaryData<RequestDetailsResponse>): void;
    }
    export class RequestDetailsServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedRequestDetailsServiceService.definition, "RequestDetailsService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        fetchRequestDetails: GrpcUnaryServiceInterface<RequestDetailsRequest, RequestDetailsResponse> = (message: RequestDetailsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RequestDetailsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RequestDetailsResponse>, callback?: grpc_1.requestCallback<RequestDetailsResponse>): grpc_1.ClientUnaryCall => {
            return super.fetchRequestDetails(message, metadata, options, callback);
        };
    }
}
