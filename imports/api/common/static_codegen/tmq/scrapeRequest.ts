/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: tmq/scrapeRequest.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./inbox";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class FetchScrapeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            searchQuery?: string;
            lastBasis?: number;
            page?: dependency_1.tmq.Pagination;
            limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("searchQuery" in data && data.searchQuery != undefined) {
                    this.searchQuery = data.searchQuery;
                }
                if ("lastBasis" in data && data.lastBasis != undefined) {
                    this.lastBasis = data.lastBasis;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get searchQuery() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set searchQuery(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get lastBasis() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set lastBasis(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get page() {
            return pb_1.Message.getWrapperField(this, dependency_1.tmq.Pagination, 4) as dependency_1.tmq.Pagination;
        }
        set page(value: dependency_1.tmq.Pagination) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_page() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            userId?: string;
            searchQuery?: string;
            lastBasis?: number;
            page?: ReturnType<typeof dependency_1.tmq.Pagination.prototype.toObject>;
            limit?: number;
        }): FetchScrapeRequest {
            const message = new FetchScrapeRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.searchQuery != null) {
                message.searchQuery = data.searchQuery;
            }
            if (data.lastBasis != null) {
                message.lastBasis = data.lastBasis;
            }
            if (data.page != null) {
                message.page = dependency_1.tmq.Pagination.fromObject(data.page);
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                searchQuery?: string;
                lastBasis?: number;
                page?: ReturnType<typeof dependency_1.tmq.Pagination.prototype.toObject>;
                limit?: number;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.searchQuery != null) {
                data.searchQuery = this.searchQuery;
            }
            if (this.lastBasis != null) {
                data.lastBasis = this.lastBasis;
            }
            if (this.page != null) {
                data.page = this.page.toObject();
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.searchQuery.length)
                writer.writeString(2, this.searchQuery);
            if (this.lastBasis != 0)
                writer.writeInt64(3, this.lastBasis);
            if (this.has_page)
                writer.writeMessage(4, this.page, () => this.page.serialize(writer));
            if (this.limit != 0)
                writer.writeInt32(5, this.limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchScrapeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchScrapeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.searchQuery = reader.readString();
                        break;
                    case 3:
                        message.lastBasis = reader.readInt64();
                        break;
                    case 4:
                        reader.readMessage(message.page, () => message.page = dependency_1.tmq.Pagination.deserialize(reader));
                        break;
                    case 5:
                        message.limit = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchScrapeRequest {
            return FetchScrapeRequest.deserialize(bytes);
        }
    }
    export class Body extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            metadata?: Metadata;
            url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
            }
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 1) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            url?: string;
        }): Body {
            const message = new Body({});
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.url != null) {
                message.url = data.url;
            }
            return message;
        }
        toObject() {
            const data: {
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                url?: string;
            } = {};
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.url != null) {
                data.url = this.url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_metadata)
                writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
            if (this.url.length)
                writer.writeString(2, this.url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Body {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Body();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 2:
                        message.url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Body {
            return Body.deserialize(bytes);
        }
    }
    export class Metadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consumerName?: string;
            ipAddress?: IpAddress;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consumerName" in data && data.consumerName != undefined) {
                    this.consumerName = data.consumerName;
                }
                if ("ipAddress" in data && data.ipAddress != undefined) {
                    this.ipAddress = data.ipAddress;
                }
            }
        }
        get consumerName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set consumerName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ipAddress() {
            return pb_1.Message.getWrapperField(this, IpAddress, 2) as IpAddress;
        }
        set ipAddress(value: IpAddress) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_ipAddress() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            consumerName?: string;
            ipAddress?: ReturnType<typeof IpAddress.prototype.toObject>;
        }): Metadata {
            const message = new Metadata({});
            if (data.consumerName != null) {
                message.consumerName = data.consumerName;
            }
            if (data.ipAddress != null) {
                message.ipAddress = IpAddress.fromObject(data.ipAddress);
            }
            return message;
        }
        toObject() {
            const data: {
                consumerName?: string;
                ipAddress?: ReturnType<typeof IpAddress.prototype.toObject>;
            } = {};
            if (this.consumerName != null) {
                data.consumerName = this.consumerName;
            }
            if (this.ipAddress != null) {
                data.ipAddress = this.ipAddress.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consumerName.length)
                writer.writeString(1, this.consumerName);
            if (this.has_ipAddress)
                writer.writeMessage(2, this.ipAddress, () => this.ipAddress.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Metadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Metadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.consumerName = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.ipAddress, () => message.ipAddress = IpAddress.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Metadata {
            return Metadata.deserialize(bytes);
        }
    }
    export class IpAddress extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: IpData;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get data() {
            return pb_1.Message.getWrapperField(this, IpData, 1) as IpData;
        }
        set data(value: IpData) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            data?: ReturnType<typeof IpData.prototype.toObject>;
        }): IpAddress {
            const message = new IpAddress({});
            if (data.data != null) {
                message.data = IpData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                data?: ReturnType<typeof IpData.prototype.toObject>;
            } = {};
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_data)
                writer.writeMessage(1, this.data, () => this.data.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IpAddress {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IpAddress();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.data, () => message.data = IpData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IpAddress {
            return IpAddress.deserialize(bytes);
        }
    }
    export class IpData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ip?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ip" in data && data.ip != undefined) {
                    this.ip = data.ip;
                }
            }
        }
        get ip() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ip(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ip?: string;
        }): IpData {
            const message = new IpData({});
            if (data.ip != null) {
                message.ip = data.ip;
            }
            return message;
        }
        toObject() {
            const data: {
                ip?: string;
            } = {};
            if (this.ip != null) {
                data.ip = this.ip;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ip.length)
                writer.writeString(1, this.ip);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IpData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IpData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ip = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IpData {
            return IpData.deserialize(bytes);
        }
    }
    export class Response extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            body?: ResponseBody;
            status?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("body" in data && data.body != undefined) {
                    this.body = data.body;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get body() {
            return pb_1.Message.getWrapperField(this, ResponseBody, 1) as ResponseBody;
        }
        set body(value: ResponseBody) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_body() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set status(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            body?: ReturnType<typeof ResponseBody.prototype.toObject>;
            status?: number;
        }): Response {
            const message = new Response({});
            if (data.body != null) {
                message.body = ResponseBody.fromObject(data.body);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                body?: ReturnType<typeof ResponseBody.prototype.toObject>;
                status?: number;
            } = {};
            if (this.body != null) {
                data.body = this.body.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_body)
                writer.writeMessage(1, this.body, () => this.body.serialize(writer));
            if (this.status != 0)
                writer.writeInt32(2, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.body, () => message.body = ResponseBody.deserialize(reader));
                        break;
                    case 2:
                        message.status = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Response {
            return Response.deserialize(bytes);
        }
    }
    export class ResponseBody extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
            assistantId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            message?: string;
            assistantId?: string;
        }): ResponseBody {
            const message = new ResponseBody({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
                assistantId?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (this.assistantId.length)
                writer.writeString(2, this.assistantId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponseBody {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponseBody();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    case 2:
                        message.assistantId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResponseBody {
            return ResponseBody.deserialize(bytes);
        }
    }
    export class AllScrapeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            createdAt?: number;
            status?: string;
            code?: number;
            errorMsg?: string;
            body?: Body;
            response?: Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("errorMsg" in data && data.errorMsg != undefined) {
                    this.errorMsg = data.errorMsg;
                }
                if ("body" in data && data.body != undefined) {
                    this.body = data.body;
                }
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
            }
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set createdAt(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get errorMsg() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set errorMsg(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get body() {
            return pb_1.Message.getWrapperField(this, Body, 5) as Body;
        }
        set body(value: Body) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_body() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get response() {
            return pb_1.Message.getWrapperField(this, Response, 6) as Response;
        }
        set response(value: Response) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_response() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            createdAt?: number;
            status?: string;
            code?: number;
            errorMsg?: string;
            body?: ReturnType<typeof Body.prototype.toObject>;
            response?: ReturnType<typeof Response.prototype.toObject>;
        }): AllScrapeRequest {
            const message = new AllScrapeRequest({});
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.errorMsg != null) {
                message.errorMsg = data.errorMsg;
            }
            if (data.body != null) {
                message.body = Body.fromObject(data.body);
            }
            if (data.response != null) {
                message.response = Response.fromObject(data.response);
            }
            return message;
        }
        toObject() {
            const data: {
                createdAt?: number;
                status?: string;
                code?: number;
                errorMsg?: string;
                body?: ReturnType<typeof Body.prototype.toObject>;
                response?: ReturnType<typeof Response.prototype.toObject>;
            } = {};
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.errorMsg != null) {
                data.errorMsg = this.errorMsg;
            }
            if (this.body != null) {
                data.body = this.body.toObject();
            }
            if (this.response != null) {
                data.response = this.response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.createdAt != 0)
                writer.writeInt64(1, this.createdAt);
            if (this.status.length)
                writer.writeString(2, this.status);
            if (this.code != 0)
                writer.writeInt32(3, this.code);
            if (this.errorMsg.length)
                writer.writeString(4, this.errorMsg);
            if (this.has_body)
                writer.writeMessage(5, this.body, () => this.body.serialize(writer));
            if (this.has_response)
                writer.writeMessage(6, this.response, () => this.response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AllScrapeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AllScrapeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.createdAt = reader.readInt64();
                        break;
                    case 2:
                        message.status = reader.readString();
                        break;
                    case 3:
                        message.code = reader.readInt32();
                        break;
                    case 4:
                        message.errorMsg = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.body, () => message.body = Body.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.response, () => message.response = Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AllScrapeRequest {
            return AllScrapeRequest.deserialize(bytes);
        }
    }
    export class FetchScrapeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scrapeRequest?: AllScrapeRequest[];
            lastBasis?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scrapeRequest" in data && data.scrapeRequest != undefined) {
                    this.scrapeRequest = data.scrapeRequest;
                }
                if ("lastBasis" in data && data.lastBasis != undefined) {
                    this.lastBasis = data.lastBasis;
                }
            }
        }
        get scrapeRequest() {
            return pb_1.Message.getRepeatedWrapperField(this, AllScrapeRequest, 1) as AllScrapeRequest[];
        }
        set scrapeRequest(value: AllScrapeRequest[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get lastBasis() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set lastBasis(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            scrapeRequest?: ReturnType<typeof AllScrapeRequest.prototype.toObject>[];
            lastBasis?: number;
        }): FetchScrapeResponse {
            const message = new FetchScrapeResponse({});
            if (data.scrapeRequest != null) {
                message.scrapeRequest = data.scrapeRequest.map(item => AllScrapeRequest.fromObject(item));
            }
            if (data.lastBasis != null) {
                message.lastBasis = data.lastBasis;
            }
            return message;
        }
        toObject() {
            const data: {
                scrapeRequest?: ReturnType<typeof AllScrapeRequest.prototype.toObject>[];
                lastBasis?: number;
            } = {};
            if (this.scrapeRequest != null) {
                data.scrapeRequest = this.scrapeRequest.map((item: AllScrapeRequest) => item.toObject());
            }
            if (this.lastBasis != null) {
                data.lastBasis = this.lastBasis;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scrapeRequest.length)
                writer.writeRepeatedMessage(1, this.scrapeRequest, (item: AllScrapeRequest) => item.serialize(writer));
            if (this.lastBasis != 0)
                writer.writeInt64(2, this.lastBasis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchScrapeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchScrapeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.scrapeRequest, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AllScrapeRequest.deserialize(reader), AllScrapeRequest));
                        break;
                    case 2:
                        message.lastBasis = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchScrapeResponse {
            return FetchScrapeResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedScrapeRequestServiceService {
        static definition = {
            fetchScrapeRequests: {
                path: "/tmq.ScrapeRequestService/fetchScrapeRequests",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FetchScrapeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FetchScrapeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FetchScrapeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FetchScrapeResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract fetchScrapeRequests(call: grpc_1.ServerUnaryCall<FetchScrapeRequest, FetchScrapeResponse>, callback: grpc_1.sendUnaryData<FetchScrapeResponse>): void;
    }
    export class ScrapeRequestServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedScrapeRequestServiceService.definition, "ScrapeRequestService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        fetchScrapeRequests: GrpcUnaryServiceInterface<FetchScrapeRequest, FetchScrapeResponse> = (message: FetchScrapeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FetchScrapeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FetchScrapeResponse>, callback?: grpc_1.requestCallback<FetchScrapeResponse>): grpc_1.ClientUnaryCall => {
            return super.fetchScrapeRequests(message, metadata, options, callback);
        };
    }
}
