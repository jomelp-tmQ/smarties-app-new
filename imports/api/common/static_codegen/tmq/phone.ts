/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: tmq/phone.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class PhoneResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): PhoneResponse {
            const message = new PhoneResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PhoneResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PhoneResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PhoneResponse {
            return PhoneResponse.deserialize(bytes);
        }
    }
    export class Capabilities extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            voice?: boolean;
            sms?: boolean;
            mms?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("voice" in data && data.voice != undefined) {
                    this.voice = data.voice;
                }
                if ("sms" in data && data.sms != undefined) {
                    this.sms = data.sms;
                }
                if ("mms" in data && data.mms != undefined) {
                    this.mms = data.mms;
                }
            }
        }
        get voice() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set voice(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get sms() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set sms(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get mms() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set mms(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            voice?: boolean;
            sms?: boolean;
            mms?: boolean;
        }): Capabilities {
            const message = new Capabilities({});
            if (data.voice != null) {
                message.voice = data.voice;
            }
            if (data.sms != null) {
                message.sms = data.sms;
            }
            if (data.mms != null) {
                message.mms = data.mms;
            }
            return message;
        }
        toObject() {
            const data: {
                voice?: boolean;
                sms?: boolean;
                mms?: boolean;
            } = {};
            if (this.voice != null) {
                data.voice = this.voice;
            }
            if (this.sms != null) {
                data.sms = this.sms;
            }
            if (this.mms != null) {
                data.mms = this.mms;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.voice != false)
                writer.writeBool(1, this.voice);
            if (this.sms != false)
                writer.writeBool(2, this.sms);
            if (this.mms != false)
                writer.writeBool(3, this.mms);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Capabilities {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Capabilities();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.voice = reader.readBool();
                        break;
                    case 2:
                        message.sms = reader.readBool();
                        break;
                    case 3:
                        message.mms = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Capabilities {
            return Capabilities.deserialize(bytes);
        }
    }
    export class PhoneRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            number?: string;
            countryCode?: string;
            formattedNumber?: string;
            capabilities?: Capabilities;
            provider?: string;
            providerSid?: string;
            businessId?: string;
            status?: string;
            monthlyPrice?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("number" in data && data.number != undefined) {
                    this.number = data.number;
                }
                if ("countryCode" in data && data.countryCode != undefined) {
                    this.countryCode = data.countryCode;
                }
                if ("formattedNumber" in data && data.formattedNumber != undefined) {
                    this.formattedNumber = data.formattedNumber;
                }
                if ("capabilities" in data && data.capabilities != undefined) {
                    this.capabilities = data.capabilities;
                }
                if ("provider" in data && data.provider != undefined) {
                    this.provider = data.provider;
                }
                if ("providerSid" in data && data.providerSid != undefined) {
                    this.providerSid = data.providerSid;
                }
                if ("businessId" in data && data.businessId != undefined) {
                    this.businessId = data.businessId;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("monthlyPrice" in data && data.monthlyPrice != undefined) {
                    this.monthlyPrice = data.monthlyPrice;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get number() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set number(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get countryCode() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set countryCode(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get formattedNumber() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set formattedNumber(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get capabilities() {
            return pb_1.Message.getWrapperField(this, Capabilities, 5) as Capabilities;
        }
        set capabilities(value: Capabilities) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_capabilities() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get provider() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set provider(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get providerSid() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set providerSid(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get businessId() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set businessId(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get monthlyPrice() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set monthlyPrice(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            userId?: string;
            number?: string;
            countryCode?: string;
            formattedNumber?: string;
            capabilities?: ReturnType<typeof Capabilities.prototype.toObject>;
            provider?: string;
            providerSid?: string;
            businessId?: string;
            status?: string;
            monthlyPrice?: number;
        }): PhoneRequest {
            const message = new PhoneRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.number != null) {
                message.number = data.number;
            }
            if (data.countryCode != null) {
                message.countryCode = data.countryCode;
            }
            if (data.formattedNumber != null) {
                message.formattedNumber = data.formattedNumber;
            }
            if (data.capabilities != null) {
                message.capabilities = Capabilities.fromObject(data.capabilities);
            }
            if (data.provider != null) {
                message.provider = data.provider;
            }
            if (data.providerSid != null) {
                message.providerSid = data.providerSid;
            }
            if (data.businessId != null) {
                message.businessId = data.businessId;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.monthlyPrice != null) {
                message.monthlyPrice = data.monthlyPrice;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                number?: string;
                countryCode?: string;
                formattedNumber?: string;
                capabilities?: ReturnType<typeof Capabilities.prototype.toObject>;
                provider?: string;
                providerSid?: string;
                businessId?: string;
                status?: string;
                monthlyPrice?: number;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.number != null) {
                data.number = this.number;
            }
            if (this.countryCode != null) {
                data.countryCode = this.countryCode;
            }
            if (this.formattedNumber != null) {
                data.formattedNumber = this.formattedNumber;
            }
            if (this.capabilities != null) {
                data.capabilities = this.capabilities.toObject();
            }
            if (this.provider != null) {
                data.provider = this.provider;
            }
            if (this.providerSid != null) {
                data.providerSid = this.providerSid;
            }
            if (this.businessId != null) {
                data.businessId = this.businessId;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.monthlyPrice != null) {
                data.monthlyPrice = this.monthlyPrice;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.number.length)
                writer.writeString(2, this.number);
            if (this.countryCode.length)
                writer.writeString(3, this.countryCode);
            if (this.formattedNumber.length)
                writer.writeString(4, this.formattedNumber);
            if (this.has_capabilities)
                writer.writeMessage(5, this.capabilities, () => this.capabilities.serialize(writer));
            if (this.provider.length)
                writer.writeString(6, this.provider);
            if (this.providerSid.length)
                writer.writeString(7, this.providerSid);
            if (this.businessId.length)
                writer.writeString(8, this.businessId);
            if (this.status.length)
                writer.writeString(9, this.status);
            if (this.monthlyPrice != 0)
                writer.writeInt32(10, this.monthlyPrice);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PhoneRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PhoneRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.number = reader.readString();
                        break;
                    case 3:
                        message.countryCode = reader.readString();
                        break;
                    case 4:
                        message.formattedNumber = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.capabilities, () => message.capabilities = Capabilities.deserialize(reader));
                        break;
                    case 6:
                        message.provider = reader.readString();
                        break;
                    case 7:
                        message.providerSid = reader.readString();
                        break;
                    case 8:
                        message.businessId = reader.readString();
                        break;
                    case 9:
                        message.status = reader.readString();
                        break;
                    case 10:
                        message.monthlyPrice = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PhoneRequest {
            return PhoneRequest.deserialize(bytes);
        }
    }
    export class Phone extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            number?: string;
            countryCode?: string;
            formattedNumber?: string;
            capabilities?: Capabilities;
            provider?: string;
            providerSid?: string;
            businessId?: string;
            status?: string;
            monthlyPrice?: number;
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("number" in data && data.number != undefined) {
                    this.number = data.number;
                }
                if ("countryCode" in data && data.countryCode != undefined) {
                    this.countryCode = data.countryCode;
                }
                if ("formattedNumber" in data && data.formattedNumber != undefined) {
                    this.formattedNumber = data.formattedNumber;
                }
                if ("capabilities" in data && data.capabilities != undefined) {
                    this.capabilities = data.capabilities;
                }
                if ("provider" in data && data.provider != undefined) {
                    this.provider = data.provider;
                }
                if ("providerSid" in data && data.providerSid != undefined) {
                    this.providerSid = data.providerSid;
                }
                if ("businessId" in data && data.businessId != undefined) {
                    this.businessId = data.businessId;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("monthlyPrice" in data && data.monthlyPrice != undefined) {
                    this.monthlyPrice = data.monthlyPrice;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get number() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set number(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get countryCode() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set countryCode(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get formattedNumber() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set formattedNumber(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get capabilities() {
            return pb_1.Message.getWrapperField(this, Capabilities, 5) as Capabilities;
        }
        set capabilities(value: Capabilities) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_capabilities() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get provider() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set provider(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get providerSid() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set providerSid(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get businessId() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set businessId(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get monthlyPrice() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set monthlyPrice(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            userId?: string;
            number?: string;
            countryCode?: string;
            formattedNumber?: string;
            capabilities?: ReturnType<typeof Capabilities.prototype.toObject>;
            provider?: string;
            providerSid?: string;
            businessId?: string;
            status?: string;
            monthlyPrice?: number;
            id?: string;
        }): Phone {
            const message = new Phone({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.number != null) {
                message.number = data.number;
            }
            if (data.countryCode != null) {
                message.countryCode = data.countryCode;
            }
            if (data.formattedNumber != null) {
                message.formattedNumber = data.formattedNumber;
            }
            if (data.capabilities != null) {
                message.capabilities = Capabilities.fromObject(data.capabilities);
            }
            if (data.provider != null) {
                message.provider = data.provider;
            }
            if (data.providerSid != null) {
                message.providerSid = data.providerSid;
            }
            if (data.businessId != null) {
                message.businessId = data.businessId;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.monthlyPrice != null) {
                message.monthlyPrice = data.monthlyPrice;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                number?: string;
                countryCode?: string;
                formattedNumber?: string;
                capabilities?: ReturnType<typeof Capabilities.prototype.toObject>;
                provider?: string;
                providerSid?: string;
                businessId?: string;
                status?: string;
                monthlyPrice?: number;
                id?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.number != null) {
                data.number = this.number;
            }
            if (this.countryCode != null) {
                data.countryCode = this.countryCode;
            }
            if (this.formattedNumber != null) {
                data.formattedNumber = this.formattedNumber;
            }
            if (this.capabilities != null) {
                data.capabilities = this.capabilities.toObject();
            }
            if (this.provider != null) {
                data.provider = this.provider;
            }
            if (this.providerSid != null) {
                data.providerSid = this.providerSid;
            }
            if (this.businessId != null) {
                data.businessId = this.businessId;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.monthlyPrice != null) {
                data.monthlyPrice = this.monthlyPrice;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.number.length)
                writer.writeString(2, this.number);
            if (this.countryCode.length)
                writer.writeString(3, this.countryCode);
            if (this.formattedNumber.length)
                writer.writeString(4, this.formattedNumber);
            if (this.has_capabilities)
                writer.writeMessage(5, this.capabilities, () => this.capabilities.serialize(writer));
            if (this.provider.length)
                writer.writeString(6, this.provider);
            if (this.providerSid.length)
                writer.writeString(7, this.providerSid);
            if (this.businessId.length)
                writer.writeString(8, this.businessId);
            if (this.status.length)
                writer.writeString(9, this.status);
            if (this.monthlyPrice != 0)
                writer.writeInt32(10, this.monthlyPrice);
            if (this.id.length)
                writer.writeString(11, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Phone {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Phone();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.number = reader.readString();
                        break;
                    case 3:
                        message.countryCode = reader.readString();
                        break;
                    case 4:
                        message.formattedNumber = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.capabilities, () => message.capabilities = Capabilities.deserialize(reader));
                        break;
                    case 6:
                        message.provider = reader.readString();
                        break;
                    case 7:
                        message.providerSid = reader.readString();
                        break;
                    case 8:
                        message.businessId = reader.readString();
                        break;
                    case 9:
                        message.status = reader.readString();
                        break;
                    case 10:
                        message.monthlyPrice = reader.readInt32();
                        break;
                    case 11:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Phone {
            return Phone.deserialize(bytes);
        }
    }
    export class FetchPhoneRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            userId?: string;
        }): FetchPhoneRequest {
            const message = new FetchPhoneRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchPhoneRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchPhoneRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchPhoneRequest {
            return FetchPhoneRequest.deserialize(bytes);
        }
    }
    export class FetchPhoneResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            phones?: Phone[];
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phones" in data && data.phones != undefined) {
                    this.phones = data.phones;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get phones() {
            return pb_1.Message.getRepeatedWrapperField(this, Phone, 1) as Phone[];
        }
        set phones(value: Phone[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            phones?: ReturnType<typeof Phone.prototype.toObject>[];
            success?: boolean;
        }): FetchPhoneResponse {
            const message = new FetchPhoneResponse({});
            if (data.phones != null) {
                message.phones = data.phones.map(item => Phone.fromObject(item));
            }
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                phones?: ReturnType<typeof Phone.prototype.toObject>[];
                success?: boolean;
            } = {};
            if (this.phones != null) {
                data.phones = this.phones.map((item: Phone) => item.toObject());
            }
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.phones.length)
                writer.writeRepeatedMessage(1, this.phones, (item: Phone) => item.serialize(writer));
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchPhoneResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchPhoneResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.phones, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Phone.deserialize(reader), Phone));
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchPhoneResponse {
            return FetchPhoneResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedPhoneServiceService {
        static definition = {
            createPhone: {
                path: "/tmq.PhoneService/createPhone",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PhoneRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PhoneRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PhoneResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PhoneResponse.deserialize(new Uint8Array(bytes))
            },
            fetchPhones: {
                path: "/tmq.PhoneService/fetchPhones",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FetchPhoneRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FetchPhoneRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FetchPhoneResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FetchPhoneResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract createPhone(call: grpc_1.ServerUnaryCall<PhoneRequest, PhoneResponse>, callback: grpc_1.sendUnaryData<PhoneResponse>): void;
        abstract fetchPhones(call: grpc_1.ServerUnaryCall<FetchPhoneRequest, FetchPhoneResponse>, callback: grpc_1.sendUnaryData<FetchPhoneResponse>): void;
    }
    export class PhoneServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedPhoneServiceService.definition, "PhoneService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        createPhone: GrpcUnaryServiceInterface<PhoneRequest, PhoneResponse> = (message: PhoneRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PhoneResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PhoneResponse>, callback?: grpc_1.requestCallback<PhoneResponse>): grpc_1.ClientUnaryCall => {
            return super.createPhone(message, metadata, options, callback);
        };
        fetchPhones: GrpcUnaryServiceInterface<FetchPhoneRequest, FetchPhoneResponse> = (message: FetchPhoneRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FetchPhoneResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FetchPhoneResponse>, callback?: grpc_1.requestCallback<FetchPhoneResponse>): grpc_1.ClientUnaryCall => {
            return super.fetchPhones(message, metadata, options, callback);
        };
    }
}
