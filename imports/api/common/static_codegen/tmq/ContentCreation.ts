/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: tmq/ContentCreation.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class ContentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            format?: string;
            topic?: string;
            currentTrends?: string[];
            options?: ContentOptions;
            userId?: string;
            apiKey?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("format" in data && data.format != undefined) {
                    this.format = data.format;
                }
                if ("topic" in data && data.topic != undefined) {
                    this.topic = data.topic;
                }
                if ("currentTrends" in data && data.currentTrends != undefined) {
                    this.currentTrends = data.currentTrends;
                }
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("apiKey" in data && data.apiKey != undefined) {
                    this.apiKey = data.apiKey;
                }
            }
        }
        get format() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set format(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get topic() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set topic(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get currentTrends() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set currentTrends(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get options() {
            return pb_1.Message.getWrapperField(this, ContentOptions, 4) as ContentOptions;
        }
        set options(value: ContentOptions) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_options() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get apiKey() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set apiKey(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            format?: string;
            topic?: string;
            currentTrends?: string[];
            options?: ReturnType<typeof ContentOptions.prototype.toObject>;
            userId?: string;
            apiKey?: string;
        }): ContentRequest {
            const message = new ContentRequest({});
            if (data.format != null) {
                message.format = data.format;
            }
            if (data.topic != null) {
                message.topic = data.topic;
            }
            if (data.currentTrends != null) {
                message.currentTrends = data.currentTrends;
            }
            if (data.options != null) {
                message.options = ContentOptions.fromObject(data.options);
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.apiKey != null) {
                message.apiKey = data.apiKey;
            }
            return message;
        }
        toObject() {
            const data: {
                format?: string;
                topic?: string;
                currentTrends?: string[];
                options?: ReturnType<typeof ContentOptions.prototype.toObject>;
                userId?: string;
                apiKey?: string;
            } = {};
            if (this.format != null) {
                data.format = this.format;
            }
            if (this.topic != null) {
                data.topic = this.topic;
            }
            if (this.currentTrends != null) {
                data.currentTrends = this.currentTrends;
            }
            if (this.options != null) {
                data.options = this.options.toObject();
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.apiKey != null) {
                data.apiKey = this.apiKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.format.length)
                writer.writeString(1, this.format);
            if (this.topic.length)
                writer.writeString(2, this.topic);
            if (this.currentTrends.length)
                writer.writeRepeatedString(3, this.currentTrends);
            if (this.has_options)
                writer.writeMessage(4, this.options, () => this.options.serialize(writer));
            if (this.userId.length)
                writer.writeString(5, this.userId);
            if (this.apiKey.length)
                writer.writeString(6, this.apiKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.format = reader.readString();
                        break;
                    case 2:
                        message.topic = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        reader.readMessage(message.options, () => message.options = ContentOptions.deserialize(reader));
                        break;
                    case 5:
                        message.userId = reader.readString();
                        break;
                    case 6:
                        message.apiKey = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContentRequest {
            return ContentRequest.deserialize(bytes);
        }
    }
    export class ContentOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tone?: string;
            targetAudience?: string;
            length?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tone" in data && data.tone != undefined) {
                    this.tone = data.tone;
                }
                if ("targetAudience" in data && data.targetAudience != undefined) {
                    this.targetAudience = data.targetAudience;
                }
                if ("length" in data && data.length != undefined) {
                    this.length = data.length;
                }
            }
        }
        get tone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get targetAudience() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set targetAudience(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get length() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set length(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            tone?: string;
            targetAudience?: string;
            length?: string;
        }): ContentOptions {
            const message = new ContentOptions({});
            if (data.tone != null) {
                message.tone = data.tone;
            }
            if (data.targetAudience != null) {
                message.targetAudience = data.targetAudience;
            }
            if (data.length != null) {
                message.length = data.length;
            }
            return message;
        }
        toObject() {
            const data: {
                tone?: string;
                targetAudience?: string;
                length?: string;
            } = {};
            if (this.tone != null) {
                data.tone = this.tone;
            }
            if (this.targetAudience != null) {
                data.targetAudience = this.targetAudience;
            }
            if (this.length != null) {
                data.length = this.length;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tone.length)
                writer.writeString(1, this.tone);
            if (this.targetAudience.length)
                writer.writeString(2, this.targetAudience);
            if (this.length.length)
                writer.writeString(3, this.length);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContentOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContentOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tone = reader.readString();
                        break;
                    case 2:
                        message.targetAudience = reader.readString();
                        break;
                    case 3:
                        message.length = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContentOptions {
            return ContentOptions.deserialize(bytes);
        }
    }
    export class ContentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            content?: Uint8Array;
            metadata?: Uint8Array;
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set content(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set metadata(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            content?: Uint8Array;
            metadata?: Uint8Array;
            id?: string;
        }): ContentResponse {
            const message = new ContentResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                content?: Uint8Array;
                metadata?: Uint8Array;
                id?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.content.length)
                writer.writeBytes(3, this.content);
            if (this.metadata.length)
                writer.writeBytes(4, this.metadata);
            if (this.id.length)
                writer.writeString(5, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.content = reader.readBytes();
                        break;
                    case 4:
                        message.metadata = reader.readBytes();
                        break;
                    case 5:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContentResponse {
            return ContentResponse.deserialize(bytes);
        }
    }
    export class BatchGenerationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            requests?: ContentRequest[];
            userId?: string;
            apiKey?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requests" in data && data.requests != undefined) {
                    this.requests = data.requests;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("apiKey" in data && data.apiKey != undefined) {
                    this.apiKey = data.apiKey;
                }
            }
        }
        get requests() {
            return pb_1.Message.getRepeatedWrapperField(this, ContentRequest, 1) as ContentRequest[];
        }
        set requests(value: ContentRequest[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get apiKey() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set apiKey(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            requests?: ReturnType<typeof ContentRequest.prototype.toObject>[];
            userId?: string;
            apiKey?: string;
        }): BatchGenerationRequest {
            const message = new BatchGenerationRequest({});
            if (data.requests != null) {
                message.requests = data.requests.map(item => ContentRequest.fromObject(item));
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.apiKey != null) {
                message.apiKey = data.apiKey;
            }
            return message;
        }
        toObject() {
            const data: {
                requests?: ReturnType<typeof ContentRequest.prototype.toObject>[];
                userId?: string;
                apiKey?: string;
            } = {};
            if (this.requests != null) {
                data.requests = this.requests.map((item: ContentRequest) => item.toObject());
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.apiKey != null) {
                data.apiKey = this.apiKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.requests.length)
                writer.writeRepeatedMessage(1, this.requests, (item: ContentRequest) => item.serialize(writer));
            if (this.userId.length)
                writer.writeString(2, this.userId);
            if (this.apiKey.length)
                writer.writeString(3, this.apiKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchGenerationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchGenerationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.requests, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ContentRequest.deserialize(reader), ContentRequest));
                        break;
                    case 2:
                        message.userId = reader.readString();
                        break;
                    case 3:
                        message.apiKey = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchGenerationRequest {
            return BatchGenerationRequest.deserialize(bytes);
        }
    }
    export class BatchGenerationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            batchId?: string;
            totalProcessed?: number;
            totalErrors?: number;
            results?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("batchId" in data && data.batchId != undefined) {
                    this.batchId = data.batchId;
                }
                if ("totalProcessed" in data && data.totalProcessed != undefined) {
                    this.totalProcessed = data.totalProcessed;
                }
                if ("totalErrors" in data && data.totalErrors != undefined) {
                    this.totalErrors = data.totalErrors;
                }
                if ("results" in data && data.results != undefined) {
                    this.results = data.results;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get batchId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set batchId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get totalProcessed() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set totalProcessed(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get totalErrors() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set totalErrors(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get results() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as Uint8Array[];
        }
        set results(value: Uint8Array[]) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            batchId?: string;
            totalProcessed?: number;
            totalErrors?: number;
            results?: Uint8Array[];
        }): BatchGenerationResponse {
            const message = new BatchGenerationResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.batchId != null) {
                message.batchId = data.batchId;
            }
            if (data.totalProcessed != null) {
                message.totalProcessed = data.totalProcessed;
            }
            if (data.totalErrors != null) {
                message.totalErrors = data.totalErrors;
            }
            if (data.results != null) {
                message.results = data.results;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                batchId?: string;
                totalProcessed?: number;
                totalErrors?: number;
                results?: Uint8Array[];
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.batchId != null) {
                data.batchId = this.batchId;
            }
            if (this.totalProcessed != null) {
                data.totalProcessed = this.totalProcessed;
            }
            if (this.totalErrors != null) {
                data.totalErrors = this.totalErrors;
            }
            if (this.results != null) {
                data.results = this.results;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.batchId.length)
                writer.writeString(3, this.batchId);
            if (this.totalProcessed != 0)
                writer.writeInt32(4, this.totalProcessed);
            if (this.totalErrors != 0)
                writer.writeInt32(5, this.totalErrors);
            if (this.results.length)
                writer.writeRepeatedBytes(6, this.results);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchGenerationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchGenerationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.batchId = reader.readString();
                        break;
                    case 4:
                        message.totalProcessed = reader.readInt32();
                        break;
                    case 5:
                        message.totalErrors = reader.readInt32();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchGenerationResponse {
            return BatchGenerationResponse.deserialize(bytes);
        }
    }
    export class FormatsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            apiKey?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("apiKey" in data && data.apiKey != undefined) {
                    this.apiKey = data.apiKey;
                }
            }
        }
        get apiKey() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set apiKey(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            apiKey?: string;
        }): FormatsRequest {
            const message = new FormatsRequest({});
            if (data.apiKey != null) {
                message.apiKey = data.apiKey;
            }
            return message;
        }
        toObject() {
            const data: {
                apiKey?: string;
            } = {};
            if (this.apiKey != null) {
                data.apiKey = this.apiKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.apiKey.length)
                writer.writeString(1, this.apiKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FormatsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FormatsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.apiKey = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FormatsRequest {
            return FormatsRequest.deserialize(bytes);
        }
    }
    export class FormatsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            formats?: string[];
            count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("formats" in data && data.formats != undefined) {
                    this.formats = data.formats;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get formats() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set formats(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            formats?: string[];
            count?: number;
        }): FormatsResponse {
            const message = new FormatsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.formats != null) {
                message.formats = data.formats;
            }
            if (data.count != null) {
                message.count = data.count;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                formats?: string[];
                count?: number;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.formats != null) {
                data.formats = this.formats;
            }
            if (this.count != null) {
                data.count = this.count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.formats.length)
                writer.writeRepeatedString(3, this.formats);
            if (this.count != 0)
                writer.writeInt32(4, this.count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FormatsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FormatsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.count = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FormatsResponse {
            return FormatsResponse.deserialize(bytes);
        }
    }
    export class ImageSearchRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            query?: string;
            options?: ImageSearchOptions;
            userId?: string;
            apiKey?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("apiKey" in data && data.apiKey != undefined) {
                    this.apiKey = data.apiKey;
                }
            }
        }
        get query() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set query(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get options() {
            return pb_1.Message.getWrapperField(this, ImageSearchOptions, 2) as ImageSearchOptions;
        }
        set options(value: ImageSearchOptions) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_options() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get apiKey() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set apiKey(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            query?: string;
            options?: ReturnType<typeof ImageSearchOptions.prototype.toObject>;
            userId?: string;
            apiKey?: string;
        }): ImageSearchRequest {
            const message = new ImageSearchRequest({});
            if (data.query != null) {
                message.query = data.query;
            }
            if (data.options != null) {
                message.options = ImageSearchOptions.fromObject(data.options);
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.apiKey != null) {
                message.apiKey = data.apiKey;
            }
            return message;
        }
        toObject() {
            const data: {
                query?: string;
                options?: ReturnType<typeof ImageSearchOptions.prototype.toObject>;
                userId?: string;
                apiKey?: string;
            } = {};
            if (this.query != null) {
                data.query = this.query;
            }
            if (this.options != null) {
                data.options = this.options.toObject();
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.apiKey != null) {
                data.apiKey = this.apiKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.query.length)
                writer.writeString(1, this.query);
            if (this.has_options)
                writer.writeMessage(2, this.options, () => this.options.serialize(writer));
            if (this.userId.length)
                writer.writeString(3, this.userId);
            if (this.apiKey.length)
                writer.writeString(4, this.apiKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ImageSearchRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImageSearchRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.query = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.options, () => message.options = ImageSearchOptions.deserialize(reader));
                        break;
                    case 3:
                        message.userId = reader.readString();
                        break;
                    case 4:
                        message.apiKey = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ImageSearchRequest {
            return ImageSearchRequest.deserialize(bytes);
        }
    }
    export class ImageSearchOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            perPage?: number;
            orientation?: string;
            size?: string;
            color?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("perPage" in data && data.perPage != undefined) {
                    this.perPage = data.perPage;
                }
                if ("orientation" in data && data.orientation != undefined) {
                    this.orientation = data.orientation;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
                if ("color" in data && data.color != undefined) {
                    this.color = data.color;
                }
            }
        }
        get perPage() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set perPage(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get orientation() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set orientation(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set size(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get color() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set color(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            perPage?: number;
            orientation?: string;
            size?: string;
            color?: string;
        }): ImageSearchOptions {
            const message = new ImageSearchOptions({});
            if (data.perPage != null) {
                message.perPage = data.perPage;
            }
            if (data.orientation != null) {
                message.orientation = data.orientation;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            if (data.color != null) {
                message.color = data.color;
            }
            return message;
        }
        toObject() {
            const data: {
                perPage?: number;
                orientation?: string;
                size?: string;
                color?: string;
            } = {};
            if (this.perPage != null) {
                data.perPage = this.perPage;
            }
            if (this.orientation != null) {
                data.orientation = this.orientation;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            if (this.color != null) {
                data.color = this.color;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.perPage != 0)
                writer.writeInt32(1, this.perPage);
            if (this.orientation.length)
                writer.writeString(2, this.orientation);
            if (this.size.length)
                writer.writeString(3, this.size);
            if (this.color.length)
                writer.writeString(4, this.color);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ImageSearchOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImageSearchOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.perPage = reader.readInt32();
                        break;
                    case 2:
                        message.orientation = reader.readString();
                        break;
                    case 3:
                        message.size = reader.readString();
                        break;
                    case 4:
                        message.color = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ImageSearchOptions {
            return ImageSearchOptions.deserialize(bytes);
        }
    }
    export class ImageSearchResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            data?: Uint8Array;
            totalResults?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("totalResults" in data && data.totalResults != undefined) {
                    this.totalResults = data.totalResults;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get totalResults() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set totalResults(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            data?: Uint8Array;
            totalResults?: number;
        }): ImageSearchResponse {
            const message = new ImageSearchResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.totalResults != null) {
                message.totalResults = data.totalResults;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                data?: Uint8Array;
                totalResults?: number;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.totalResults != null) {
                data.totalResults = this.totalResults;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.data.length)
                writer.writeBytes(3, this.data);
            if (this.totalResults != 0)
                writer.writeInt32(4, this.totalResults);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ImageSearchResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImageSearchResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.data = reader.readBytes();
                        break;
                    case 4:
                        message.totalResults = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ImageSearchResponse {
            return ImageSearchResponse.deserialize(bytes);
        }
    }
    export class CuratedImagesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            perPage?: number;
            page?: number;
            userId?: string;
            apiKey?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("perPage" in data && data.perPage != undefined) {
                    this.perPage = data.perPage;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("apiKey" in data && data.apiKey != undefined) {
                    this.apiKey = data.apiKey;
                }
            }
        }
        get perPage() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set perPage(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get apiKey() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set apiKey(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            perPage?: number;
            page?: number;
            userId?: string;
            apiKey?: string;
        }): CuratedImagesRequest {
            const message = new CuratedImagesRequest({});
            if (data.perPage != null) {
                message.perPage = data.perPage;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.apiKey != null) {
                message.apiKey = data.apiKey;
            }
            return message;
        }
        toObject() {
            const data: {
                perPage?: number;
                page?: number;
                userId?: string;
                apiKey?: string;
            } = {};
            if (this.perPage != null) {
                data.perPage = this.perPage;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.apiKey != null) {
                data.apiKey = this.apiKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.perPage != 0)
                writer.writeInt32(1, this.perPage);
            if (this.page != 0)
                writer.writeInt32(2, this.page);
            if (this.userId.length)
                writer.writeString(3, this.userId);
            if (this.apiKey.length)
                writer.writeString(4, this.apiKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CuratedImagesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CuratedImagesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.perPage = reader.readInt32();
                        break;
                    case 2:
                        message.page = reader.readInt32();
                        break;
                    case 3:
                        message.userId = reader.readString();
                        break;
                    case 4:
                        message.apiKey = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CuratedImagesRequest {
            return CuratedImagesRequest.deserialize(bytes);
        }
    }
    export class PopularImagesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            perPage?: number;
            page?: number;
            userId?: string;
            apiKey?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("perPage" in data && data.perPage != undefined) {
                    this.perPage = data.perPage;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("apiKey" in data && data.apiKey != undefined) {
                    this.apiKey = data.apiKey;
                }
            }
        }
        get perPage() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set perPage(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get apiKey() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set apiKey(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            perPage?: number;
            page?: number;
            userId?: string;
            apiKey?: string;
        }): PopularImagesRequest {
            const message = new PopularImagesRequest({});
            if (data.perPage != null) {
                message.perPage = data.perPage;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.apiKey != null) {
                message.apiKey = data.apiKey;
            }
            return message;
        }
        toObject() {
            const data: {
                perPage?: number;
                page?: number;
                userId?: string;
                apiKey?: string;
            } = {};
            if (this.perPage != null) {
                data.perPage = this.perPage;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.apiKey != null) {
                data.apiKey = this.apiKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.perPage != 0)
                writer.writeInt32(1, this.perPage);
            if (this.page != 0)
                writer.writeInt32(2, this.page);
            if (this.userId.length)
                writer.writeString(3, this.userId);
            if (this.apiKey.length)
                writer.writeString(4, this.apiKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PopularImagesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PopularImagesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.perPage = reader.readInt32();
                        break;
                    case 2:
                        message.page = reader.readInt32();
                        break;
                    case 3:
                        message.userId = reader.readString();
                        break;
                    case 4:
                        message.apiKey = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PopularImagesRequest {
            return PopularImagesRequest.deserialize(bytes);
        }
    }
    export class ImageByIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            userId?: string;
            apiKey?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("apiKey" in data && data.apiKey != undefined) {
                    this.apiKey = data.apiKey;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get apiKey() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set apiKey(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: string;
            userId?: string;
            apiKey?: string;
        }): ImageByIdRequest {
            const message = new ImageByIdRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.apiKey != null) {
                message.apiKey = data.apiKey;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                userId?: string;
                apiKey?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.apiKey != null) {
                data.apiKey = this.apiKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.userId.length)
                writer.writeString(2, this.userId);
            if (this.apiKey.length)
                writer.writeString(3, this.apiKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ImageByIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImageByIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.userId = reader.readString();
                        break;
                    case 3:
                        message.apiKey = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ImageByIdRequest {
            return ImageByIdRequest.deserialize(bytes);
        }
    }
    export class ImageSuggestionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            topic?: string;
            userId?: string;
            apiKey?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("topic" in data && data.topic != undefined) {
                    this.topic = data.topic;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("apiKey" in data && data.apiKey != undefined) {
                    this.apiKey = data.apiKey;
                }
            }
        }
        get topic() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set topic(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get apiKey() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set apiKey(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            topic?: string;
            userId?: string;
            apiKey?: string;
        }): ImageSuggestionsRequest {
            const message = new ImageSuggestionsRequest({});
            if (data.topic != null) {
                message.topic = data.topic;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.apiKey != null) {
                message.apiKey = data.apiKey;
            }
            return message;
        }
        toObject() {
            const data: {
                topic?: string;
                userId?: string;
                apiKey?: string;
            } = {};
            if (this.topic != null) {
                data.topic = this.topic;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.apiKey != null) {
                data.apiKey = this.apiKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.topic.length)
                writer.writeString(1, this.topic);
            if (this.userId.length)
                writer.writeString(2, this.userId);
            if (this.apiKey.length)
                writer.writeString(3, this.apiKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ImageSuggestionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImageSuggestionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.topic = reader.readString();
                        break;
                    case 2:
                        message.userId = reader.readString();
                        break;
                    case 3:
                        message.apiKey = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ImageSuggestionsRequest {
            return ImageSuggestionsRequest.deserialize(bytes);
        }
    }
    export class ContentAnalysisRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            content?: string;
            criteria?: string[];
            targetAudience?: string;
            contentType?: string;
            keywords?: string[];
            model?: string;
            userId?: string;
            apiKey?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("criteria" in data && data.criteria != undefined) {
                    this.criteria = data.criteria;
                }
                if ("targetAudience" in data && data.targetAudience != undefined) {
                    this.targetAudience = data.targetAudience;
                }
                if ("contentType" in data && data.contentType != undefined) {
                    this.contentType = data.contentType;
                }
                if ("keywords" in data && data.keywords != undefined) {
                    this.keywords = data.keywords;
                }
                if ("model" in data && data.model != undefined) {
                    this.model = data.model;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("apiKey" in data && data.apiKey != undefined) {
                    this.apiKey = data.apiKey;
                }
            }
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get criteria() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set criteria(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get targetAudience() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set targetAudience(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get contentType() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set contentType(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get keywords() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set keywords(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get model() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set model(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get apiKey() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set apiKey(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            content?: string;
            criteria?: string[];
            targetAudience?: string;
            contentType?: string;
            keywords?: string[];
            model?: string;
            userId?: string;
            apiKey?: string;
        }): ContentAnalysisRequest {
            const message = new ContentAnalysisRequest({});
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.criteria != null) {
                message.criteria = data.criteria;
            }
            if (data.targetAudience != null) {
                message.targetAudience = data.targetAudience;
            }
            if (data.contentType != null) {
                message.contentType = data.contentType;
            }
            if (data.keywords != null) {
                message.keywords = data.keywords;
            }
            if (data.model != null) {
                message.model = data.model;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.apiKey != null) {
                message.apiKey = data.apiKey;
            }
            return message;
        }
        toObject() {
            const data: {
                content?: string;
                criteria?: string[];
                targetAudience?: string;
                contentType?: string;
                keywords?: string[];
                model?: string;
                userId?: string;
                apiKey?: string;
            } = {};
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.criteria != null) {
                data.criteria = this.criteria;
            }
            if (this.targetAudience != null) {
                data.targetAudience = this.targetAudience;
            }
            if (this.contentType != null) {
                data.contentType = this.contentType;
            }
            if (this.keywords != null) {
                data.keywords = this.keywords;
            }
            if (this.model != null) {
                data.model = this.model;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.apiKey != null) {
                data.apiKey = this.apiKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.content.length)
                writer.writeString(1, this.content);
            if (this.criteria.length)
                writer.writeRepeatedString(2, this.criteria);
            if (this.targetAudience.length)
                writer.writeString(3, this.targetAudience);
            if (this.contentType.length)
                writer.writeString(4, this.contentType);
            if (this.keywords.length)
                writer.writeRepeatedString(5, this.keywords);
            if (this.model.length)
                writer.writeString(6, this.model);
            if (this.userId.length)
                writer.writeString(7, this.userId);
            if (this.apiKey.length)
                writer.writeString(8, this.apiKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContentAnalysisRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContentAnalysisRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.content = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.targetAudience = reader.readString();
                        break;
                    case 4:
                        message.contentType = reader.readString();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        message.model = reader.readString();
                        break;
                    case 7:
                        message.userId = reader.readString();
                        break;
                    case 8:
                        message.apiKey = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContentAnalysisRequest {
            return ContentAnalysisRequest.deserialize(bytes);
        }
    }
    export class ContentAnalysisResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            analysis?: Uint8Array;
            id?: string;
            analysisType?: string;
            criteriaUsed?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("analysis" in data && data.analysis != undefined) {
                    this.analysis = data.analysis;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("analysisType" in data && data.analysisType != undefined) {
                    this.analysisType = data.analysisType;
                }
                if ("criteriaUsed" in data && data.criteriaUsed != undefined) {
                    this.criteriaUsed = data.criteriaUsed;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get analysis() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set analysis(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get analysisType() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set analysisType(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get criteriaUsed() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set criteriaUsed(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            analysis?: Uint8Array;
            id?: string;
            analysisType?: string;
            criteriaUsed?: string[];
        }): ContentAnalysisResponse {
            const message = new ContentAnalysisResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.analysis != null) {
                message.analysis = data.analysis;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.analysisType != null) {
                message.analysisType = data.analysisType;
            }
            if (data.criteriaUsed != null) {
                message.criteriaUsed = data.criteriaUsed;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                analysis?: Uint8Array;
                id?: string;
                analysisType?: string;
                criteriaUsed?: string[];
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.analysis != null) {
                data.analysis = this.analysis;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.analysisType != null) {
                data.analysisType = this.analysisType;
            }
            if (this.criteriaUsed != null) {
                data.criteriaUsed = this.criteriaUsed;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.analysis.length)
                writer.writeBytes(3, this.analysis);
            if (this.id.length)
                writer.writeString(4, this.id);
            if (this.analysisType.length)
                writer.writeString(5, this.analysisType);
            if (this.criteriaUsed.length)
                writer.writeRepeatedString(6, this.criteriaUsed);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContentAnalysisResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContentAnalysisResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.analysis = reader.readBytes();
                        break;
                    case 4:
                        message.id = reader.readString();
                        break;
                    case 5:
                        message.analysisType = reader.readString();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContentAnalysisResponse {
            return ContentAnalysisResponse.deserialize(bytes);
        }
    }
    export class QuickAnalysisRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            content?: string;
            targetAudience?: string;
            contentType?: string;
            userId?: string;
            apiKey?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("targetAudience" in data && data.targetAudience != undefined) {
                    this.targetAudience = data.targetAudience;
                }
                if ("contentType" in data && data.contentType != undefined) {
                    this.contentType = data.contentType;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("apiKey" in data && data.apiKey != undefined) {
                    this.apiKey = data.apiKey;
                }
            }
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get targetAudience() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set targetAudience(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get contentType() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set contentType(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get apiKey() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set apiKey(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            content?: string;
            targetAudience?: string;
            contentType?: string;
            userId?: string;
            apiKey?: string;
        }): QuickAnalysisRequest {
            const message = new QuickAnalysisRequest({});
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.targetAudience != null) {
                message.targetAudience = data.targetAudience;
            }
            if (data.contentType != null) {
                message.contentType = data.contentType;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.apiKey != null) {
                message.apiKey = data.apiKey;
            }
            return message;
        }
        toObject() {
            const data: {
                content?: string;
                targetAudience?: string;
                contentType?: string;
                userId?: string;
                apiKey?: string;
            } = {};
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.targetAudience != null) {
                data.targetAudience = this.targetAudience;
            }
            if (this.contentType != null) {
                data.contentType = this.contentType;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.apiKey != null) {
                data.apiKey = this.apiKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.content.length)
                writer.writeString(1, this.content);
            if (this.targetAudience.length)
                writer.writeString(2, this.targetAudience);
            if (this.contentType.length)
                writer.writeString(3, this.contentType);
            if (this.userId.length)
                writer.writeString(4, this.userId);
            if (this.apiKey.length)
                writer.writeString(5, this.apiKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuickAnalysisRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuickAnalysisRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.content = reader.readString();
                        break;
                    case 2:
                        message.targetAudience = reader.readString();
                        break;
                    case 3:
                        message.contentType = reader.readString();
                        break;
                    case 4:
                        message.userId = reader.readString();
                        break;
                    case 5:
                        message.apiKey = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuickAnalysisRequest {
            return QuickAnalysisRequest.deserialize(bytes);
        }
    }
    export class CriterionAnalysisRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            content?: string;
            criteria?: string[];
            targetAudience?: string;
            contentType?: string;
            keywords?: string[];
            model?: string;
            userId?: string;
            apiKey?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("criteria" in data && data.criteria != undefined) {
                    this.criteria = data.criteria;
                }
                if ("targetAudience" in data && data.targetAudience != undefined) {
                    this.targetAudience = data.targetAudience;
                }
                if ("contentType" in data && data.contentType != undefined) {
                    this.contentType = data.contentType;
                }
                if ("keywords" in data && data.keywords != undefined) {
                    this.keywords = data.keywords;
                }
                if ("model" in data && data.model != undefined) {
                    this.model = data.model;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("apiKey" in data && data.apiKey != undefined) {
                    this.apiKey = data.apiKey;
                }
            }
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get criteria() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set criteria(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get targetAudience() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set targetAudience(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get contentType() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set contentType(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get keywords() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set keywords(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get model() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set model(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get apiKey() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set apiKey(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            content?: string;
            criteria?: string[];
            targetAudience?: string;
            contentType?: string;
            keywords?: string[];
            model?: string;
            userId?: string;
            apiKey?: string;
        }): CriterionAnalysisRequest {
            const message = new CriterionAnalysisRequest({});
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.criteria != null) {
                message.criteria = data.criteria;
            }
            if (data.targetAudience != null) {
                message.targetAudience = data.targetAudience;
            }
            if (data.contentType != null) {
                message.contentType = data.contentType;
            }
            if (data.keywords != null) {
                message.keywords = data.keywords;
            }
            if (data.model != null) {
                message.model = data.model;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.apiKey != null) {
                message.apiKey = data.apiKey;
            }
            return message;
        }
        toObject() {
            const data: {
                content?: string;
                criteria?: string[];
                targetAudience?: string;
                contentType?: string;
                keywords?: string[];
                model?: string;
                userId?: string;
                apiKey?: string;
            } = {};
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.criteria != null) {
                data.criteria = this.criteria;
            }
            if (this.targetAudience != null) {
                data.targetAudience = this.targetAudience;
            }
            if (this.contentType != null) {
                data.contentType = this.contentType;
            }
            if (this.keywords != null) {
                data.keywords = this.keywords;
            }
            if (this.model != null) {
                data.model = this.model;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.apiKey != null) {
                data.apiKey = this.apiKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.content.length)
                writer.writeString(1, this.content);
            if (this.criteria.length)
                writer.writeRepeatedString(2, this.criteria);
            if (this.targetAudience.length)
                writer.writeString(3, this.targetAudience);
            if (this.contentType.length)
                writer.writeString(4, this.contentType);
            if (this.keywords.length)
                writer.writeRepeatedString(5, this.keywords);
            if (this.model.length)
                writer.writeString(6, this.model);
            if (this.userId.length)
                writer.writeString(7, this.userId);
            if (this.apiKey.length)
                writer.writeString(8, this.apiKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CriterionAnalysisRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CriterionAnalysisRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.content = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.targetAudience = reader.readString();
                        break;
                    case 4:
                        message.contentType = reader.readString();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        message.model = reader.readString();
                        break;
                    case 7:
                        message.userId = reader.readString();
                        break;
                    case 8:
                        message.apiKey = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CriterionAnalysisRequest {
            return CriterionAnalysisRequest.deserialize(bytes);
        }
    }
    export class CriteriaRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            apiKey?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("apiKey" in data && data.apiKey != undefined) {
                    this.apiKey = data.apiKey;
                }
            }
        }
        get apiKey() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set apiKey(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            apiKey?: string;
        }): CriteriaRequest {
            const message = new CriteriaRequest({});
            if (data.apiKey != null) {
                message.apiKey = data.apiKey;
            }
            return message;
        }
        toObject() {
            const data: {
                apiKey?: string;
            } = {};
            if (this.apiKey != null) {
                data.apiKey = this.apiKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.apiKey.length)
                writer.writeString(1, this.apiKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CriteriaRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CriteriaRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.apiKey = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CriteriaRequest {
            return CriteriaRequest.deserialize(bytes);
        }
    }
    export class CriteriaResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            criteria?: string[];
            count?: number;
            description?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("criteria" in data && data.criteria != undefined) {
                    this.criteria = data.criteria;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get criteria() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set criteria(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            criteria?: string[];
            count?: number;
            description?: string;
        }): CriteriaResponse {
            const message = new CriteriaResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.criteria != null) {
                message.criteria = data.criteria;
            }
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                criteria?: string[];
                count?: number;
                description?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.criteria != null) {
                data.criteria = this.criteria;
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.criteria.length)
                writer.writeRepeatedString(3, this.criteria);
            if (this.count != 0)
                writer.writeInt32(4, this.count);
            if (this.description.length)
                writer.writeString(5, this.description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CriteriaResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CriteriaResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.count = reader.readInt32();
                        break;
                    case 5:
                        message.description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CriteriaResponse {
            return CriteriaResponse.deserialize(bytes);
        }
    }
    export class HealthCheckRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            apiKey?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("apiKey" in data && data.apiKey != undefined) {
                    this.apiKey = data.apiKey;
                }
            }
        }
        get apiKey() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set apiKey(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            apiKey?: string;
        }): HealthCheckRequest {
            const message = new HealthCheckRequest({});
            if (data.apiKey != null) {
                message.apiKey = data.apiKey;
            }
            return message;
        }
        toObject() {
            const data: {
                apiKey?: string;
            } = {};
            if (this.apiKey != null) {
                data.apiKey = this.apiKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.apiKey.length)
                writer.writeString(1, this.apiKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HealthCheckRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HealthCheckRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.apiKey = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HealthCheckRequest {
            return HealthCheckRequest.deserialize(bytes);
        }
    }
    export class HealthCheckResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            serviceStatus?: string;
            availableFormats?: number;
            timestamp?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("serviceStatus" in data && data.serviceStatus != undefined) {
                    this.serviceStatus = data.serviceStatus;
                }
                if ("availableFormats" in data && data.availableFormats != undefined) {
                    this.availableFormats = data.availableFormats;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get serviceStatus() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set serviceStatus(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get availableFormats() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set availableFormats(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set timestamp(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            serviceStatus?: string;
            availableFormats?: number;
            timestamp?: string;
        }): HealthCheckResponse {
            const message = new HealthCheckResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.serviceStatus != null) {
                message.serviceStatus = data.serviceStatus;
            }
            if (data.availableFormats != null) {
                message.availableFormats = data.availableFormats;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                serviceStatus?: string;
                availableFormats?: number;
                timestamp?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.serviceStatus != null) {
                data.serviceStatus = this.serviceStatus;
            }
            if (this.availableFormats != null) {
                data.availableFormats = this.availableFormats;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.serviceStatus.length)
                writer.writeString(3, this.serviceStatus);
            if (this.availableFormats != 0)
                writer.writeInt32(4, this.availableFormats);
            if (this.timestamp.length)
                writer.writeString(5, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HealthCheckResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HealthCheckResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.serviceStatus = reader.readString();
                        break;
                    case 4:
                        message.availableFormats = reader.readInt32();
                        break;
                    case 5:
                        message.timestamp = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HealthCheckResponse {
            return HealthCheckResponse.deserialize(bytes);
        }
    }
    export class ImageHealthCheckRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            apiKey?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("apiKey" in data && data.apiKey != undefined) {
                    this.apiKey = data.apiKey;
                }
            }
        }
        get apiKey() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set apiKey(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            apiKey?: string;
        }): ImageHealthCheckRequest {
            const message = new ImageHealthCheckRequest({});
            if (data.apiKey != null) {
                message.apiKey = data.apiKey;
            }
            return message;
        }
        toObject() {
            const data: {
                apiKey?: string;
            } = {};
            if (this.apiKey != null) {
                data.apiKey = this.apiKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.apiKey.length)
                writer.writeString(1, this.apiKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ImageHealthCheckRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImageHealthCheckRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.apiKey = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ImageHealthCheckRequest {
            return ImageHealthCheckRequest.deserialize(bytes);
        }
    }
    export class ImageHealthCheckResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            data?: Uint8Array;
            timestamp?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set timestamp(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            data?: Uint8Array;
            timestamp?: string;
        }): ImageHealthCheckResponse {
            const message = new ImageHealthCheckResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                data?: Uint8Array;
                timestamp?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.data.length)
                writer.writeBytes(3, this.data);
            if (this.timestamp.length)
                writer.writeString(4, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ImageHealthCheckResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImageHealthCheckResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.data = reader.readBytes();
                        break;
                    case 4:
                        message.timestamp = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ImageHealthCheckResponse {
            return ImageHealthCheckResponse.deserialize(bytes);
        }
    }
    export class EditorHealthCheckRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            apiKey?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("apiKey" in data && data.apiKey != undefined) {
                    this.apiKey = data.apiKey;
                }
            }
        }
        get apiKey() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set apiKey(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            apiKey?: string;
        }): EditorHealthCheckRequest {
            const message = new EditorHealthCheckRequest({});
            if (data.apiKey != null) {
                message.apiKey = data.apiKey;
            }
            return message;
        }
        toObject() {
            const data: {
                apiKey?: string;
            } = {};
            if (this.apiKey != null) {
                data.apiKey = this.apiKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.apiKey.length)
                writer.writeString(1, this.apiKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditorHealthCheckRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditorHealthCheckRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.apiKey = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditorHealthCheckRequest {
            return EditorHealthCheckRequest.deserialize(bytes);
        }
    }
    export class EditorHealthCheckResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            serviceStatus?: string;
            availableCriteria?: number;
            timestamp?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("serviceStatus" in data && data.serviceStatus != undefined) {
                    this.serviceStatus = data.serviceStatus;
                }
                if ("availableCriteria" in data && data.availableCriteria != undefined) {
                    this.availableCriteria = data.availableCriteria;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get serviceStatus() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set serviceStatus(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get availableCriteria() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set availableCriteria(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set timestamp(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            serviceStatus?: string;
            availableCriteria?: number;
            timestamp?: string;
        }): EditorHealthCheckResponse {
            const message = new EditorHealthCheckResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.serviceStatus != null) {
                message.serviceStatus = data.serviceStatus;
            }
            if (data.availableCriteria != null) {
                message.availableCriteria = data.availableCriteria;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                serviceStatus?: string;
                availableCriteria?: number;
                timestamp?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.serviceStatus != null) {
                data.serviceStatus = this.serviceStatus;
            }
            if (this.availableCriteria != null) {
                data.availableCriteria = this.availableCriteria;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.serviceStatus.length)
                writer.writeString(3, this.serviceStatus);
            if (this.availableCriteria != 0)
                writer.writeInt32(4, this.availableCriteria);
            if (this.timestamp.length)
                writer.writeString(5, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditorHealthCheckResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditorHealthCheckResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.serviceStatus = reader.readString();
                        break;
                    case 4:
                        message.availableCriteria = reader.readInt32();
                        break;
                    case 5:
                        message.timestamp = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditorHealthCheckResponse {
            return EditorHealthCheckResponse.deserialize(bytes);
        }
    }
    export class GetContentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contentId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contentId" in data && data.contentId != undefined) {
                    this.contentId = data.contentId;
                }
            }
        }
        get contentId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contentId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            contentId?: string;
        }): GetContentRequest {
            const message = new GetContentRequest({});
            if (data.contentId != null) {
                message.contentId = data.contentId;
            }
            return message;
        }
        toObject() {
            const data: {
                contentId?: string;
            } = {};
            if (this.contentId != null) {
                data.contentId = this.contentId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.contentId.length)
                writer.writeString(1, this.contentId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetContentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetContentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.contentId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetContentRequest {
            return GetContentRequest.deserialize(bytes);
        }
    }
    export class ListContentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            filters?: ContentFilters;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
            }
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, ContentFilters, 1) as ContentFilters;
        }
        set filters(value: ContentFilters) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_filters() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            filters?: ReturnType<typeof ContentFilters.prototype.toObject>;
        }): ListContentRequest {
            const message = new ListContentRequest({});
            if (data.filters != null) {
                message.filters = ContentFilters.fromObject(data.filters);
            }
            return message;
        }
        toObject() {
            const data: {
                filters?: ReturnType<typeof ContentFilters.prototype.toObject>;
            } = {};
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_filters)
                writer.writeMessage(1, this.filters, () => this.filters.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListContentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListContentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.filters, () => message.filters = ContentFilters.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListContentRequest {
            return ListContentRequest.deserialize(bytes);
        }
    }
    export class ContentFilters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            format?: string;
            status?: string;
            userId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("format" in data && data.format != undefined) {
                    this.format = data.format;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
            }
        }
        get format() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set format(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            format?: string;
            status?: string;
            userId?: string;
        }): ContentFilters {
            const message = new ContentFilters({});
            if (data.format != null) {
                message.format = data.format;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            return message;
        }
        toObject() {
            const data: {
                format?: string;
                status?: string;
                userId?: string;
            } = {};
            if (this.format != null) {
                data.format = this.format;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.format.length)
                writer.writeString(1, this.format);
            if (this.status.length)
                writer.writeString(2, this.status);
            if (this.userId.length)
                writer.writeString(3, this.userId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContentFilters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContentFilters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.format = reader.readString();
                        break;
                    case 2:
                        message.status = reader.readString();
                        break;
                    case 3:
                        message.userId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContentFilters {
            return ContentFilters.deserialize(bytes);
        }
    }
    export class ListContentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            content?: ContentItem[];
            count?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get content() {
            return pb_1.Message.getRepeatedWrapperField(this, ContentItem, 1) as ContentItem[];
        }
        set content(value: ContentItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            content?: ReturnType<typeof ContentItem.prototype.toObject>[];
            count?: number;
            message?: string;
        }): ListContentResponse {
            const message = new ListContentResponse({});
            if (data.content != null) {
                message.content = data.content.map(item => ContentItem.fromObject(item));
            }
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                content?: ReturnType<typeof ContentItem.prototype.toObject>[];
                count?: number;
                message?: string;
            } = {};
            if (this.content != null) {
                data.content = this.content.map((item: ContentItem) => item.toObject());
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.content.length)
                writer.writeRepeatedMessage(1, this.content, (item: ContentItem) => item.serialize(writer));
            if (this.count != 0)
                writer.writeInt32(2, this.count);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListContentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListContentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.content, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ContentItem.deserialize(reader), ContentItem));
                        break;
                    case 2:
                        message.count = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListContentResponse {
            return ListContentResponse.deserialize(bytes);
        }
    }
    export class ContentItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            format?: string;
            topic?: string;
            status?: string;
            createdAt?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("format" in data && data.format != undefined) {
                    this.format = data.format;
                }
                if ("topic" in data && data.topic != undefined) {
                    this.topic = data.topic;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get format() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set format(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get topic() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set topic(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set createdAt(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: string;
            format?: string;
            topic?: string;
            status?: string;
            createdAt?: number;
        }): ContentItem {
            const message = new ContentItem({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.format != null) {
                message.format = data.format;
            }
            if (data.topic != null) {
                message.topic = data.topic;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                format?: string;
                topic?: string;
                status?: string;
                createdAt?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.format != null) {
                data.format = this.format;
            }
            if (this.topic != null) {
                data.topic = this.topic;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.format.length)
                writer.writeString(2, this.format);
            if (this.topic.length)
                writer.writeString(3, this.topic);
            if (this.status.length)
                writer.writeString(4, this.status);
            if (this.createdAt != 0)
                writer.writeUint64(5, this.createdAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContentItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContentItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.format = reader.readString();
                        break;
                    case 3:
                        message.topic = reader.readString();
                        break;
                    case 4:
                        message.status = reader.readString();
                        break;
                    case 5:
                        message.createdAt = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContentItem {
            return ContentItem.deserialize(bytes);
        }
    }
    export class TrendsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            categories?: string[];
            model?: string;
            temperature?: number;
            userId?: string;
            apiKey?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("categories" in data && data.categories != undefined) {
                    this.categories = data.categories;
                }
                if ("model" in data && data.model != undefined) {
                    this.model = data.model;
                }
                if ("temperature" in data && data.temperature != undefined) {
                    this.temperature = data.temperature;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("apiKey" in data && data.apiKey != undefined) {
                    this.apiKey = data.apiKey;
                }
            }
        }
        get categories() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set categories(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get model() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set model(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get temperature() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set temperature(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get apiKey() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set apiKey(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            categories?: string[];
            model?: string;
            temperature?: number;
            userId?: string;
            apiKey?: string;
        }): TrendsRequest {
            const message = new TrendsRequest({});
            if (data.categories != null) {
                message.categories = data.categories;
            }
            if (data.model != null) {
                message.model = data.model;
            }
            if (data.temperature != null) {
                message.temperature = data.temperature;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.apiKey != null) {
                message.apiKey = data.apiKey;
            }
            return message;
        }
        toObject() {
            const data: {
                categories?: string[];
                model?: string;
                temperature?: number;
                userId?: string;
                apiKey?: string;
            } = {};
            if (this.categories != null) {
                data.categories = this.categories;
            }
            if (this.model != null) {
                data.model = this.model;
            }
            if (this.temperature != null) {
                data.temperature = this.temperature;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.apiKey != null) {
                data.apiKey = this.apiKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.categories.length)
                writer.writeRepeatedString(1, this.categories);
            if (this.model.length)
                writer.writeString(2, this.model);
            if (this.temperature != 0)
                writer.writeFloat(3, this.temperature);
            if (this.userId.length)
                writer.writeString(4, this.userId);
            if (this.apiKey.length)
                writer.writeString(5, this.apiKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrendsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrendsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        message.model = reader.readString();
                        break;
                    case 3:
                        message.temperature = reader.readFloat();
                        break;
                    case 4:
                        message.userId = reader.readString();
                        break;
                    case 5:
                        message.apiKey = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TrendsRequest {
            return TrendsRequest.deserialize(bytes);
        }
    }
    export class TrendsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            data?: TrendItem[];
            categories_analyzed?: string[];
            total_posts?: number;
            timestamp?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("categories_analyzed" in data && data.categories_analyzed != undefined) {
                    this.categories_analyzed = data.categories_analyzed;
                }
                if ("total_posts" in data && data.total_posts != undefined) {
                    this.total_posts = data.total_posts;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, TrendItem, 3) as TrendItem[];
        }
        set data(value: TrendItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get categories_analyzed() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set categories_analyzed(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get total_posts() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set total_posts(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set timestamp(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            data?: ReturnType<typeof TrendItem.prototype.toObject>[];
            categories_analyzed?: string[];
            total_posts?: number;
            timestamp?: string;
        }): TrendsResponse {
            const message = new TrendsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.data != null) {
                message.data = data.data.map(item => TrendItem.fromObject(item));
            }
            if (data.categories_analyzed != null) {
                message.categories_analyzed = data.categories_analyzed;
            }
            if (data.total_posts != null) {
                message.total_posts = data.total_posts;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                data?: ReturnType<typeof TrendItem.prototype.toObject>[];
                categories_analyzed?: string[];
                total_posts?: number;
                timestamp?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.data != null) {
                data.data = this.data.map((item: TrendItem) => item.toObject());
            }
            if (this.categories_analyzed != null) {
                data.categories_analyzed = this.categories_analyzed;
            }
            if (this.total_posts != null) {
                data.total_posts = this.total_posts;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: TrendItem) => item.serialize(writer));
            if (this.categories_analyzed.length)
                writer.writeRepeatedString(4, this.categories_analyzed);
            if (this.total_posts != 0)
                writer.writeInt32(5, this.total_posts);
            if (this.timestamp.length)
                writer.writeString(6, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrendsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrendsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, TrendItem.deserialize(reader), TrendItem));
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        message.total_posts = reader.readInt32();
                        break;
                    case 6:
                        message.timestamp = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TrendsResponse {
            return TrendsResponse.deserialize(bytes);
        }
    }
    export class TrendItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            topic_label?: string;
            topic_description?: string;
            topic_strength?: number;
            top_subreddits?: string[];
            trend_direction?: string;
            engagement_score?: number;
            ai_generated?: boolean;
            keywords?: string[];
            post_count?: number;
            sentiment?: string;
            evidence?: string[];
            summary?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 8, 11], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("topic_label" in data && data.topic_label != undefined) {
                    this.topic_label = data.topic_label;
                }
                if ("topic_description" in data && data.topic_description != undefined) {
                    this.topic_description = data.topic_description;
                }
                if ("topic_strength" in data && data.topic_strength != undefined) {
                    this.topic_strength = data.topic_strength;
                }
                if ("top_subreddits" in data && data.top_subreddits != undefined) {
                    this.top_subreddits = data.top_subreddits;
                }
                if ("trend_direction" in data && data.trend_direction != undefined) {
                    this.trend_direction = data.trend_direction;
                }
                if ("engagement_score" in data && data.engagement_score != undefined) {
                    this.engagement_score = data.engagement_score;
                }
                if ("ai_generated" in data && data.ai_generated != undefined) {
                    this.ai_generated = data.ai_generated;
                }
                if ("keywords" in data && data.keywords != undefined) {
                    this.keywords = data.keywords;
                }
                if ("post_count" in data && data.post_count != undefined) {
                    this.post_count = data.post_count;
                }
                if ("sentiment" in data && data.sentiment != undefined) {
                    this.sentiment = data.sentiment;
                }
                if ("evidence" in data && data.evidence != undefined) {
                    this.evidence = data.evidence;
                }
                if ("summary" in data && data.summary != undefined) {
                    this.summary = data.summary;
                }
            }
        }
        get topic_label() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set topic_label(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get topic_description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set topic_description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get topic_strength() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set topic_strength(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get top_subreddits() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set top_subreddits(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get trend_direction() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set trend_direction(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get engagement_score() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set engagement_score(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get ai_generated() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set ai_generated(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get keywords() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set keywords(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get post_count() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set post_count(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get sentiment() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set sentiment(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get evidence() {
            return pb_1.Message.getFieldWithDefault(this, 11, []) as string[];
        }
        set evidence(value: string[]) {
            pb_1.Message.setField(this, 11, value);
        }
        get summary() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set summary(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            topic_label?: string;
            topic_description?: string;
            topic_strength?: number;
            top_subreddits?: string[];
            trend_direction?: string;
            engagement_score?: number;
            ai_generated?: boolean;
            keywords?: string[];
            post_count?: number;
            sentiment?: string;
            evidence?: string[];
            summary?: string;
        }): TrendItem {
            const message = new TrendItem({});
            if (data.topic_label != null) {
                message.topic_label = data.topic_label;
            }
            if (data.topic_description != null) {
                message.topic_description = data.topic_description;
            }
            if (data.topic_strength != null) {
                message.topic_strength = data.topic_strength;
            }
            if (data.top_subreddits != null) {
                message.top_subreddits = data.top_subreddits;
            }
            if (data.trend_direction != null) {
                message.trend_direction = data.trend_direction;
            }
            if (data.engagement_score != null) {
                message.engagement_score = data.engagement_score;
            }
            if (data.ai_generated != null) {
                message.ai_generated = data.ai_generated;
            }
            if (data.keywords != null) {
                message.keywords = data.keywords;
            }
            if (data.post_count != null) {
                message.post_count = data.post_count;
            }
            if (data.sentiment != null) {
                message.sentiment = data.sentiment;
            }
            if (data.evidence != null) {
                message.evidence = data.evidence;
            }
            if (data.summary != null) {
                message.summary = data.summary;
            }
            return message;
        }
        toObject() {
            const data: {
                topic_label?: string;
                topic_description?: string;
                topic_strength?: number;
                top_subreddits?: string[];
                trend_direction?: string;
                engagement_score?: number;
                ai_generated?: boolean;
                keywords?: string[];
                post_count?: number;
                sentiment?: string;
                evidence?: string[];
                summary?: string;
            } = {};
            if (this.topic_label != null) {
                data.topic_label = this.topic_label;
            }
            if (this.topic_description != null) {
                data.topic_description = this.topic_description;
            }
            if (this.topic_strength != null) {
                data.topic_strength = this.topic_strength;
            }
            if (this.top_subreddits != null) {
                data.top_subreddits = this.top_subreddits;
            }
            if (this.trend_direction != null) {
                data.trend_direction = this.trend_direction;
            }
            if (this.engagement_score != null) {
                data.engagement_score = this.engagement_score;
            }
            if (this.ai_generated != null) {
                data.ai_generated = this.ai_generated;
            }
            if (this.keywords != null) {
                data.keywords = this.keywords;
            }
            if (this.post_count != null) {
                data.post_count = this.post_count;
            }
            if (this.sentiment != null) {
                data.sentiment = this.sentiment;
            }
            if (this.evidence != null) {
                data.evidence = this.evidence;
            }
            if (this.summary != null) {
                data.summary = this.summary;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.topic_label.length)
                writer.writeString(1, this.topic_label);
            if (this.topic_description.length)
                writer.writeString(2, this.topic_description);
            if (this.topic_strength != 0)
                writer.writeFloat(3, this.topic_strength);
            if (this.top_subreddits.length)
                writer.writeRepeatedString(4, this.top_subreddits);
            if (this.trend_direction.length)
                writer.writeString(5, this.trend_direction);
            if (this.engagement_score != 0)
                writer.writeFloat(6, this.engagement_score);
            if (this.ai_generated != false)
                writer.writeBool(7, this.ai_generated);
            if (this.keywords.length)
                writer.writeRepeatedString(8, this.keywords);
            if (this.post_count != 0)
                writer.writeInt32(9, this.post_count);
            if (this.sentiment.length)
                writer.writeString(10, this.sentiment);
            if (this.evidence.length)
                writer.writeRepeatedString(11, this.evidence);
            if (this.summary.length)
                writer.writeString(12, this.summary);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrendItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrendItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.topic_label = reader.readString();
                        break;
                    case 2:
                        message.topic_description = reader.readString();
                        break;
                    case 3:
                        message.topic_strength = reader.readFloat();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        message.trend_direction = reader.readString();
                        break;
                    case 6:
                        message.engagement_score = reader.readFloat();
                        break;
                    case 7:
                        message.ai_generated = reader.readBool();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        message.post_count = reader.readInt32();
                        break;
                    case 10:
                        message.sentiment = reader.readString();
                        break;
                    case 11:
                        pb_1.Message.addToRepeatedField(message, 11, reader.readString());
                        break;
                    case 12:
                        message.summary = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TrendItem {
            return TrendItem.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedContentCreationServiceService {
        static definition = {
            generateContent: {
                path: "/tmq.ContentCreationService/generateContent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ContentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ContentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ContentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ContentResponse.deserialize(new Uint8Array(bytes))
            },
            generateBatch: {
                path: "/tmq.ContentCreationService/generateBatch",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BatchGenerationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BatchGenerationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BatchGenerationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BatchGenerationResponse.deserialize(new Uint8Array(bytes))
            },
            getFormats: {
                path: "/tmq.ContentCreationService/getFormats",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FormatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FormatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FormatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FormatsResponse.deserialize(new Uint8Array(bytes))
            },
            searchImages: {
                path: "/tmq.ContentCreationService/searchImages",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ImageSearchRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ImageSearchRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ImageSearchResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ImageSearchResponse.deserialize(new Uint8Array(bytes))
            },
            searchImagesPost: {
                path: "/tmq.ContentCreationService/searchImagesPost",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ImageSearchRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ImageSearchRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ImageSearchResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ImageSearchResponse.deserialize(new Uint8Array(bytes))
            },
            getCuratedImages: {
                path: "/tmq.ContentCreationService/getCuratedImages",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CuratedImagesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CuratedImagesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ImageSearchResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ImageSearchResponse.deserialize(new Uint8Array(bytes))
            },
            getPopularImages: {
                path: "/tmq.ContentCreationService/getPopularImages",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PopularImagesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PopularImagesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ImageSearchResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ImageSearchResponse.deserialize(new Uint8Array(bytes))
            },
            getImageById: {
                path: "/tmq.ContentCreationService/getImageById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ImageByIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ImageByIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ImageSearchResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ImageSearchResponse.deserialize(new Uint8Array(bytes))
            },
            getImageSuggestions: {
                path: "/tmq.ContentCreationService/getImageSuggestions",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ImageSuggestionsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ImageSuggestionsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ImageSearchResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ImageSearchResponse.deserialize(new Uint8Array(bytes))
            },
            analyzeContent: {
                path: "/tmq.ContentCreationService/analyzeContent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ContentAnalysisRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ContentAnalysisRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ContentAnalysisResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ContentAnalysisResponse.deserialize(new Uint8Array(bytes))
            },
            quickAnalysis: {
                path: "/tmq.ContentCreationService/quickAnalysis",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuickAnalysisRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuickAnalysisRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ContentAnalysisResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ContentAnalysisResponse.deserialize(new Uint8Array(bytes))
            },
            analyzeCriterion: {
                path: "/tmq.ContentCreationService/analyzeCriterion",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CriterionAnalysisRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CriterionAnalysisRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ContentAnalysisResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ContentAnalysisResponse.deserialize(new Uint8Array(bytes))
            },
            getCriteria: {
                path: "/tmq.ContentCreationService/getCriteria",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CriteriaRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CriteriaRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CriteriaResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CriteriaResponse.deserialize(new Uint8Array(bytes))
            },
            getLatestTrends: {
                path: "/tmq.ContentCreationService/getLatestTrends",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TrendsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TrendsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TrendsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TrendsResponse.deserialize(new Uint8Array(bytes))
            },
            healthCheck: {
                path: "/tmq.ContentCreationService/healthCheck",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: HealthCheckRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => HealthCheckRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: HealthCheckResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => HealthCheckResponse.deserialize(new Uint8Array(bytes))
            },
            imageHealthCheck: {
                path: "/tmq.ContentCreationService/imageHealthCheck",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ImageHealthCheckRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ImageHealthCheckRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ImageHealthCheckResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ImageHealthCheckResponse.deserialize(new Uint8Array(bytes))
            },
            editorHealthCheck: {
                path: "/tmq.ContentCreationService/editorHealthCheck",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EditorHealthCheckRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EditorHealthCheckRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EditorHealthCheckResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EditorHealthCheckResponse.deserialize(new Uint8Array(bytes))
            },
            getContent: {
                path: "/tmq.ContentCreationService/getContent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetContentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetContentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ContentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ContentResponse.deserialize(new Uint8Array(bytes))
            },
            listContent: {
                path: "/tmq.ContentCreationService/listContent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListContentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListContentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListContentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListContentResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract generateContent(call: grpc_1.ServerUnaryCall<ContentRequest, ContentResponse>, callback: grpc_1.sendUnaryData<ContentResponse>): void;
        abstract generateBatch(call: grpc_1.ServerUnaryCall<BatchGenerationRequest, BatchGenerationResponse>, callback: grpc_1.sendUnaryData<BatchGenerationResponse>): void;
        abstract getFormats(call: grpc_1.ServerUnaryCall<FormatsRequest, FormatsResponse>, callback: grpc_1.sendUnaryData<FormatsResponse>): void;
        abstract searchImages(call: grpc_1.ServerUnaryCall<ImageSearchRequest, ImageSearchResponse>, callback: grpc_1.sendUnaryData<ImageSearchResponse>): void;
        abstract searchImagesPost(call: grpc_1.ServerUnaryCall<ImageSearchRequest, ImageSearchResponse>, callback: grpc_1.sendUnaryData<ImageSearchResponse>): void;
        abstract getCuratedImages(call: grpc_1.ServerUnaryCall<CuratedImagesRequest, ImageSearchResponse>, callback: grpc_1.sendUnaryData<ImageSearchResponse>): void;
        abstract getPopularImages(call: grpc_1.ServerUnaryCall<PopularImagesRequest, ImageSearchResponse>, callback: grpc_1.sendUnaryData<ImageSearchResponse>): void;
        abstract getImageById(call: grpc_1.ServerUnaryCall<ImageByIdRequest, ImageSearchResponse>, callback: grpc_1.sendUnaryData<ImageSearchResponse>): void;
        abstract getImageSuggestions(call: grpc_1.ServerUnaryCall<ImageSuggestionsRequest, ImageSearchResponse>, callback: grpc_1.sendUnaryData<ImageSearchResponse>): void;
        abstract analyzeContent(call: grpc_1.ServerUnaryCall<ContentAnalysisRequest, ContentAnalysisResponse>, callback: grpc_1.sendUnaryData<ContentAnalysisResponse>): void;
        abstract quickAnalysis(call: grpc_1.ServerUnaryCall<QuickAnalysisRequest, ContentAnalysisResponse>, callback: grpc_1.sendUnaryData<ContentAnalysisResponse>): void;
        abstract analyzeCriterion(call: grpc_1.ServerUnaryCall<CriterionAnalysisRequest, ContentAnalysisResponse>, callback: grpc_1.sendUnaryData<ContentAnalysisResponse>): void;
        abstract getCriteria(call: grpc_1.ServerUnaryCall<CriteriaRequest, CriteriaResponse>, callback: grpc_1.sendUnaryData<CriteriaResponse>): void;
        abstract getLatestTrends(call: grpc_1.ServerUnaryCall<TrendsRequest, TrendsResponse>, callback: grpc_1.sendUnaryData<TrendsResponse>): void;
        abstract healthCheck(call: grpc_1.ServerUnaryCall<HealthCheckRequest, HealthCheckResponse>, callback: grpc_1.sendUnaryData<HealthCheckResponse>): void;
        abstract imageHealthCheck(call: grpc_1.ServerUnaryCall<ImageHealthCheckRequest, ImageHealthCheckResponse>, callback: grpc_1.sendUnaryData<ImageHealthCheckResponse>): void;
        abstract editorHealthCheck(call: grpc_1.ServerUnaryCall<EditorHealthCheckRequest, EditorHealthCheckResponse>, callback: grpc_1.sendUnaryData<EditorHealthCheckResponse>): void;
        abstract getContent(call: grpc_1.ServerUnaryCall<GetContentRequest, ContentResponse>, callback: grpc_1.sendUnaryData<ContentResponse>): void;
        abstract listContent(call: grpc_1.ServerUnaryCall<ListContentRequest, ListContentResponse>, callback: grpc_1.sendUnaryData<ListContentResponse>): void;
    }
    export class ContentCreationServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedContentCreationServiceService.definition, "ContentCreationService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        generateContent: GrpcUnaryServiceInterface<ContentRequest, ContentResponse> = (message: ContentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ContentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ContentResponse>, callback?: grpc_1.requestCallback<ContentResponse>): grpc_1.ClientUnaryCall => {
            return super.generateContent(message, metadata, options, callback);
        };
        generateBatch: GrpcUnaryServiceInterface<BatchGenerationRequest, BatchGenerationResponse> = (message: BatchGenerationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BatchGenerationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BatchGenerationResponse>, callback?: grpc_1.requestCallback<BatchGenerationResponse>): grpc_1.ClientUnaryCall => {
            return super.generateBatch(message, metadata, options, callback);
        };
        getFormats: GrpcUnaryServiceInterface<FormatsRequest, FormatsResponse> = (message: FormatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FormatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FormatsResponse>, callback?: grpc_1.requestCallback<FormatsResponse>): grpc_1.ClientUnaryCall => {
            return super.getFormats(message, metadata, options, callback);
        };
        searchImages: GrpcUnaryServiceInterface<ImageSearchRequest, ImageSearchResponse> = (message: ImageSearchRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ImageSearchResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ImageSearchResponse>, callback?: grpc_1.requestCallback<ImageSearchResponse>): grpc_1.ClientUnaryCall => {
            return super.searchImages(message, metadata, options, callback);
        };
        searchImagesPost: GrpcUnaryServiceInterface<ImageSearchRequest, ImageSearchResponse> = (message: ImageSearchRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ImageSearchResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ImageSearchResponse>, callback?: grpc_1.requestCallback<ImageSearchResponse>): grpc_1.ClientUnaryCall => {
            return super.searchImagesPost(message, metadata, options, callback);
        };
        getCuratedImages: GrpcUnaryServiceInterface<CuratedImagesRequest, ImageSearchResponse> = (message: CuratedImagesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ImageSearchResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ImageSearchResponse>, callback?: grpc_1.requestCallback<ImageSearchResponse>): grpc_1.ClientUnaryCall => {
            return super.getCuratedImages(message, metadata, options, callback);
        };
        getPopularImages: GrpcUnaryServiceInterface<PopularImagesRequest, ImageSearchResponse> = (message: PopularImagesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ImageSearchResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ImageSearchResponse>, callback?: grpc_1.requestCallback<ImageSearchResponse>): grpc_1.ClientUnaryCall => {
            return super.getPopularImages(message, metadata, options, callback);
        };
        getImageById: GrpcUnaryServiceInterface<ImageByIdRequest, ImageSearchResponse> = (message: ImageByIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ImageSearchResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ImageSearchResponse>, callback?: grpc_1.requestCallback<ImageSearchResponse>): grpc_1.ClientUnaryCall => {
            return super.getImageById(message, metadata, options, callback);
        };
        getImageSuggestions: GrpcUnaryServiceInterface<ImageSuggestionsRequest, ImageSearchResponse> = (message: ImageSuggestionsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ImageSearchResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ImageSearchResponse>, callback?: grpc_1.requestCallback<ImageSearchResponse>): grpc_1.ClientUnaryCall => {
            return super.getImageSuggestions(message, metadata, options, callback);
        };
        analyzeContent: GrpcUnaryServiceInterface<ContentAnalysisRequest, ContentAnalysisResponse> = (message: ContentAnalysisRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ContentAnalysisResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ContentAnalysisResponse>, callback?: grpc_1.requestCallback<ContentAnalysisResponse>): grpc_1.ClientUnaryCall => {
            return super.analyzeContent(message, metadata, options, callback);
        };
        quickAnalysis: GrpcUnaryServiceInterface<QuickAnalysisRequest, ContentAnalysisResponse> = (message: QuickAnalysisRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ContentAnalysisResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ContentAnalysisResponse>, callback?: grpc_1.requestCallback<ContentAnalysisResponse>): grpc_1.ClientUnaryCall => {
            return super.quickAnalysis(message, metadata, options, callback);
        };
        analyzeCriterion: GrpcUnaryServiceInterface<CriterionAnalysisRequest, ContentAnalysisResponse> = (message: CriterionAnalysisRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ContentAnalysisResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ContentAnalysisResponse>, callback?: grpc_1.requestCallback<ContentAnalysisResponse>): grpc_1.ClientUnaryCall => {
            return super.analyzeCriterion(message, metadata, options, callback);
        };
        getCriteria: GrpcUnaryServiceInterface<CriteriaRequest, CriteriaResponse> = (message: CriteriaRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CriteriaResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CriteriaResponse>, callback?: grpc_1.requestCallback<CriteriaResponse>): grpc_1.ClientUnaryCall => {
            return super.getCriteria(message, metadata, options, callback);
        };
        getLatestTrends: GrpcUnaryServiceInterface<TrendsRequest, TrendsResponse> = (message: TrendsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TrendsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TrendsResponse>, callback?: grpc_1.requestCallback<TrendsResponse>): grpc_1.ClientUnaryCall => {
            return super.getLatestTrends(message, metadata, options, callback);
        };
        healthCheck: GrpcUnaryServiceInterface<HealthCheckRequest, HealthCheckResponse> = (message: HealthCheckRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<HealthCheckResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<HealthCheckResponse>, callback?: grpc_1.requestCallback<HealthCheckResponse>): grpc_1.ClientUnaryCall => {
            return super.healthCheck(message, metadata, options, callback);
        };
        imageHealthCheck: GrpcUnaryServiceInterface<ImageHealthCheckRequest, ImageHealthCheckResponse> = (message: ImageHealthCheckRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ImageHealthCheckResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ImageHealthCheckResponse>, callback?: grpc_1.requestCallback<ImageHealthCheckResponse>): grpc_1.ClientUnaryCall => {
            return super.imageHealthCheck(message, metadata, options, callback);
        };
        editorHealthCheck: GrpcUnaryServiceInterface<EditorHealthCheckRequest, EditorHealthCheckResponse> = (message: EditorHealthCheckRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EditorHealthCheckResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EditorHealthCheckResponse>, callback?: grpc_1.requestCallback<EditorHealthCheckResponse>): grpc_1.ClientUnaryCall => {
            return super.editorHealthCheck(message, metadata, options, callback);
        };
        getContent: GrpcUnaryServiceInterface<GetContentRequest, ContentResponse> = (message: GetContentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ContentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ContentResponse>, callback?: grpc_1.requestCallback<ContentResponse>): grpc_1.ClientUnaryCall => {
            return super.getContent(message, metadata, options, callback);
        };
        listContent: GrpcUnaryServiceInterface<ListContentRequest, ListContentResponse> = (message: ListContentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListContentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListContentResponse>, callback?: grpc_1.requestCallback<ListContentResponse>): grpc_1.ClientUnaryCall => {
            return super.listContent(message, metadata, options, callback);
        };
    }
}
