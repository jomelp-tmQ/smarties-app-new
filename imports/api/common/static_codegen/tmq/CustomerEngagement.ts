/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: tmq/CustomerEngagement.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class WebhookEventRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_id?: string;
            customer_id?: string;
            type?: string;
            source?: string;
            social?: SocialMediaInfo;
            data?: Uint8Array;
            tags?: string[];
            priority?: number;
            metadata?: Uint8Array;
            intent?: string;
            generate_response?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_id" in data && data.account_id != undefined) {
                    this.account_id = data.account_id;
                }
                if ("customer_id" in data && data.customer_id != undefined) {
                    this.customer_id = data.customer_id;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("social" in data && data.social != undefined) {
                    this.social = data.social;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("intent" in data && data.intent != undefined) {
                    this.intent = data.intent;
                }
                if ("generate_response" in data && data.generate_response != undefined) {
                    this.generate_response = data.generate_response;
                }
            }
        }
        get account_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set account_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get customer_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set customer_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set source(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get social() {
            return pb_1.Message.getWrapperField(this, SocialMediaInfo, 5) as SocialMediaInfo;
        }
        set social(value: SocialMediaInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_social() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 9, new Uint8Array(0)) as Uint8Array;
        }
        set metadata(value: Uint8Array) {
            pb_1.Message.setField(this, 9, value);
        }
        get intent() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set intent(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get generate_response() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set generate_response(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            account_id?: string;
            customer_id?: string;
            type?: string;
            source?: string;
            social?: ReturnType<typeof SocialMediaInfo.prototype.toObject>;
            data?: Uint8Array;
            tags?: string[];
            priority?: number;
            metadata?: Uint8Array;
            intent?: string;
            generate_response?: boolean;
        }): WebhookEventRequest {
            const message = new WebhookEventRequest({});
            if (data.account_id != null) {
                message.account_id = data.account_id;
            }
            if (data.customer_id != null) {
                message.customer_id = data.customer_id;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.social != null) {
                message.social = SocialMediaInfo.fromObject(data.social);
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            if (data.intent != null) {
                message.intent = data.intent;
            }
            if (data.generate_response != null) {
                message.generate_response = data.generate_response;
            }
            return message;
        }
        toObject() {
            const data: {
                account_id?: string;
                customer_id?: string;
                type?: string;
                source?: string;
                social?: ReturnType<typeof SocialMediaInfo.prototype.toObject>;
                data?: Uint8Array;
                tags?: string[];
                priority?: number;
                metadata?: Uint8Array;
                intent?: string;
                generate_response?: boolean;
            } = {};
            if (this.account_id != null) {
                data.account_id = this.account_id;
            }
            if (this.customer_id != null) {
                data.customer_id = this.customer_id;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.social != null) {
                data.social = this.social.toObject();
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            if (this.intent != null) {
                data.intent = this.intent;
            }
            if (this.generate_response != null) {
                data.generate_response = this.generate_response;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_id.length)
                writer.writeString(1, this.account_id);
            if (this.customer_id.length)
                writer.writeString(2, this.customer_id);
            if (this.type.length)
                writer.writeString(3, this.type);
            if (this.source.length)
                writer.writeString(4, this.source);
            if (this.has_social)
                writer.writeMessage(5, this.social, () => this.social.serialize(writer));
            if (this.data.length)
                writer.writeBytes(6, this.data);
            if (this.tags.length)
                writer.writeRepeatedString(7, this.tags);
            if (this.priority != 0)
                writer.writeDouble(8, this.priority);
            if (this.metadata.length)
                writer.writeBytes(9, this.metadata);
            if (this.intent.length)
                writer.writeString(10, this.intent);
            if (this.generate_response != false)
                writer.writeBool(11, this.generate_response);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WebhookEventRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WebhookEventRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_id = reader.readString();
                        break;
                    case 2:
                        message.customer_id = reader.readString();
                        break;
                    case 3:
                        message.type = reader.readString();
                        break;
                    case 4:
                        message.source = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.social, () => message.social = SocialMediaInfo.deserialize(reader));
                        break;
                    case 6:
                        message.data = reader.readBytes();
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    case 8:
                        message.priority = reader.readDouble();
                        break;
                    case 9:
                        message.metadata = reader.readBytes();
                        break;
                    case 10:
                        message.intent = reader.readString();
                        break;
                    case 11:
                        message.generate_response = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WebhookEventRequest {
            return WebhookEventRequest.deserialize(bytes);
        }
    }
    export class CommentWebhookRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            accountId?: string;
            content?: string;
            platform?: string;
            handle?: string;
            tags?: string[];
            priority?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("accountId" in data && data.accountId != undefined) {
                    this.accountId = data.accountId;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("platform" in data && data.platform != undefined) {
                    this.platform = data.platform;
                }
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
            }
        }
        get accountId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set accountId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get platform() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set platform(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get handle() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set handle(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            accountId?: string;
            content?: string;
            platform?: string;
            handle?: string;
            tags?: string[];
            priority?: number;
        }): CommentWebhookRequest {
            const message = new CommentWebhookRequest({});
            if (data.accountId != null) {
                message.accountId = data.accountId;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.platform != null) {
                message.platform = data.platform;
            }
            if (data.handle != null) {
                message.handle = data.handle;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            return message;
        }
        toObject() {
            const data: {
                accountId?: string;
                content?: string;
                platform?: string;
                handle?: string;
                tags?: string[];
                priority?: number;
            } = {};
            if (this.accountId != null) {
                data.accountId = this.accountId;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.platform != null) {
                data.platform = this.platform;
            }
            if (this.handle != null) {
                data.handle = this.handle;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.accountId.length)
                writer.writeString(1, this.accountId);
            if (this.content.length)
                writer.writeString(2, this.content);
            if (this.platform.length)
                writer.writeString(3, this.platform);
            if (this.handle.length)
                writer.writeString(4, this.handle);
            if (this.tags.length)
                writer.writeRepeatedString(5, this.tags);
            if (this.priority != 0)
                writer.writeDouble(6, this.priority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommentWebhookRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommentWebhookRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.accountId = reader.readString();
                        break;
                    case 2:
                        message.content = reader.readString();
                        break;
                    case 3:
                        message.platform = reader.readString();
                        break;
                    case 4:
                        message.handle = reader.readString();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        message.priority = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommentWebhookRequest {
            return CommentWebhookRequest.deserialize(bytes);
        }
    }
    export class LikeWebhookRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            accountId?: string;
            platform?: string;
            identifier?: string;
            tags?: string[];
            priority?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("accountId" in data && data.accountId != undefined) {
                    this.accountId = data.accountId;
                }
                if ("platform" in data && data.platform != undefined) {
                    this.platform = data.platform;
                }
                if ("identifier" in data && data.identifier != undefined) {
                    this.identifier = data.identifier;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
            }
        }
        get accountId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set accountId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get platform() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set platform(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get identifier() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set identifier(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            accountId?: string;
            platform?: string;
            identifier?: string;
            tags?: string[];
            priority?: number;
        }): LikeWebhookRequest {
            const message = new LikeWebhookRequest({});
            if (data.accountId != null) {
                message.accountId = data.accountId;
            }
            if (data.platform != null) {
                message.platform = data.platform;
            }
            if (data.identifier != null) {
                message.identifier = data.identifier;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            return message;
        }
        toObject() {
            const data: {
                accountId?: string;
                platform?: string;
                identifier?: string;
                tags?: string[];
                priority?: number;
            } = {};
            if (this.accountId != null) {
                data.accountId = this.accountId;
            }
            if (this.platform != null) {
                data.platform = this.platform;
            }
            if (this.identifier != null) {
                data.identifier = this.identifier;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.accountId.length)
                writer.writeString(1, this.accountId);
            if (this.platform.length)
                writer.writeString(2, this.platform);
            if (this.identifier.length)
                writer.writeString(3, this.identifier);
            if (this.tags.length)
                writer.writeRepeatedString(4, this.tags);
            if (this.priority != 0)
                writer.writeDouble(5, this.priority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LikeWebhookRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LikeWebhookRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.accountId = reader.readString();
                        break;
                    case 2:
                        message.platform = reader.readString();
                        break;
                    case 3:
                        message.identifier = reader.readString();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        message.priority = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LikeWebhookRequest {
            return LikeWebhookRequest.deserialize(bytes);
        }
    }
    export class WebhookStatsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            hours?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("hours" in data && data.hours != undefined) {
                    this.hours = data.hours;
                }
            }
        }
        get hours() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set hours(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            hours?: number;
        }): WebhookStatsRequest {
            const message = new WebhookStatsRequest({});
            if (data.hours != null) {
                message.hours = data.hours;
            }
            return message;
        }
        toObject() {
            const data: {
                hours?: number;
            } = {};
            if (this.hours != null) {
                data.hours = this.hours;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hours != 0)
                writer.writeInt32(1, this.hours);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WebhookStatsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WebhookStatsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.hours = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WebhookStatsRequest {
            return WebhookStatsRequest.deserialize(bytes);
        }
    }
    export class WebhookEventByIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            webhookId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("webhookId" in data && data.webhookId != undefined) {
                    this.webhookId = data.webhookId;
                }
            }
        }
        get webhookId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set webhookId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            webhookId?: string;
        }): WebhookEventByIdRequest {
            const message = new WebhookEventByIdRequest({});
            if (data.webhookId != null) {
                message.webhookId = data.webhookId;
            }
            return message;
        }
        toObject() {
            const data: {
                webhookId?: string;
            } = {};
            if (this.webhookId != null) {
                data.webhookId = this.webhookId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.webhookId.length)
                writer.writeString(1, this.webhookId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WebhookEventByIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WebhookEventByIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.webhookId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WebhookEventByIdRequest {
            return WebhookEventByIdRequest.deserialize(bytes);
        }
    }
    export class WebhookEventFilters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            accountId?: string;
            type?: string;
            source?: string;
            status?: string;
            minPriority?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("accountId" in data && data.accountId != undefined) {
                    this.accountId = data.accountId;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("minPriority" in data && data.minPriority != undefined) {
                    this.minPriority = data.minPriority;
                }
            }
        }
        get accountId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set accountId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set source(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get minPriority() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set minPriority(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            accountId?: string;
            type?: string;
            source?: string;
            status?: string;
            minPriority?: number;
        }): WebhookEventFilters {
            const message = new WebhookEventFilters({});
            if (data.accountId != null) {
                message.accountId = data.accountId;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.minPriority != null) {
                message.minPriority = data.minPriority;
            }
            return message;
        }
        toObject() {
            const data: {
                accountId?: string;
                type?: string;
                source?: string;
                status?: string;
                minPriority?: number;
            } = {};
            if (this.accountId != null) {
                data.accountId = this.accountId;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.minPriority != null) {
                data.minPriority = this.minPriority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.accountId.length)
                writer.writeString(1, this.accountId);
            if (this.type.length)
                writer.writeString(2, this.type);
            if (this.source.length)
                writer.writeString(3, this.source);
            if (this.status.length)
                writer.writeString(4, this.status);
            if (this.minPriority != 0)
                writer.writeDouble(5, this.minPriority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WebhookEventFilters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WebhookEventFilters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.accountId = reader.readString();
                        break;
                    case 2:
                        message.type = reader.readString();
                        break;
                    case 3:
                        message.source = reader.readString();
                        break;
                    case 4:
                        message.status = reader.readString();
                        break;
                    case 5:
                        message.minPriority = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WebhookEventFilters {
            return WebhookEventFilters.deserialize(bytes);
        }
    }
    export class ListWebhookEventsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            filters?: WebhookEventFilters;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
            }
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, WebhookEventFilters, 1) as WebhookEventFilters;
        }
        set filters(value: WebhookEventFilters) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_filters() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            filters?: ReturnType<typeof WebhookEventFilters.prototype.toObject>;
        }): ListWebhookEventsRequest {
            const message = new ListWebhookEventsRequest({});
            if (data.filters != null) {
                message.filters = WebhookEventFilters.fromObject(data.filters);
            }
            return message;
        }
        toObject() {
            const data: {
                filters?: ReturnType<typeof WebhookEventFilters.prototype.toObject>;
            } = {};
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_filters)
                writer.writeMessage(1, this.filters, () => this.filters.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListWebhookEventsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListWebhookEventsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.filters, () => message.filters = WebhookEventFilters.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListWebhookEventsRequest {
            return ListWebhookEventsRequest.deserialize(bytes);
        }
    }
    export class UpdateWebhookEventRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            webhookId?: string;
            updateData?: WebhookEventUpdateData;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("webhookId" in data && data.webhookId != undefined) {
                    this.webhookId = data.webhookId;
                }
                if ("updateData" in data && data.updateData != undefined) {
                    this.updateData = data.updateData;
                }
            }
        }
        get webhookId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set webhookId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get updateData() {
            return pb_1.Message.getWrapperField(this, WebhookEventUpdateData, 2) as WebhookEventUpdateData;
        }
        set updateData(value: WebhookEventUpdateData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_updateData() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            webhookId?: string;
            updateData?: ReturnType<typeof WebhookEventUpdateData.prototype.toObject>;
        }): UpdateWebhookEventRequest {
            const message = new UpdateWebhookEventRequest({});
            if (data.webhookId != null) {
                message.webhookId = data.webhookId;
            }
            if (data.updateData != null) {
                message.updateData = WebhookEventUpdateData.fromObject(data.updateData);
            }
            return message;
        }
        toObject() {
            const data: {
                webhookId?: string;
                updateData?: ReturnType<typeof WebhookEventUpdateData.prototype.toObject>;
            } = {};
            if (this.webhookId != null) {
                data.webhookId = this.webhookId;
            }
            if (this.updateData != null) {
                data.updateData = this.updateData.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.webhookId.length)
                writer.writeString(1, this.webhookId);
            if (this.has_updateData)
                writer.writeMessage(2, this.updateData, () => this.updateData.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateWebhookEventRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateWebhookEventRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.webhookId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.updateData, () => message.updateData = WebhookEventUpdateData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateWebhookEventRequest {
            return UpdateWebhookEventRequest.deserialize(bytes);
        }
    }
    export class WebhookEventUpdateData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: string;
            tags?: string[];
            priority?: number;
            metadata?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set metadata(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            status?: string;
            tags?: string[];
            priority?: number;
            metadata?: Uint8Array;
        }): WebhookEventUpdateData {
            const message = new WebhookEventUpdateData({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: string;
                tags?: string[];
                priority?: number;
                metadata?: Uint8Array;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status.length)
                writer.writeString(1, this.status);
            if (this.tags.length)
                writer.writeRepeatedString(2, this.tags);
            if (this.priority != 0)
                writer.writeDouble(3, this.priority);
            if (this.metadata.length)
                writer.writeBytes(4, this.metadata);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WebhookEventUpdateData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WebhookEventUpdateData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.priority = reader.readDouble();
                        break;
                    case 4:
                        message.metadata = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WebhookEventUpdateData {
            return WebhookEventUpdateData.deserialize(bytes);
        }
    }
    export class WebhookAnalyticsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            accountId?: string;
            days?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("accountId" in data && data.accountId != undefined) {
                    this.accountId = data.accountId;
                }
                if ("days" in data && data.days != undefined) {
                    this.days = data.days;
                }
            }
        }
        get accountId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set accountId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get days() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set days(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            accountId?: string;
            days?: number;
        }): WebhookAnalyticsRequest {
            const message = new WebhookAnalyticsRequest({});
            if (data.accountId != null) {
                message.accountId = data.accountId;
            }
            if (data.days != null) {
                message.days = data.days;
            }
            return message;
        }
        toObject() {
            const data: {
                accountId?: string;
                days?: number;
            } = {};
            if (this.accountId != null) {
                data.accountId = this.accountId;
            }
            if (this.days != null) {
                data.days = this.days;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.accountId.length)
                writer.writeString(1, this.accountId);
            if (this.days != 0)
                writer.writeInt32(2, this.days);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WebhookAnalyticsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WebhookAnalyticsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.accountId = reader.readString();
                        break;
                    case 2:
                        message.days = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WebhookAnalyticsRequest {
            return WebhookAnalyticsRequest.deserialize(bytes);
        }
    }
    export class SocialMediaInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            platform?: string;
            handle?: string;
            identifier?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("platform" in data && data.platform != undefined) {
                    this.platform = data.platform;
                }
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
                if ("identifier" in data && data.identifier != undefined) {
                    this.identifier = data.identifier;
                }
            }
        }
        get platform() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set platform(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get handle() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set handle(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get identifier() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set identifier(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            platform?: string;
            handle?: string;
            identifier?: string;
        }): SocialMediaInfo {
            const message = new SocialMediaInfo({});
            if (data.platform != null) {
                message.platform = data.platform;
            }
            if (data.handle != null) {
                message.handle = data.handle;
            }
            if (data.identifier != null) {
                message.identifier = data.identifier;
            }
            return message;
        }
        toObject() {
            const data: {
                platform?: string;
                handle?: string;
                identifier?: string;
            } = {};
            if (this.platform != null) {
                data.platform = this.platform;
            }
            if (this.handle != null) {
                data.handle = this.handle;
            }
            if (this.identifier != null) {
                data.identifier = this.identifier;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.platform.length)
                writer.writeString(1, this.platform);
            if (this.handle.length)
                writer.writeString(2, this.handle);
            if (this.identifier.length)
                writer.writeString(3, this.identifier);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SocialMediaInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SocialMediaInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.platform = reader.readString();
                        break;
                    case 2:
                        message.handle = reader.readString();
                        break;
                    case 3:
                        message.identifier = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SocialMediaInfo {
            return SocialMediaInfo.deserialize(bytes);
        }
    }
    export class WebhookEventData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            content?: string;
            author?: string;
            postId?: string;
            commentId?: string;
            likeId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("author" in data && data.author != undefined) {
                    this.author = data.author;
                }
                if ("postId" in data && data.postId != undefined) {
                    this.postId = data.postId;
                }
                if ("commentId" in data && data.commentId != undefined) {
                    this.commentId = data.commentId;
                }
                if ("likeId" in data && data.likeId != undefined) {
                    this.likeId = data.likeId;
                }
            }
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get author() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set author(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get postId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set postId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get commentId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set commentId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get likeId() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set likeId(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            content?: string;
            author?: string;
            postId?: string;
            commentId?: string;
            likeId?: string;
        }): WebhookEventData {
            const message = new WebhookEventData({});
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.author != null) {
                message.author = data.author;
            }
            if (data.postId != null) {
                message.postId = data.postId;
            }
            if (data.commentId != null) {
                message.commentId = data.commentId;
            }
            if (data.likeId != null) {
                message.likeId = data.likeId;
            }
            return message;
        }
        toObject() {
            const data: {
                content?: string;
                author?: string;
                postId?: string;
                commentId?: string;
                likeId?: string;
            } = {};
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.author != null) {
                data.author = this.author;
            }
            if (this.postId != null) {
                data.postId = this.postId;
            }
            if (this.commentId != null) {
                data.commentId = this.commentId;
            }
            if (this.likeId != null) {
                data.likeId = this.likeId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.content.length)
                writer.writeString(1, this.content);
            if (this.author.length)
                writer.writeString(2, this.author);
            if (this.postId.length)
                writer.writeString(3, this.postId);
            if (this.commentId.length)
                writer.writeString(4, this.commentId);
            if (this.likeId.length)
                writer.writeString(5, this.likeId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WebhookEventData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WebhookEventData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.content = reader.readString();
                        break;
                    case 2:
                        message.author = reader.readString();
                        break;
                    case 3:
                        message.postId = reader.readString();
                        break;
                    case 4:
                        message.commentId = reader.readString();
                        break;
                    case 5:
                        message.likeId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WebhookEventData {
            return WebhookEventData.deserialize(bytes);
        }
    }
    export class WebhookEventResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            webhookId?: string;
            accountId?: string;
            customerId?: string;
            type?: string;
            source?: string;
            social?: SocialMediaInfo;
            data?: WebhookEventData;
            tags?: string[];
            priority?: number;
            intent?: string;
            generateResponse?: boolean;
            status?: string;
            processedAt?: number;
            createdAt?: number;
            success?: boolean;
            processing?: Uint8Array;
            customer?: Uint8Array;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("webhookId" in data && data.webhookId != undefined) {
                    this.webhookId = data.webhookId;
                }
                if ("accountId" in data && data.accountId != undefined) {
                    this.accountId = data.accountId;
                }
                if ("customerId" in data && data.customerId != undefined) {
                    this.customerId = data.customerId;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("social" in data && data.social != undefined) {
                    this.social = data.social;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("intent" in data && data.intent != undefined) {
                    this.intent = data.intent;
                }
                if ("generateResponse" in data && data.generateResponse != undefined) {
                    this.generateResponse = data.generateResponse;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("processedAt" in data && data.processedAt != undefined) {
                    this.processedAt = data.processedAt;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("processing" in data && data.processing != undefined) {
                    this.processing = data.processing;
                }
                if ("customer" in data && data.customer != undefined) {
                    this.customer = data.customer;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get webhookId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set webhookId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get accountId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set accountId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get customerId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set customerId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set source(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get social() {
            return pb_1.Message.getWrapperField(this, SocialMediaInfo, 7) as SocialMediaInfo;
        }
        set social(value: SocialMediaInfo) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_social() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(this, WebhookEventData, 8) as WebhookEventData;
        }
        set data(value: WebhookEventData) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 9, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 9, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get intent() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set intent(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get generateResponse() {
            return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
        }
        set generateResponse(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get processedAt() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set processedAt(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set createdAt(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 16, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 16, value);
        }
        get processing() {
            return pb_1.Message.getFieldWithDefault(this, 17, new Uint8Array(0)) as Uint8Array;
        }
        set processing(value: Uint8Array) {
            pb_1.Message.setField(this, 17, value);
        }
        get customer() {
            return pb_1.Message.getFieldWithDefault(this, 18, new Uint8Array(0)) as Uint8Array;
        }
        set customer(value: Uint8Array) {
            pb_1.Message.setField(this, 18, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        static fromObject(data: {
            id?: string;
            webhookId?: string;
            accountId?: string;
            customerId?: string;
            type?: string;
            source?: string;
            social?: ReturnType<typeof SocialMediaInfo.prototype.toObject>;
            data?: ReturnType<typeof WebhookEventData.prototype.toObject>;
            tags?: string[];
            priority?: number;
            intent?: string;
            generateResponse?: boolean;
            status?: string;
            processedAt?: number;
            createdAt?: number;
            success?: boolean;
            processing?: Uint8Array;
            customer?: Uint8Array;
            message?: string;
        }): WebhookEventResponse {
            const message = new WebhookEventResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.webhookId != null) {
                message.webhookId = data.webhookId;
            }
            if (data.accountId != null) {
                message.accountId = data.accountId;
            }
            if (data.customerId != null) {
                message.customerId = data.customerId;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.social != null) {
                message.social = SocialMediaInfo.fromObject(data.social);
            }
            if (data.data != null) {
                message.data = WebhookEventData.fromObject(data.data);
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (data.intent != null) {
                message.intent = data.intent;
            }
            if (data.generateResponse != null) {
                message.generateResponse = data.generateResponse;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.processedAt != null) {
                message.processedAt = data.processedAt;
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.processing != null) {
                message.processing = data.processing;
            }
            if (data.customer != null) {
                message.customer = data.customer;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                webhookId?: string;
                accountId?: string;
                customerId?: string;
                type?: string;
                source?: string;
                social?: ReturnType<typeof SocialMediaInfo.prototype.toObject>;
                data?: ReturnType<typeof WebhookEventData.prototype.toObject>;
                tags?: string[];
                priority?: number;
                intent?: string;
                generateResponse?: boolean;
                status?: string;
                processedAt?: number;
                createdAt?: number;
                success?: boolean;
                processing?: Uint8Array;
                customer?: Uint8Array;
                message?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.webhookId != null) {
                data.webhookId = this.webhookId;
            }
            if (this.accountId != null) {
                data.accountId = this.accountId;
            }
            if (this.customerId != null) {
                data.customerId = this.customerId;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.social != null) {
                data.social = this.social.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.intent != null) {
                data.intent = this.intent;
            }
            if (this.generateResponse != null) {
                data.generateResponse = this.generateResponse;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.processedAt != null) {
                data.processedAt = this.processedAt;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.processing != null) {
                data.processing = this.processing;
            }
            if (this.customer != null) {
                data.customer = this.customer;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.webhookId.length)
                writer.writeString(2, this.webhookId);
            if (this.accountId.length)
                writer.writeString(3, this.accountId);
            if (this.customerId.length)
                writer.writeString(4, this.customerId);
            if (this.type.length)
                writer.writeString(5, this.type);
            if (this.source.length)
                writer.writeString(6, this.source);
            if (this.has_social)
                writer.writeMessage(7, this.social, () => this.social.serialize(writer));
            if (this.has_data)
                writer.writeMessage(8, this.data, () => this.data.serialize(writer));
            if (this.tags.length)
                writer.writeRepeatedString(9, this.tags);
            if (this.priority != 0)
                writer.writeDouble(10, this.priority);
            if (this.intent.length)
                writer.writeString(11, this.intent);
            if (this.generateResponse != false)
                writer.writeBool(12, this.generateResponse);
            if (this.status.length)
                writer.writeString(13, this.status);
            if (this.processedAt != 0)
                writer.writeUint64(14, this.processedAt);
            if (this.createdAt != 0)
                writer.writeUint64(15, this.createdAt);
            if (this.success != false)
                writer.writeBool(16, this.success);
            if (this.processing.length)
                writer.writeBytes(17, this.processing);
            if (this.customer.length)
                writer.writeBytes(18, this.customer);
            if (this.message.length)
                writer.writeString(19, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WebhookEventResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WebhookEventResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.webhookId = reader.readString();
                        break;
                    case 3:
                        message.accountId = reader.readString();
                        break;
                    case 4:
                        message.customerId = reader.readString();
                        break;
                    case 5:
                        message.type = reader.readString();
                        break;
                    case 6:
                        message.source = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.social, () => message.social = SocialMediaInfo.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.data, () => message.data = WebhookEventData.deserialize(reader));
                        break;
                    case 9:
                        pb_1.Message.addToRepeatedField(message, 9, reader.readString());
                        break;
                    case 10:
                        message.priority = reader.readDouble();
                        break;
                    case 11:
                        message.intent = reader.readString();
                        break;
                    case 12:
                        message.generateResponse = reader.readBool();
                        break;
                    case 13:
                        message.status = reader.readString();
                        break;
                    case 14:
                        message.processedAt = reader.readUint64();
                        break;
                    case 15:
                        message.createdAt = reader.readUint64();
                        break;
                    case 16:
                        message.success = reader.readBool();
                        break;
                    case 17:
                        message.processing = reader.readBytes();
                        break;
                    case 18:
                        message.customer = reader.readBytes();
                        break;
                    case 19:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WebhookEventResponse {
            return WebhookEventResponse.deserialize(bytes);
        }
    }
    export class CommentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            webhookId?: string;
            accountId?: string;
            content?: string;
            platform?: string;
            handle?: string;
            status?: string;
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("webhookId" in data && data.webhookId != undefined) {
                    this.webhookId = data.webhookId;
                }
                if ("accountId" in data && data.accountId != undefined) {
                    this.accountId = data.accountId;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("platform" in data && data.platform != undefined) {
                    this.platform = data.platform;
                }
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get webhookId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set webhookId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get accountId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set accountId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get platform() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set platform(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get handle() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set handle(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: string;
            webhookId?: string;
            accountId?: string;
            content?: string;
            platform?: string;
            handle?: string;
            status?: string;
            success?: boolean;
        }): CommentResponse {
            const message = new CommentResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.webhookId != null) {
                message.webhookId = data.webhookId;
            }
            if (data.accountId != null) {
                message.accountId = data.accountId;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.platform != null) {
                message.platform = data.platform;
            }
            if (data.handle != null) {
                message.handle = data.handle;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                webhookId?: string;
                accountId?: string;
                content?: string;
                platform?: string;
                handle?: string;
                status?: string;
                success?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.webhookId != null) {
                data.webhookId = this.webhookId;
            }
            if (this.accountId != null) {
                data.accountId = this.accountId;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.platform != null) {
                data.platform = this.platform;
            }
            if (this.handle != null) {
                data.handle = this.handle;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.webhookId.length)
                writer.writeString(2, this.webhookId);
            if (this.accountId.length)
                writer.writeString(3, this.accountId);
            if (this.content.length)
                writer.writeString(4, this.content);
            if (this.platform.length)
                writer.writeString(5, this.platform);
            if (this.handle.length)
                writer.writeString(6, this.handle);
            if (this.status.length)
                writer.writeString(7, this.status);
            if (this.success != false)
                writer.writeBool(8, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.webhookId = reader.readString();
                        break;
                    case 3:
                        message.accountId = reader.readString();
                        break;
                    case 4:
                        message.content = reader.readString();
                        break;
                    case 5:
                        message.platform = reader.readString();
                        break;
                    case 6:
                        message.handle = reader.readString();
                        break;
                    case 7:
                        message.status = reader.readString();
                        break;
                    case 8:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommentResponse {
            return CommentResponse.deserialize(bytes);
        }
    }
    export class LikeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            webhookId?: string;
            accountId?: string;
            platform?: string;
            identifier?: string;
            status?: string;
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("webhookId" in data && data.webhookId != undefined) {
                    this.webhookId = data.webhookId;
                }
                if ("accountId" in data && data.accountId != undefined) {
                    this.accountId = data.accountId;
                }
                if ("platform" in data && data.platform != undefined) {
                    this.platform = data.platform;
                }
                if ("identifier" in data && data.identifier != undefined) {
                    this.identifier = data.identifier;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get webhookId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set webhookId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get accountId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set accountId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get platform() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set platform(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get identifier() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set identifier(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            id?: string;
            webhookId?: string;
            accountId?: string;
            platform?: string;
            identifier?: string;
            status?: string;
            success?: boolean;
        }): LikeResponse {
            const message = new LikeResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.webhookId != null) {
                message.webhookId = data.webhookId;
            }
            if (data.accountId != null) {
                message.accountId = data.accountId;
            }
            if (data.platform != null) {
                message.platform = data.platform;
            }
            if (data.identifier != null) {
                message.identifier = data.identifier;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                webhookId?: string;
                accountId?: string;
                platform?: string;
                identifier?: string;
                status?: string;
                success?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.webhookId != null) {
                data.webhookId = this.webhookId;
            }
            if (this.accountId != null) {
                data.accountId = this.accountId;
            }
            if (this.platform != null) {
                data.platform = this.platform;
            }
            if (this.identifier != null) {
                data.identifier = this.identifier;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.webhookId.length)
                writer.writeString(2, this.webhookId);
            if (this.accountId.length)
                writer.writeString(3, this.accountId);
            if (this.platform.length)
                writer.writeString(4, this.platform);
            if (this.identifier.length)
                writer.writeString(5, this.identifier);
            if (this.status.length)
                writer.writeString(6, this.status);
            if (this.success != false)
                writer.writeBool(7, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LikeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LikeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.webhookId = reader.readString();
                        break;
                    case 3:
                        message.accountId = reader.readString();
                        break;
                    case 4:
                        message.platform = reader.readString();
                        break;
                    case 5:
                        message.identifier = reader.readString();
                        break;
                    case 6:
                        message.status = reader.readString();
                        break;
                    case 7:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LikeResponse {
            return LikeResponse.deserialize(bytes);
        }
    }
    export class WebhookHealthResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            health?: Uint8Array;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("health" in data && data.health != undefined) {
                    this.health = data.health;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get health() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set health(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            health?: Uint8Array;
            message?: string;
        }): WebhookHealthResponse {
            const message = new WebhookHealthResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.health != null) {
                message.health = data.health;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                health?: Uint8Array;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.health != null) {
                data.health = this.health;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.health.length)
                writer.writeBytes(2, this.health);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WebhookHealthResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WebhookHealthResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.health = reader.readBytes();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WebhookHealthResponse {
            return WebhookHealthResponse.deserialize(bytes);
        }
    }
    export class WebhookStatsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            stats?: Uint8Array;
            timePeriod?: string;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("stats" in data && data.stats != undefined) {
                    this.stats = data.stats;
                }
                if ("timePeriod" in data && data.timePeriod != undefined) {
                    this.timePeriod = data.timePeriod;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get stats() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set stats(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get timePeriod() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set timePeriod(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            stats?: Uint8Array;
            timePeriod?: string;
            message?: string;
        }): WebhookStatsResponse {
            const message = new WebhookStatsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.stats != null) {
                message.stats = data.stats;
            }
            if (data.timePeriod != null) {
                message.timePeriod = data.timePeriod;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                stats?: Uint8Array;
                timePeriod?: string;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.stats != null) {
                data.stats = this.stats;
            }
            if (this.timePeriod != null) {
                data.timePeriod = this.timePeriod;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.stats.length)
                writer.writeBytes(2, this.stats);
            if (this.timePeriod.length)
                writer.writeString(3, this.timePeriod);
            if (this.message.length)
                writer.writeString(4, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WebhookStatsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WebhookStatsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.stats = reader.readBytes();
                        break;
                    case 3:
                        message.timePeriod = reader.readString();
                        break;
                    case 4:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WebhookStatsResponse {
            return WebhookStatsResponse.deserialize(bytes);
        }
    }
    export class WebhookEventListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            webhooks?: WebhookEventResponse[];
            count?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("webhooks" in data && data.webhooks != undefined) {
                    this.webhooks = data.webhooks;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get webhooks() {
            return pb_1.Message.getRepeatedWrapperField(this, WebhookEventResponse, 1) as WebhookEventResponse[];
        }
        set webhooks(value: WebhookEventResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            webhooks?: ReturnType<typeof WebhookEventResponse.prototype.toObject>[];
            count?: number;
            message?: string;
        }): WebhookEventListResponse {
            const message = new WebhookEventListResponse({});
            if (data.webhooks != null) {
                message.webhooks = data.webhooks.map(item => WebhookEventResponse.fromObject(item));
            }
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                webhooks?: ReturnType<typeof WebhookEventResponse.prototype.toObject>[];
                count?: number;
                message?: string;
            } = {};
            if (this.webhooks != null) {
                data.webhooks = this.webhooks.map((item: WebhookEventResponse) => item.toObject());
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.webhooks.length)
                writer.writeRepeatedMessage(1, this.webhooks, (item: WebhookEventResponse) => item.serialize(writer));
            if (this.count != 0)
                writer.writeInt32(2, this.count);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WebhookEventListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WebhookEventListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.webhooks, () => pb_1.Message.addToRepeatedWrapperField(message, 1, WebhookEventResponse.deserialize(reader), WebhookEventResponse));
                        break;
                    case 2:
                        message.count = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WebhookEventListResponse {
            return WebhookEventListResponse.deserialize(bytes);
        }
    }
    export class WebhookAnalyticsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            analytics?: Uint8Array;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("analytics" in data && data.analytics != undefined) {
                    this.analytics = data.analytics;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get analytics() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set analytics(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            analytics?: Uint8Array;
            message?: string;
        }): WebhookAnalyticsResponse {
            const message = new WebhookAnalyticsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.analytics != null) {
                message.analytics = data.analytics;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                analytics?: Uint8Array;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.analytics != null) {
                data.analytics = this.analytics;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.analytics.length)
                writer.writeBytes(2, this.analytics);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WebhookAnalyticsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WebhookAnalyticsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.analytics = reader.readBytes();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WebhookAnalyticsResponse {
            return WebhookAnalyticsResponse.deserialize(bytes);
        }
    }
    export class SuccessResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): SuccessResponse {
            const message = new SuccessResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SuccessResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SuccessResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SuccessResponse {
            return SuccessResponse.deserialize(bytes);
        }
    }
    export class GenerateResponseRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            accountId?: string;
            customerId?: string;
            apiKey?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("accountId" in data && data.accountId != undefined) {
                    this.accountId = data.accountId;
                }
                if ("customerId" in data && data.customerId != undefined) {
                    this.customerId = data.customerId;
                }
                if ("apiKey" in data && data.apiKey != undefined) {
                    this.apiKey = data.apiKey;
                }
            }
        }
        get accountId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set accountId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get customerId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set customerId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get apiKey() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set apiKey(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            accountId?: string;
            customerId?: string;
            apiKey?: string;
        }): GenerateResponseRequest {
            const message = new GenerateResponseRequest({});
            if (data.accountId != null) {
                message.accountId = data.accountId;
            }
            if (data.customerId != null) {
                message.customerId = data.customerId;
            }
            if (data.apiKey != null) {
                message.apiKey = data.apiKey;
            }
            return message;
        }
        toObject() {
            const data: {
                accountId?: string;
                customerId?: string;
                apiKey?: string;
            } = {};
            if (this.accountId != null) {
                data.accountId = this.accountId;
            }
            if (this.customerId != null) {
                data.customerId = this.customerId;
            }
            if (this.apiKey != null) {
                data.apiKey = this.apiKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.accountId.length)
                writer.writeString(1, this.accountId);
            if (this.customerId.length)
                writer.writeString(2, this.customerId);
            if (this.apiKey.length)
                writer.writeString(3, this.apiKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenerateResponseRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenerateResponseRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.accountId = reader.readString();
                        break;
                    case 2:
                        message.customerId = reader.readString();
                        break;
                    case 3:
                        message.apiKey = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenerateResponseRequest {
            return GenerateResponseRequest.deserialize(bytes);
        }
    }
    export class GenerateResponseResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            response?: Uint8Array;
            analysis?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
                if ("analysis" in data && data.analysis != undefined) {
                    this.analysis = data.analysis;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get response() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set response(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get analysis() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set analysis(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            response?: Uint8Array;
            analysis?: Uint8Array;
        }): GenerateResponseResponse {
            const message = new GenerateResponseResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.response != null) {
                message.response = data.response;
            }
            if (data.analysis != null) {
                message.analysis = data.analysis;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                response?: Uint8Array;
                analysis?: Uint8Array;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.response != null) {
                data.response = this.response;
            }
            if (this.analysis != null) {
                data.analysis = this.analysis;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.response.length)
                writer.writeBytes(3, this.response);
            if (this.analysis.length)
                writer.writeBytes(4, this.analysis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenerateResponseResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenerateResponseResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.response = reader.readBytes();
                        break;
                    case 4:
                        message.analysis = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenerateResponseResponse {
            return GenerateResponseResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedCustomerEngagementServiceService {
        static definition = {
            processWebhook: {
                path: "/tmq.CustomerEngagementService/processWebhook",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WebhookEventRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WebhookEventRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WebhookEventResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WebhookEventResponse.deserialize(new Uint8Array(bytes))
            },
            processComment: {
                path: "/tmq.CustomerEngagementService/processComment",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CommentWebhookRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CommentWebhookRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CommentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CommentResponse.deserialize(new Uint8Array(bytes))
            },
            processLike: {
                path: "/tmq.CustomerEngagementService/processLike",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LikeWebhookRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LikeWebhookRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LikeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LikeResponse.deserialize(new Uint8Array(bytes))
            },
            processWebhookWithValidation: {
                path: "/tmq.CustomerEngagementService/processWebhookWithValidation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WebhookEventRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WebhookEventRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WebhookEventResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WebhookEventResponse.deserialize(new Uint8Array(bytes))
            },
            getWebhookHealth: {
                path: "/tmq.CustomerEngagementService/getWebhookHealth",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WebhookEventRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WebhookEventRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WebhookHealthResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WebhookHealthResponse.deserialize(new Uint8Array(bytes))
            },
            getWebhookStats: {
                path: "/tmq.CustomerEngagementService/getWebhookStats",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WebhookStatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WebhookStatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WebhookStatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WebhookStatsResponse.deserialize(new Uint8Array(bytes))
            },
            getWebhookEvent: {
                path: "/tmq.CustomerEngagementService/getWebhookEvent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WebhookEventByIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WebhookEventByIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WebhookEventResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WebhookEventResponse.deserialize(new Uint8Array(bytes))
            },
            listWebhookEvents: {
                path: "/tmq.CustomerEngagementService/listWebhookEvents",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListWebhookEventsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListWebhookEventsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WebhookEventListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WebhookEventListResponse.deserialize(new Uint8Array(bytes))
            },
            updateWebhookEvent: {
                path: "/tmq.CustomerEngagementService/updateWebhookEvent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateWebhookEventRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateWebhookEventRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WebhookEventResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WebhookEventResponse.deserialize(new Uint8Array(bytes))
            },
            getWebhookAnalytics: {
                path: "/tmq.CustomerEngagementService/getWebhookAnalytics",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WebhookAnalyticsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WebhookAnalyticsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WebhookAnalyticsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WebhookAnalyticsResponse.deserialize(new Uint8Array(bytes))
            },
            generateResponse: {
                path: "/tmq.CustomerEngagementService/generateResponse",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GenerateResponseRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GenerateResponseRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GenerateResponseResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GenerateResponseResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract processWebhook(call: grpc_1.ServerUnaryCall<WebhookEventRequest, WebhookEventResponse>, callback: grpc_1.sendUnaryData<WebhookEventResponse>): void;
        abstract processComment(call: grpc_1.ServerUnaryCall<CommentWebhookRequest, CommentResponse>, callback: grpc_1.sendUnaryData<CommentResponse>): void;
        abstract processLike(call: grpc_1.ServerUnaryCall<LikeWebhookRequest, LikeResponse>, callback: grpc_1.sendUnaryData<LikeResponse>): void;
        abstract processWebhookWithValidation(call: grpc_1.ServerUnaryCall<WebhookEventRequest, WebhookEventResponse>, callback: grpc_1.sendUnaryData<WebhookEventResponse>): void;
        abstract getWebhookHealth(call: grpc_1.ServerUnaryCall<WebhookEventRequest, WebhookHealthResponse>, callback: grpc_1.sendUnaryData<WebhookHealthResponse>): void;
        abstract getWebhookStats(call: grpc_1.ServerUnaryCall<WebhookStatsRequest, WebhookStatsResponse>, callback: grpc_1.sendUnaryData<WebhookStatsResponse>): void;
        abstract getWebhookEvent(call: grpc_1.ServerUnaryCall<WebhookEventByIdRequest, WebhookEventResponse>, callback: grpc_1.sendUnaryData<WebhookEventResponse>): void;
        abstract listWebhookEvents(call: grpc_1.ServerUnaryCall<ListWebhookEventsRequest, WebhookEventListResponse>, callback: grpc_1.sendUnaryData<WebhookEventListResponse>): void;
        abstract updateWebhookEvent(call: grpc_1.ServerUnaryCall<UpdateWebhookEventRequest, WebhookEventResponse>, callback: grpc_1.sendUnaryData<WebhookEventResponse>): void;
        abstract getWebhookAnalytics(call: grpc_1.ServerUnaryCall<WebhookAnalyticsRequest, WebhookAnalyticsResponse>, callback: grpc_1.sendUnaryData<WebhookAnalyticsResponse>): void;
        abstract generateResponse(call: grpc_1.ServerUnaryCall<GenerateResponseRequest, GenerateResponseResponse>, callback: grpc_1.sendUnaryData<GenerateResponseResponse>): void;
    }
    export class CustomerEngagementServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedCustomerEngagementServiceService.definition, "CustomerEngagementService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        processWebhook: GrpcUnaryServiceInterface<WebhookEventRequest, WebhookEventResponse> = (message: WebhookEventRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WebhookEventResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WebhookEventResponse>, callback?: grpc_1.requestCallback<WebhookEventResponse>): grpc_1.ClientUnaryCall => {
            return super.processWebhook(message, metadata, options, callback);
        };
        processComment: GrpcUnaryServiceInterface<CommentWebhookRequest, CommentResponse> = (message: CommentWebhookRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CommentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CommentResponse>, callback?: grpc_1.requestCallback<CommentResponse>): grpc_1.ClientUnaryCall => {
            return super.processComment(message, metadata, options, callback);
        };
        processLike: GrpcUnaryServiceInterface<LikeWebhookRequest, LikeResponse> = (message: LikeWebhookRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LikeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LikeResponse>, callback?: grpc_1.requestCallback<LikeResponse>): grpc_1.ClientUnaryCall => {
            return super.processLike(message, metadata, options, callback);
        };
        processWebhookWithValidation: GrpcUnaryServiceInterface<WebhookEventRequest, WebhookEventResponse> = (message: WebhookEventRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WebhookEventResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WebhookEventResponse>, callback?: grpc_1.requestCallback<WebhookEventResponse>): grpc_1.ClientUnaryCall => {
            return super.processWebhookWithValidation(message, metadata, options, callback);
        };
        getWebhookHealth: GrpcUnaryServiceInterface<WebhookEventRequest, WebhookHealthResponse> = (message: WebhookEventRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WebhookHealthResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WebhookHealthResponse>, callback?: grpc_1.requestCallback<WebhookHealthResponse>): grpc_1.ClientUnaryCall => {
            return super.getWebhookHealth(message, metadata, options, callback);
        };
        getWebhookStats: GrpcUnaryServiceInterface<WebhookStatsRequest, WebhookStatsResponse> = (message: WebhookStatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WebhookStatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WebhookStatsResponse>, callback?: grpc_1.requestCallback<WebhookStatsResponse>): grpc_1.ClientUnaryCall => {
            return super.getWebhookStats(message, metadata, options, callback);
        };
        getWebhookEvent: GrpcUnaryServiceInterface<WebhookEventByIdRequest, WebhookEventResponse> = (message: WebhookEventByIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WebhookEventResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WebhookEventResponse>, callback?: grpc_1.requestCallback<WebhookEventResponse>): grpc_1.ClientUnaryCall => {
            return super.getWebhookEvent(message, metadata, options, callback);
        };
        listWebhookEvents: GrpcUnaryServiceInterface<ListWebhookEventsRequest, WebhookEventListResponse> = (message: ListWebhookEventsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WebhookEventListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WebhookEventListResponse>, callback?: grpc_1.requestCallback<WebhookEventListResponse>): grpc_1.ClientUnaryCall => {
            return super.listWebhookEvents(message, metadata, options, callback);
        };
        updateWebhookEvent: GrpcUnaryServiceInterface<UpdateWebhookEventRequest, WebhookEventResponse> = (message: UpdateWebhookEventRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WebhookEventResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WebhookEventResponse>, callback?: grpc_1.requestCallback<WebhookEventResponse>): grpc_1.ClientUnaryCall => {
            return super.updateWebhookEvent(message, metadata, options, callback);
        };
        getWebhookAnalytics: GrpcUnaryServiceInterface<WebhookAnalyticsRequest, WebhookAnalyticsResponse> = (message: WebhookAnalyticsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WebhookAnalyticsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WebhookAnalyticsResponse>, callback?: grpc_1.requestCallback<WebhookAnalyticsResponse>): grpc_1.ClientUnaryCall => {
            return super.getWebhookAnalytics(message, metadata, options, callback);
        };
        generateResponse: GrpcUnaryServiceInterface<GenerateResponseRequest, GenerateResponseResponse> = (message: GenerateResponseRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GenerateResponseResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GenerateResponseResponse>, callback?: grpc_1.requestCallback<GenerateResponseResponse>): grpc_1.ClientUnaryCall => {
            return super.generateResponse(message, metadata, options, callback);
        };
    }
}
