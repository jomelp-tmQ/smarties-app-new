/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: tmq/customBilling.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class AuthResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            url?: string;
            apiKey?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("apiKey" in data && data.apiKey != undefined) {
                    this.apiKey = data.apiKey;
                }
            }
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get apiKey() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set apiKey(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            url?: string;
            apiKey?: string;
        }): AuthResponse {
            const message = new AuthResponse({});
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.apiKey != null) {
                message.apiKey = data.apiKey;
            }
            return message;
        }
        toObject() {
            const data: {
                url?: string;
                apiKey?: string;
            } = {};
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.apiKey != null) {
                data.apiKey = this.apiKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.url.length)
                writer.writeString(1, this.url);
            if (this.apiKey.length)
                writer.writeString(2, this.apiKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.url = reader.readString();
                        break;
                    case 2:
                        message.apiKey = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthResponse {
            return AuthResponse.deserialize(bytes);
        }
    }
    export class AuthRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): AuthRequest {
            const message = new AuthRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthRequest {
            return AuthRequest.deserialize(bytes);
        }
    }
    export class FetchInvoicesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            lastBasis?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("lastBasis" in data && data.lastBasis != undefined) {
                    this.lastBasis = data.lastBasis;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get lastBasis() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set lastBasis(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            userId?: string;
            lastBasis?: number;
        }): FetchInvoicesRequest {
            const message = new FetchInvoicesRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.lastBasis != null) {
                message.lastBasis = data.lastBasis;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                lastBasis?: number;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.lastBasis != null) {
                data.lastBasis = this.lastBasis;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.lastBasis != 0)
                writer.writeInt64(2, this.lastBasis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchInvoicesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchInvoicesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.lastBasis = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchInvoicesRequest {
            return FetchInvoicesRequest.deserialize(bytes);
        }
    }
    export class Invoice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            invoiceId?: string;
            userId?: string;
            amountDue?: number;
            amountPaid?: number;
            createdAt?: number;
            currency?: string;
            status?: string;
            customerId?: string;
            invoiceUrl?: string;
            invoicePdf?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("invoiceId" in data && data.invoiceId != undefined) {
                    this.invoiceId = data.invoiceId;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("amountDue" in data && data.amountDue != undefined) {
                    this.amountDue = data.amountDue;
                }
                if ("amountPaid" in data && data.amountPaid != undefined) {
                    this.amountPaid = data.amountPaid;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("currency" in data && data.currency != undefined) {
                    this.currency = data.currency;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("customerId" in data && data.customerId != undefined) {
                    this.customerId = data.customerId;
                }
                if ("invoiceUrl" in data && data.invoiceUrl != undefined) {
                    this.invoiceUrl = data.invoiceUrl;
                }
                if ("invoicePdf" in data && data.invoicePdf != undefined) {
                    this.invoicePdf = data.invoicePdf;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get invoiceId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set invoiceId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get amountDue() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set amountDue(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get amountPaid() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set amountPaid(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set createdAt(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get currency() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set currency(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get customerId() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set customerId(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get invoiceUrl() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set invoiceUrl(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get invoicePdf() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set invoicePdf(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            id?: string;
            invoiceId?: string;
            userId?: string;
            amountDue?: number;
            amountPaid?: number;
            createdAt?: number;
            currency?: string;
            status?: string;
            customerId?: string;
            invoiceUrl?: string;
            invoicePdf?: string;
        }): Invoice {
            const message = new Invoice({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.invoiceId != null) {
                message.invoiceId = data.invoiceId;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.amountDue != null) {
                message.amountDue = data.amountDue;
            }
            if (data.amountPaid != null) {
                message.amountPaid = data.amountPaid;
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.currency != null) {
                message.currency = data.currency;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.customerId != null) {
                message.customerId = data.customerId;
            }
            if (data.invoiceUrl != null) {
                message.invoiceUrl = data.invoiceUrl;
            }
            if (data.invoicePdf != null) {
                message.invoicePdf = data.invoicePdf;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                invoiceId?: string;
                userId?: string;
                amountDue?: number;
                amountPaid?: number;
                createdAt?: number;
                currency?: string;
                status?: string;
                customerId?: string;
                invoiceUrl?: string;
                invoicePdf?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.invoiceId != null) {
                data.invoiceId = this.invoiceId;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.amountDue != null) {
                data.amountDue = this.amountDue;
            }
            if (this.amountPaid != null) {
                data.amountPaid = this.amountPaid;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.currency != null) {
                data.currency = this.currency;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.customerId != null) {
                data.customerId = this.customerId;
            }
            if (this.invoiceUrl != null) {
                data.invoiceUrl = this.invoiceUrl;
            }
            if (this.invoicePdf != null) {
                data.invoicePdf = this.invoicePdf;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.invoiceId.length)
                writer.writeString(2, this.invoiceId);
            if (this.userId.length)
                writer.writeString(3, this.userId);
            if (this.amountDue != 0)
                writer.writeInt32(4, this.amountDue);
            if (this.amountPaid != 0)
                writer.writeInt32(5, this.amountPaid);
            if (this.createdAt != 0)
                writer.writeInt64(6, this.createdAt);
            if (this.currency.length)
                writer.writeString(7, this.currency);
            if (this.status.length)
                writer.writeString(8, this.status);
            if (this.customerId.length)
                writer.writeString(9, this.customerId);
            if (this.invoiceUrl.length)
                writer.writeString(10, this.invoiceUrl);
            if (this.invoicePdf.length)
                writer.writeString(11, this.invoicePdf);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Invoice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Invoice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.invoiceId = reader.readString();
                        break;
                    case 3:
                        message.userId = reader.readString();
                        break;
                    case 4:
                        message.amountDue = reader.readInt32();
                        break;
                    case 5:
                        message.amountPaid = reader.readInt32();
                        break;
                    case 6:
                        message.createdAt = reader.readInt64();
                        break;
                    case 7:
                        message.currency = reader.readString();
                        break;
                    case 8:
                        message.status = reader.readString();
                        break;
                    case 9:
                        message.customerId = reader.readString();
                        break;
                    case 10:
                        message.invoiceUrl = reader.readString();
                        break;
                    case 11:
                        message.invoicePdf = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Invoice {
            return Invoice.deserialize(bytes);
        }
    }
    export class fetchSubscriptionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            userId?: string;
        }): fetchSubscriptionRequest {
            const message = new fetchSubscriptionRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): fetchSubscriptionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new fetchSubscriptionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): fetchSubscriptionRequest {
            return fetchSubscriptionRequest.deserialize(bytes);
        }
    }
    export class fetchSubscriptionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            userId?: string;
            createdAt?: number;
            updatedAt?: number;
            status?: string;
            customerId?: string;
            subscriptionType?: string;
            termBillingCycle?: string;
            termCurrency?: string;
            termPrice?: number;
            referenceId?: string;
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("customerId" in data && data.customerId != undefined) {
                    this.customerId = data.customerId;
                }
                if ("subscriptionType" in data && data.subscriptionType != undefined) {
                    this.subscriptionType = data.subscriptionType;
                }
                if ("termBillingCycle" in data && data.termBillingCycle != undefined) {
                    this.termBillingCycle = data.termBillingCycle;
                }
                if ("termCurrency" in data && data.termCurrency != undefined) {
                    this.termCurrency = data.termCurrency;
                }
                if ("termPrice" in data && data.termPrice != undefined) {
                    this.termPrice = data.termPrice;
                }
                if ("referenceId" in data && data.referenceId != undefined) {
                    this.referenceId = data.referenceId;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set createdAt(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get updatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set updatedAt(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get customerId() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set customerId(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get subscriptionType() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set subscriptionType(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get termBillingCycle() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set termBillingCycle(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get termCurrency() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set termCurrency(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get termPrice() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set termPrice(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get referenceId() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set referenceId(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 13, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        static fromObject(data: {
            id?: string;
            userId?: string;
            createdAt?: number;
            updatedAt?: number;
            status?: string;
            customerId?: string;
            subscriptionType?: string;
            termBillingCycle?: string;
            termCurrency?: string;
            termPrice?: number;
            referenceId?: string;
            success?: boolean;
            message?: string;
        }): fetchSubscriptionResponse {
            const message = new fetchSubscriptionResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.updatedAt != null) {
                message.updatedAt = data.updatedAt;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.customerId != null) {
                message.customerId = data.customerId;
            }
            if (data.subscriptionType != null) {
                message.subscriptionType = data.subscriptionType;
            }
            if (data.termBillingCycle != null) {
                message.termBillingCycle = data.termBillingCycle;
            }
            if (data.termCurrency != null) {
                message.termCurrency = data.termCurrency;
            }
            if (data.termPrice != null) {
                message.termPrice = data.termPrice;
            }
            if (data.referenceId != null) {
                message.referenceId = data.referenceId;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                userId?: string;
                createdAt?: number;
                updatedAt?: number;
                status?: string;
                customerId?: string;
                subscriptionType?: string;
                termBillingCycle?: string;
                termCurrency?: string;
                termPrice?: number;
                referenceId?: string;
                success?: boolean;
                message?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.customerId != null) {
                data.customerId = this.customerId;
            }
            if (this.subscriptionType != null) {
                data.subscriptionType = this.subscriptionType;
            }
            if (this.termBillingCycle != null) {
                data.termBillingCycle = this.termBillingCycle;
            }
            if (this.termCurrency != null) {
                data.termCurrency = this.termCurrency;
            }
            if (this.termPrice != null) {
                data.termPrice = this.termPrice;
            }
            if (this.referenceId != null) {
                data.referenceId = this.referenceId;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.userId.length)
                writer.writeString(2, this.userId);
            if (this.createdAt != 0)
                writer.writeInt64(4, this.createdAt);
            if (this.updatedAt != 0)
                writer.writeInt64(5, this.updatedAt);
            if (this.status.length)
                writer.writeString(6, this.status);
            if (this.customerId.length)
                writer.writeString(7, this.customerId);
            if (this.subscriptionType.length)
                writer.writeString(8, this.subscriptionType);
            if (this.termBillingCycle.length)
                writer.writeString(9, this.termBillingCycle);
            if (this.termCurrency.length)
                writer.writeString(10, this.termCurrency);
            if (this.termPrice != 0)
                writer.writeInt32(11, this.termPrice);
            if (this.referenceId.length)
                writer.writeString(12, this.referenceId);
            if (this.success != false)
                writer.writeBool(13, this.success);
            if (this.message.length)
                writer.writeString(14, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): fetchSubscriptionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new fetchSubscriptionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.userId = reader.readString();
                        break;
                    case 4:
                        message.createdAt = reader.readInt64();
                        break;
                    case 5:
                        message.updatedAt = reader.readInt64();
                        break;
                    case 6:
                        message.status = reader.readString();
                        break;
                    case 7:
                        message.customerId = reader.readString();
                        break;
                    case 8:
                        message.subscriptionType = reader.readString();
                        break;
                    case 9:
                        message.termBillingCycle = reader.readString();
                        break;
                    case 10:
                        message.termCurrency = reader.readString();
                        break;
                    case 11:
                        message.termPrice = reader.readInt32();
                        break;
                    case 12:
                        message.referenceId = reader.readString();
                        break;
                    case 13:
                        message.success = reader.readBool();
                        break;
                    case 14:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): fetchSubscriptionResponse {
            return fetchSubscriptionResponse.deserialize(bytes);
        }
    }
    export class FetchInvoicesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            invoices?: Invoice[];
            lastBasis?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invoices" in data && data.invoices != undefined) {
                    this.invoices = data.invoices;
                }
                if ("lastBasis" in data && data.lastBasis != undefined) {
                    this.lastBasis = data.lastBasis;
                }
            }
        }
        get invoices() {
            return pb_1.Message.getRepeatedWrapperField(this, Invoice, 1) as Invoice[];
        }
        set invoices(value: Invoice[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get lastBasis() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set lastBasis(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            invoices?: ReturnType<typeof Invoice.prototype.toObject>[];
            lastBasis?: number;
        }): FetchInvoicesResponse {
            const message = new FetchInvoicesResponse({});
            if (data.invoices != null) {
                message.invoices = data.invoices.map(item => Invoice.fromObject(item));
            }
            if (data.lastBasis != null) {
                message.lastBasis = data.lastBasis;
            }
            return message;
        }
        toObject() {
            const data: {
                invoices?: ReturnType<typeof Invoice.prototype.toObject>[];
                lastBasis?: number;
            } = {};
            if (this.invoices != null) {
                data.invoices = this.invoices.map((item: Invoice) => item.toObject());
            }
            if (this.lastBasis != null) {
                data.lastBasis = this.lastBasis;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invoices.length)
                writer.writeRepeatedMessage(1, this.invoices, (item: Invoice) => item.serialize(writer));
            if (this.lastBasis != 0)
                writer.writeInt64(2, this.lastBasis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchInvoicesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchInvoicesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.invoices, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Invoice.deserialize(reader), Invoice));
                        break;
                    case 2:
                        message.lastBasis = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchInvoicesResponse {
            return FetchInvoicesResponse.deserialize(bytes);
        }
    }
    export class fetchpaymentMethodRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            userId?: string;
        }): fetchpaymentMethodRequest {
            const message = new fetchpaymentMethodRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): fetchpaymentMethodRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new fetchpaymentMethodRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): fetchpaymentMethodRequest {
            return fetchpaymentMethodRequest.deserialize(bytes);
        }
    }
    export class fetchpaymentMethodResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            userId?: string;
            type?: string;
            cardBrand?: string;
            cardLast4?: string;
            cardExpMonth?: number;
            cardExpYear?: number;
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("cardBrand" in data && data.cardBrand != undefined) {
                    this.cardBrand = data.cardBrand;
                }
                if ("cardLast4" in data && data.cardLast4 != undefined) {
                    this.cardLast4 = data.cardLast4;
                }
                if ("cardExpMonth" in data && data.cardExpMonth != undefined) {
                    this.cardExpMonth = data.cardExpMonth;
                }
                if ("cardExpYear" in data && data.cardExpYear != undefined) {
                    this.cardExpYear = data.cardExpYear;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get cardBrand() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set cardBrand(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get cardLast4() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set cardLast4(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get cardExpMonth() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set cardExpMonth(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get cardExpYear() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set cardExpYear(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            id?: string;
            userId?: string;
            type?: string;
            cardBrand?: string;
            cardLast4?: string;
            cardExpMonth?: number;
            cardExpYear?: number;
            success?: boolean;
            message?: string;
        }): fetchpaymentMethodResponse {
            const message = new fetchpaymentMethodResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.cardBrand != null) {
                message.cardBrand = data.cardBrand;
            }
            if (data.cardLast4 != null) {
                message.cardLast4 = data.cardLast4;
            }
            if (data.cardExpMonth != null) {
                message.cardExpMonth = data.cardExpMonth;
            }
            if (data.cardExpYear != null) {
                message.cardExpYear = data.cardExpYear;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                userId?: string;
                type?: string;
                cardBrand?: string;
                cardLast4?: string;
                cardExpMonth?: number;
                cardExpYear?: number;
                success?: boolean;
                message?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.cardBrand != null) {
                data.cardBrand = this.cardBrand;
            }
            if (this.cardLast4 != null) {
                data.cardLast4 = this.cardLast4;
            }
            if (this.cardExpMonth != null) {
                data.cardExpMonth = this.cardExpMonth;
            }
            if (this.cardExpYear != null) {
                data.cardExpYear = this.cardExpYear;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.userId.length)
                writer.writeString(2, this.userId);
            if (this.type.length)
                writer.writeString(3, this.type);
            if (this.cardBrand.length)
                writer.writeString(4, this.cardBrand);
            if (this.cardLast4.length)
                writer.writeString(5, this.cardLast4);
            if (this.cardExpMonth != 0)
                writer.writeInt32(6, this.cardExpMonth);
            if (this.cardExpYear != 0)
                writer.writeInt32(7, this.cardExpYear);
            if (this.success != false)
                writer.writeBool(8, this.success);
            if (this.message.length)
                writer.writeString(9, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): fetchpaymentMethodResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new fetchpaymentMethodResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.userId = reader.readString();
                        break;
                    case 3:
                        message.type = reader.readString();
                        break;
                    case 4:
                        message.cardBrand = reader.readString();
                        break;
                    case 5:
                        message.cardLast4 = reader.readString();
                        break;
                    case 6:
                        message.cardExpMonth = reader.readInt32();
                        break;
                    case 7:
                        message.cardExpYear = reader.readInt32();
                        break;
                    case 8:
                        message.success = reader.readBool();
                        break;
                    case 9:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): fetchpaymentMethodResponse {
            return fetchpaymentMethodResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedCustomBillingServiceService {
        static definition = {
            fetchAuth: {
                path: "/tmq.CustomBillingService/fetchAuth",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AuthRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AuthRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AuthResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AuthResponse.deserialize(new Uint8Array(bytes))
            },
            fetchInvoices: {
                path: "/tmq.CustomBillingService/fetchInvoices",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FetchInvoicesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FetchInvoicesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FetchInvoicesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FetchInvoicesResponse.deserialize(new Uint8Array(bytes))
            },
            fetchSubscription: {
                path: "/tmq.CustomBillingService/fetchSubscription",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: fetchSubscriptionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => fetchSubscriptionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: fetchSubscriptionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => fetchSubscriptionResponse.deserialize(new Uint8Array(bytes))
            },
            fetchPaymentMethod: {
                path: "/tmq.CustomBillingService/fetchPaymentMethod",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: fetchpaymentMethodRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => fetchpaymentMethodRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: fetchpaymentMethodResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => fetchpaymentMethodResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract fetchAuth(call: grpc_1.ServerUnaryCall<AuthRequest, AuthResponse>, callback: grpc_1.sendUnaryData<AuthResponse>): void;
        abstract fetchInvoices(call: grpc_1.ServerUnaryCall<FetchInvoicesRequest, FetchInvoicesResponse>, callback: grpc_1.sendUnaryData<FetchInvoicesResponse>): void;
        abstract fetchSubscription(call: grpc_1.ServerUnaryCall<fetchSubscriptionRequest, fetchSubscriptionResponse>, callback: grpc_1.sendUnaryData<fetchSubscriptionResponse>): void;
        abstract fetchPaymentMethod(call: grpc_1.ServerUnaryCall<fetchpaymentMethodRequest, fetchpaymentMethodResponse>, callback: grpc_1.sendUnaryData<fetchpaymentMethodResponse>): void;
    }
    export class CustomBillingServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedCustomBillingServiceService.definition, "CustomBillingService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        fetchAuth: GrpcUnaryServiceInterface<AuthRequest, AuthResponse> = (message: AuthRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AuthResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AuthResponse>, callback?: grpc_1.requestCallback<AuthResponse>): grpc_1.ClientUnaryCall => {
            return super.fetchAuth(message, metadata, options, callback);
        };
        fetchInvoices: GrpcUnaryServiceInterface<FetchInvoicesRequest, FetchInvoicesResponse> = (message: FetchInvoicesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FetchInvoicesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FetchInvoicesResponse>, callback?: grpc_1.requestCallback<FetchInvoicesResponse>): grpc_1.ClientUnaryCall => {
            return super.fetchInvoices(message, metadata, options, callback);
        };
        fetchSubscription: GrpcUnaryServiceInterface<fetchSubscriptionRequest, fetchSubscriptionResponse> = (message: fetchSubscriptionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<fetchSubscriptionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<fetchSubscriptionResponse>, callback?: grpc_1.requestCallback<fetchSubscriptionResponse>): grpc_1.ClientUnaryCall => {
            return super.fetchSubscription(message, metadata, options, callback);
        };
        fetchPaymentMethod: GrpcUnaryServiceInterface<fetchpaymentMethodRequest, fetchpaymentMethodResponse> = (message: fetchpaymentMethodRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<fetchpaymentMethodResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<fetchpaymentMethodResponse>, callback?: grpc_1.requestCallback<fetchpaymentMethodResponse>): grpc_1.ClientUnaryCall => {
            return super.fetchPaymentMethod(message, metadata, options, callback);
        };
    }
}
