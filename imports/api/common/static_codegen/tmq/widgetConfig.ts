/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: tmq/widgetConfig.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class WidgetConfigRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            domain?: string[];
            assistantId?: string;
            assistantidllm?: string;
            userId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("domain" in data && data.domain != undefined) {
                    this.domain = data.domain;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("assistantidllm" in data && data.assistantidllm != undefined) {
                    this.assistantidllm = data.assistantidllm;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get domain() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set domain(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get assistantidllm() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set assistantidllm(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            name?: string;
            domain?: string[];
            assistantId?: string;
            assistantidllm?: string;
            userId?: string;
        }): WidgetConfigRequest {
            const message = new WidgetConfigRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.domain != null) {
                message.domain = data.domain;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.assistantidllm != null) {
                message.assistantidllm = data.assistantidllm;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                domain?: string[];
                assistantId?: string;
                assistantidllm?: string;
                userId?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.domain != null) {
                data.domain = this.domain;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.assistantidllm != null) {
                data.assistantidllm = this.assistantidllm;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.domain.length)
                writer.writeRepeatedString(2, this.domain);
            if (this.assistantId.length)
                writer.writeString(3, this.assistantId);
            if (this.assistantidllm.length)
                writer.writeString(4, this.assistantidllm);
            if (this.userId.length)
                writer.writeString(5, this.userId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WidgetConfigRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WidgetConfigRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.assistantId = reader.readString();
                        break;
                    case 4:
                        message.assistantidllm = reader.readString();
                        break;
                    case 5:
                        message.userId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WidgetConfigRequest {
            return WidgetConfigRequest.deserialize(bytes);
        }
    }
    export class FetchWidgetConfigRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            lastBasis?: number;
            searchQuery?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("lastBasis" in data && data.lastBasis != undefined) {
                    this.lastBasis = data.lastBasis;
                }
                if ("searchQuery" in data && data.searchQuery != undefined) {
                    this.searchQuery = data.searchQuery;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get lastBasis() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set lastBasis(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get searchQuery() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set searchQuery(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            userId?: string;
            lastBasis?: number;
            searchQuery?: string;
        }): FetchWidgetConfigRequest {
            const message = new FetchWidgetConfigRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.lastBasis != null) {
                message.lastBasis = data.lastBasis;
            }
            if (data.searchQuery != null) {
                message.searchQuery = data.searchQuery;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                lastBasis?: number;
                searchQuery?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.lastBasis != null) {
                data.lastBasis = this.lastBasis;
            }
            if (this.searchQuery != null) {
                data.searchQuery = this.searchQuery;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.lastBasis != 0)
                writer.writeInt64(2, this.lastBasis);
            if (this.searchQuery.length)
                writer.writeString(3, this.searchQuery);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchWidgetConfigRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchWidgetConfigRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.lastBasis = reader.readInt64();
                        break;
                    case 3:
                        message.searchQuery = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchWidgetConfigRequest {
            return FetchWidgetConfigRequest.deserialize(bytes);
        }
    }
    export class UpdateWidgetConfigRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            domains?: string[];
            siteId?: string;
            assistantIdCall?: string;
            assistantIdLlm?: string;
            userId?: string;
            widgetUrl?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("domains" in data && data.domains != undefined) {
                    this.domains = data.domains;
                }
                if ("siteId" in data && data.siteId != undefined) {
                    this.siteId = data.siteId;
                }
                if ("assistantIdCall" in data && data.assistantIdCall != undefined) {
                    this.assistantIdCall = data.assistantIdCall;
                }
                if ("assistantIdLlm" in data && data.assistantIdLlm != undefined) {
                    this.assistantIdLlm = data.assistantIdLlm;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("widgetUrl" in data && data.widgetUrl != undefined) {
                    this.widgetUrl = data.widgetUrl;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get domains() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set domains(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get siteId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set siteId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get assistantIdCall() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set assistantIdCall(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get assistantIdLlm() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set assistantIdLlm(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get widgetUrl() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set widgetUrl(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            domains?: string[];
            siteId?: string;
            assistantIdCall?: string;
            assistantIdLlm?: string;
            userId?: string;
            widgetUrl?: string;
        }): UpdateWidgetConfigRequest {
            const message = new UpdateWidgetConfigRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.domains != null) {
                message.domains = data.domains;
            }
            if (data.siteId != null) {
                message.siteId = data.siteId;
            }
            if (data.assistantIdCall != null) {
                message.assistantIdCall = data.assistantIdCall;
            }
            if (data.assistantIdLlm != null) {
                message.assistantIdLlm = data.assistantIdLlm;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.widgetUrl != null) {
                message.widgetUrl = data.widgetUrl;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                domains?: string[];
                siteId?: string;
                assistantIdCall?: string;
                assistantIdLlm?: string;
                userId?: string;
                widgetUrl?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.domains != null) {
                data.domains = this.domains;
            }
            if (this.siteId != null) {
                data.siteId = this.siteId;
            }
            if (this.assistantIdCall != null) {
                data.assistantIdCall = this.assistantIdCall;
            }
            if (this.assistantIdLlm != null) {
                data.assistantIdLlm = this.assistantIdLlm;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.widgetUrl != null) {
                data.widgetUrl = this.widgetUrl;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.domains.length)
                writer.writeRepeatedString(3, this.domains);
            if (this.siteId.length)
                writer.writeString(4, this.siteId);
            if (this.assistantIdCall.length)
                writer.writeString(5, this.assistantIdCall);
            if (this.assistantIdLlm.length)
                writer.writeString(6, this.assistantIdLlm);
            if (this.userId.length)
                writer.writeString(7, this.userId);
            if (this.widgetUrl.length)
                writer.writeString(8, this.widgetUrl);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateWidgetConfigRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateWidgetConfigRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.siteId = reader.readString();
                        break;
                    case 5:
                        message.assistantIdCall = reader.readString();
                        break;
                    case 6:
                        message.assistantIdLlm = reader.readString();
                        break;
                    case 7:
                        message.userId = reader.readString();
                        break;
                    case 8:
                        message.widgetUrl = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateWidgetConfigRequest {
            return UpdateWidgetConfigRequest.deserialize(bytes);
        }
    }
    export class AllWidgetConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            domains?: string[];
            widgetUrl?: string;
            siteId?: string;
            secret?: string;
            assistantIdCall?: string;
            assistantIdLlm?: string;
            userId?: string;
            createdAt?: number;
            updatedAt?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("domains" in data && data.domains != undefined) {
                    this.domains = data.domains;
                }
                if ("widgetUrl" in data && data.widgetUrl != undefined) {
                    this.widgetUrl = data.widgetUrl;
                }
                if ("siteId" in data && data.siteId != undefined) {
                    this.siteId = data.siteId;
                }
                if ("secret" in data && data.secret != undefined) {
                    this.secret = data.secret;
                }
                if ("assistantIdCall" in data && data.assistantIdCall != undefined) {
                    this.assistantIdCall = data.assistantIdCall;
                }
                if ("assistantIdLlm" in data && data.assistantIdLlm != undefined) {
                    this.assistantIdLlm = data.assistantIdLlm;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get domains() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set domains(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get widgetUrl() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set widgetUrl(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get siteId() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set siteId(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get secret() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set secret(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get assistantIdCall() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set assistantIdCall(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get assistantIdLlm() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set assistantIdLlm(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set createdAt(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get updatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set updatedAt(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            domains?: string[];
            widgetUrl?: string;
            siteId?: string;
            secret?: string;
            assistantIdCall?: string;
            assistantIdLlm?: string;
            userId?: string;
            createdAt?: number;
            updatedAt?: number;
        }): AllWidgetConfig {
            const message = new AllWidgetConfig({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.domains != null) {
                message.domains = data.domains;
            }
            if (data.widgetUrl != null) {
                message.widgetUrl = data.widgetUrl;
            }
            if (data.siteId != null) {
                message.siteId = data.siteId;
            }
            if (data.secret != null) {
                message.secret = data.secret;
            }
            if (data.assistantIdCall != null) {
                message.assistantIdCall = data.assistantIdCall;
            }
            if (data.assistantIdLlm != null) {
                message.assistantIdLlm = data.assistantIdLlm;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.updatedAt != null) {
                message.updatedAt = data.updatedAt;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                domains?: string[];
                widgetUrl?: string;
                siteId?: string;
                secret?: string;
                assistantIdCall?: string;
                assistantIdLlm?: string;
                userId?: string;
                createdAt?: number;
                updatedAt?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.domains != null) {
                data.domains = this.domains;
            }
            if (this.widgetUrl != null) {
                data.widgetUrl = this.widgetUrl;
            }
            if (this.siteId != null) {
                data.siteId = this.siteId;
            }
            if (this.secret != null) {
                data.secret = this.secret;
            }
            if (this.assistantIdCall != null) {
                data.assistantIdCall = this.assistantIdCall;
            }
            if (this.assistantIdLlm != null) {
                data.assistantIdLlm = this.assistantIdLlm;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.domains.length)
                writer.writeRepeatedString(3, this.domains);
            if (this.widgetUrl.length)
                writer.writeString(4, this.widgetUrl);
            if (this.siteId.length)
                writer.writeString(5, this.siteId);
            if (this.secret.length)
                writer.writeString(6, this.secret);
            if (this.assistantIdCall.length)
                writer.writeString(7, this.assistantIdCall);
            if (this.assistantIdLlm.length)
                writer.writeString(8, this.assistantIdLlm);
            if (this.userId.length)
                writer.writeString(9, this.userId);
            if (this.createdAt != 0)
                writer.writeUint64(10, this.createdAt);
            if (this.updatedAt != 0)
                writer.writeUint64(11, this.updatedAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AllWidgetConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AllWidgetConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.widgetUrl = reader.readString();
                        break;
                    case 5:
                        message.siteId = reader.readString();
                        break;
                    case 6:
                        message.secret = reader.readString();
                        break;
                    case 7:
                        message.assistantIdCall = reader.readString();
                        break;
                    case 8:
                        message.assistantIdLlm = reader.readString();
                        break;
                    case 9:
                        message.userId = reader.readString();
                        break;
                    case 10:
                        message.createdAt = reader.readUint64();
                        break;
                    case 11:
                        message.updatedAt = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AllWidgetConfig {
            return AllWidgetConfig.deserialize(bytes);
        }
    }
    export class FetchWidgetConfigResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            WidgetConfigs?: AllWidgetConfig[];
            lastBasis?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("WidgetConfigs" in data && data.WidgetConfigs != undefined) {
                    this.WidgetConfigs = data.WidgetConfigs;
                }
                if ("lastBasis" in data && data.lastBasis != undefined) {
                    this.lastBasis = data.lastBasis;
                }
            }
        }
        get WidgetConfigs() {
            return pb_1.Message.getRepeatedWrapperField(this, AllWidgetConfig, 1) as AllWidgetConfig[];
        }
        set WidgetConfigs(value: AllWidgetConfig[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get lastBasis() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set lastBasis(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            WidgetConfigs?: ReturnType<typeof AllWidgetConfig.prototype.toObject>[];
            lastBasis?: number;
        }): FetchWidgetConfigResponse {
            const message = new FetchWidgetConfigResponse({});
            if (data.WidgetConfigs != null) {
                message.WidgetConfigs = data.WidgetConfigs.map(item => AllWidgetConfig.fromObject(item));
            }
            if (data.lastBasis != null) {
                message.lastBasis = data.lastBasis;
            }
            return message;
        }
        toObject() {
            const data: {
                WidgetConfigs?: ReturnType<typeof AllWidgetConfig.prototype.toObject>[];
                lastBasis?: number;
            } = {};
            if (this.WidgetConfigs != null) {
                data.WidgetConfigs = this.WidgetConfigs.map((item: AllWidgetConfig) => item.toObject());
            }
            if (this.lastBasis != null) {
                data.lastBasis = this.lastBasis;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.WidgetConfigs.length)
                writer.writeRepeatedMessage(1, this.WidgetConfigs, (item: AllWidgetConfig) => item.serialize(writer));
            if (this.lastBasis != 0)
                writer.writeInt64(2, this.lastBasis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchWidgetConfigResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchWidgetConfigResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.WidgetConfigs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AllWidgetConfig.deserialize(reader), AllWidgetConfig));
                        break;
                    case 2:
                        message.lastBasis = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchWidgetConfigResponse {
            return FetchWidgetConfigResponse.deserialize(bytes);
        }
    }
    export class WidgetConfigResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): WidgetConfigResponse {
            const message = new WidgetConfigResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WidgetConfigResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WidgetConfigResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WidgetConfigResponse {
            return WidgetConfigResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedWidgetConfigServiceService {
        static definition = {
            createWidgetConfig: {
                path: "/tmq.WidgetConfigService/createWidgetConfig",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WidgetConfigRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WidgetConfigRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WidgetConfigResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WidgetConfigResponse.deserialize(new Uint8Array(bytes))
            },
            fetchWidgetConfig: {
                path: "/tmq.WidgetConfigService/fetchWidgetConfig",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FetchWidgetConfigRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FetchWidgetConfigRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FetchWidgetConfigResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FetchWidgetConfigResponse.deserialize(new Uint8Array(bytes))
            },
            updateWidgetConfig: {
                path: "/tmq.WidgetConfigService/updateWidgetConfig",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateWidgetConfigRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateWidgetConfigRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WidgetConfigResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WidgetConfigResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract createWidgetConfig(call: grpc_1.ServerUnaryCall<WidgetConfigRequest, WidgetConfigResponse>, callback: grpc_1.sendUnaryData<WidgetConfigResponse>): void;
        abstract fetchWidgetConfig(call: grpc_1.ServerUnaryCall<FetchWidgetConfigRequest, FetchWidgetConfigResponse>, callback: grpc_1.sendUnaryData<FetchWidgetConfigResponse>): void;
        abstract updateWidgetConfig(call: grpc_1.ServerUnaryCall<UpdateWidgetConfigRequest, WidgetConfigResponse>, callback: grpc_1.sendUnaryData<WidgetConfigResponse>): void;
    }
    export class WidgetConfigServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedWidgetConfigServiceService.definition, "WidgetConfigService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        createWidgetConfig: GrpcUnaryServiceInterface<WidgetConfigRequest, WidgetConfigResponse> = (message: WidgetConfigRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WidgetConfigResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WidgetConfigResponse>, callback?: grpc_1.requestCallback<WidgetConfigResponse>): grpc_1.ClientUnaryCall => {
            return super.createWidgetConfig(message, metadata, options, callback);
        };
        fetchWidgetConfig: GrpcUnaryServiceInterface<FetchWidgetConfigRequest, FetchWidgetConfigResponse> = (message: FetchWidgetConfigRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FetchWidgetConfigResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FetchWidgetConfigResponse>, callback?: grpc_1.requestCallback<FetchWidgetConfigResponse>): grpc_1.ClientUnaryCall => {
            return super.fetchWidgetConfig(message, metadata, options, callback);
        };
        updateWidgetConfig: GrpcUnaryServiceInterface<UpdateWidgetConfigRequest, WidgetConfigResponse> = (message: UpdateWidgetConfigRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WidgetConfigResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WidgetConfigResponse>, callback?: grpc_1.requestCallback<WidgetConfigResponse>): grpc_1.ClientUnaryCall => {
            return super.updateWidgetConfig(message, metadata, options, callback);
        };
    }
}
