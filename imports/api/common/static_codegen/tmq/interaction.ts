/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: tmq/interaction.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./inbox";
import * as dependency_2 from "./../google/protobuf/any";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class GetInteractionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            inbox_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("inbox_id" in data && data.inbox_id != undefined) {
                    this.inbox_id = data.inbox_id;
                }
            }
        }
        get inbox_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set inbox_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            inbox_id?: string;
        }): GetInteractionsRequest {
            const message = new GetInteractionsRequest({});
            if (data.inbox_id != null) {
                message.inbox_id = data.inbox_id;
            }
            return message;
        }
        toObject() {
            const data: {
                inbox_id?: string;
            } = {};
            if (this.inbox_id != null) {
                data.inbox_id = this.inbox_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.inbox_id.length)
                writer.writeString(1, this.inbox_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetInteractionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetInteractionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.inbox_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetInteractionsRequest {
            return GetInteractionsRequest.deserialize(bytes);
        }
    }
    export class InteractionPayload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            text?: string;
            attachments?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("text" in data && data.text != undefined) {
                    this.text = data.text;
                }
                if ("attachments" in data && data.attachments != undefined) {
                    this.attachments = data.attachments;
                }
            }
        }
        get text() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set text(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get attachments() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set attachments(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            text?: string;
            attachments?: string[];
        }): InteractionPayload {
            const message = new InteractionPayload({});
            if (data.text != null) {
                message.text = data.text;
            }
            if (data.attachments != null) {
                message.attachments = data.attachments;
            }
            return message;
        }
        toObject() {
            const data: {
                text?: string;
                attachments?: string[];
            } = {};
            if (this.text != null) {
                data.text = this.text;
            }
            if (this.attachments != null) {
                data.attachments = this.attachments;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.text.length)
                writer.writeString(1, this.text);
            if (this.attachments.length)
                writer.writeRepeatedString(2, this.attachments);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InteractionPayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InteractionPayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.text = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InteractionPayload {
            return InteractionPayload.deserialize(bytes);
        }
    }
    export class InteractionAttribute extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
            value?: dependency_2.google.protobuf.Any;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Any, 2) as dependency_2.google.protobuf.Any;
        }
        set value(value: dependency_2.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            key?: string;
            value?: ReturnType<typeof dependency_2.google.protobuf.Any.prototype.toObject>;
        }): InteractionAttribute {
            const message = new InteractionAttribute({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = dependency_2.google.protobuf.Any.fromObject(data.value);
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                value?: ReturnType<typeof dependency_2.google.protobuf.Any.prototype.toObject>;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (this.has_value)
                writer.writeMessage(2, this.value, () => this.value.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InteractionAttribute {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InteractionAttribute();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.value, () => message.value = dependency_2.google.protobuf.Any.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InteractionAttribute {
            return InteractionAttribute.deserialize(bytes);
        }
    }
    export class Interaction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            business_id?: string;
            inbox_id?: string;
            channel_id?: string;
            consumer_id?: string;
            user_id?: string;
            medium?: string;
            direction?: string;
            payload?: InteractionPayload;
            status?: string;
            timestamp?: number;
            attributes?: InteractionAttribute[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [12], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("business_id" in data && data.business_id != undefined) {
                    this.business_id = data.business_id;
                }
                if ("inbox_id" in data && data.inbox_id != undefined) {
                    this.inbox_id = data.inbox_id;
                }
                if ("channel_id" in data && data.channel_id != undefined) {
                    this.channel_id = data.channel_id;
                }
                if ("consumer_id" in data && data.consumer_id != undefined) {
                    this.consumer_id = data.consumer_id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("medium" in data && data.medium != undefined) {
                    this.medium = data.medium;
                }
                if ("direction" in data && data.direction != undefined) {
                    this.direction = data.direction;
                }
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("attributes" in data && data.attributes != undefined) {
                    this.attributes = data.attributes;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get business_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set business_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get inbox_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set inbox_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get channel_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set channel_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get consumer_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set consumer_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get medium() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set medium(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get direction() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set direction(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get payload() {
            return pb_1.Message.getWrapperField(this, InteractionPayload, 9) as InteractionPayload;
        }
        set payload(value: InteractionPayload) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_payload() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get attributes() {
            return pb_1.Message.getRepeatedWrapperField(this, InteractionAttribute, 12) as InteractionAttribute[];
        }
        set attributes(value: InteractionAttribute[]) {
            pb_1.Message.setRepeatedWrapperField(this, 12, value);
        }
        static fromObject(data: {
            id?: string;
            business_id?: string;
            inbox_id?: string;
            channel_id?: string;
            consumer_id?: string;
            user_id?: string;
            medium?: string;
            direction?: string;
            payload?: ReturnType<typeof InteractionPayload.prototype.toObject>;
            status?: string;
            timestamp?: number;
            attributes?: ReturnType<typeof InteractionAttribute.prototype.toObject>[];
        }): Interaction {
            const message = new Interaction({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.business_id != null) {
                message.business_id = data.business_id;
            }
            if (data.inbox_id != null) {
                message.inbox_id = data.inbox_id;
            }
            if (data.channel_id != null) {
                message.channel_id = data.channel_id;
            }
            if (data.consumer_id != null) {
                message.consumer_id = data.consumer_id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.medium != null) {
                message.medium = data.medium;
            }
            if (data.direction != null) {
                message.direction = data.direction;
            }
            if (data.payload != null) {
                message.payload = InteractionPayload.fromObject(data.payload);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.attributes != null) {
                message.attributes = data.attributes.map(item => InteractionAttribute.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                business_id?: string;
                inbox_id?: string;
                channel_id?: string;
                consumer_id?: string;
                user_id?: string;
                medium?: string;
                direction?: string;
                payload?: ReturnType<typeof InteractionPayload.prototype.toObject>;
                status?: string;
                timestamp?: number;
                attributes?: ReturnType<typeof InteractionAttribute.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.business_id != null) {
                data.business_id = this.business_id;
            }
            if (this.inbox_id != null) {
                data.inbox_id = this.inbox_id;
            }
            if (this.channel_id != null) {
                data.channel_id = this.channel_id;
            }
            if (this.consumer_id != null) {
                data.consumer_id = this.consumer_id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.medium != null) {
                data.medium = this.medium;
            }
            if (this.direction != null) {
                data.direction = this.direction;
            }
            if (this.payload != null) {
                data.payload = this.payload.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.attributes != null) {
                data.attributes = this.attributes.map((item: InteractionAttribute) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.business_id.length)
                writer.writeString(2, this.business_id);
            if (this.inbox_id.length)
                writer.writeString(3, this.inbox_id);
            if (this.channel_id.length)
                writer.writeString(4, this.channel_id);
            if (this.consumer_id.length)
                writer.writeString(5, this.consumer_id);
            if (this.user_id.length)
                writer.writeString(6, this.user_id);
            if (this.medium.length)
                writer.writeString(7, this.medium);
            if (this.direction.length)
                writer.writeString(8, this.direction);
            if (this.has_payload)
                writer.writeMessage(9, this.payload, () => this.payload.serialize(writer));
            if (this.status.length)
                writer.writeString(10, this.status);
            if (this.timestamp != 0)
                writer.writeDouble(11, this.timestamp);
            if (this.attributes.length)
                writer.writeRepeatedMessage(12, this.attributes, (item: InteractionAttribute) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Interaction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Interaction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.business_id = reader.readString();
                        break;
                    case 3:
                        message.inbox_id = reader.readString();
                        break;
                    case 4:
                        message.channel_id = reader.readString();
                        break;
                    case 5:
                        message.consumer_id = reader.readString();
                        break;
                    case 6:
                        message.user_id = reader.readString();
                        break;
                    case 7:
                        message.medium = reader.readString();
                        break;
                    case 8:
                        message.direction = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.payload, () => message.payload = InteractionPayload.deserialize(reader));
                        break;
                    case 10:
                        message.status = reader.readString();
                        break;
                    case 11:
                        message.timestamp = reader.readDouble();
                        break;
                    case 12:
                        reader.readMessage(message.attributes, () => pb_1.Message.addToRepeatedWrapperField(message, 12, InteractionAttribute.deserialize(reader), InteractionAttribute));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Interaction {
            return Interaction.deserialize(bytes);
        }
    }
    export class GetInteractionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            interactions?: Interaction[];
            total_count?: number;
            success?: boolean;
            error_message?: string;
            last_basis?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("interactions" in data && data.interactions != undefined) {
                    this.interactions = data.interactions;
                }
                if ("total_count" in data && data.total_count != undefined) {
                    this.total_count = data.total_count;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
                if ("last_basis" in data && data.last_basis != undefined) {
                    this.last_basis = data.last_basis;
                }
            }
        }
        get interactions() {
            return pb_1.Message.getRepeatedWrapperField(this, Interaction, 1) as Interaction[];
        }
        set interactions(value: Interaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get last_basis() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set last_basis(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            interactions?: ReturnType<typeof Interaction.prototype.toObject>[];
            total_count?: number;
            success?: boolean;
            error_message?: string;
            last_basis?: number;
        }): GetInteractionsResponse {
            const message = new GetInteractionsResponse({});
            if (data.interactions != null) {
                message.interactions = data.interactions.map(item => Interaction.fromObject(item));
            }
            if (data.total_count != null) {
                message.total_count = data.total_count;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            if (data.last_basis != null) {
                message.last_basis = data.last_basis;
            }
            return message;
        }
        toObject() {
            const data: {
                interactions?: ReturnType<typeof Interaction.prototype.toObject>[];
                total_count?: number;
                success?: boolean;
                error_message?: string;
                last_basis?: number;
            } = {};
            if (this.interactions != null) {
                data.interactions = this.interactions.map((item: Interaction) => item.toObject());
            }
            if (this.total_count != null) {
                data.total_count = this.total_count;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            if (this.last_basis != null) {
                data.last_basis = this.last_basis;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.interactions.length)
                writer.writeRepeatedMessage(1, this.interactions, (item: Interaction) => item.serialize(writer));
            if (this.total_count != 0)
                writer.writeInt32(2, this.total_count);
            if (this.success != false)
                writer.writeBool(3, this.success);
            if (this.error_message.length)
                writer.writeString(4, this.error_message);
            if (this.last_basis != 0)
                writer.writeDouble(5, this.last_basis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetInteractionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetInteractionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.interactions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Interaction.deserialize(reader), Interaction));
                        break;
                    case 2:
                        message.total_count = reader.readInt32();
                        break;
                    case 3:
                        message.success = reader.readBool();
                        break;
                    case 4:
                        message.error_message = reader.readString();
                        break;
                    case 5:
                        message.last_basis = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetInteractionsResponse {
            return GetInteractionsResponse.deserialize(bytes);
        }
    }
    export class GetInteractionsByInboxIdsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            inbox_ids?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("inbox_ids" in data && data.inbox_ids != undefined) {
                    this.inbox_ids = data.inbox_ids;
                }
            }
        }
        get inbox_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set inbox_ids(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            inbox_ids?: string[];
        }): GetInteractionsByInboxIdsRequest {
            const message = new GetInteractionsByInboxIdsRequest({});
            if (data.inbox_ids != null) {
                message.inbox_ids = data.inbox_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                inbox_ids?: string[];
            } = {};
            if (this.inbox_ids != null) {
                data.inbox_ids = this.inbox_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.inbox_ids.length)
                writer.writeRepeatedString(1, this.inbox_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetInteractionsByInboxIdsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetInteractionsByInboxIdsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetInteractionsByInboxIdsRequest {
            return GetInteractionsByInboxIdsRequest.deserialize(bytes);
        }
    }
    export class GetInteractionsByConsumerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            business_id?: string;
            consumer_id?: string;
            page?: dependency_1.tmq.Pagination;
            channel_ids?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("business_id" in data && data.business_id != undefined) {
                    this.business_id = data.business_id;
                }
                if ("consumer_id" in data && data.consumer_id != undefined) {
                    this.consumer_id = data.consumer_id;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("channel_ids" in data && data.channel_ids != undefined) {
                    this.channel_ids = data.channel_ids;
                }
            }
        }
        get business_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set business_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get consumer_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set consumer_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get page() {
            return pb_1.Message.getWrapperField(this, dependency_1.tmq.Pagination, 3) as dependency_1.tmq.Pagination;
        }
        set page(value: dependency_1.tmq.Pagination) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_page() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get channel_ids() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set channel_ids(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            business_id?: string;
            consumer_id?: string;
            page?: ReturnType<typeof dependency_1.tmq.Pagination.prototype.toObject>;
            channel_ids?: string[];
        }): GetInteractionsByConsumerRequest {
            const message = new GetInteractionsByConsumerRequest({});
            if (data.business_id != null) {
                message.business_id = data.business_id;
            }
            if (data.consumer_id != null) {
                message.consumer_id = data.consumer_id;
            }
            if (data.page != null) {
                message.page = dependency_1.tmq.Pagination.fromObject(data.page);
            }
            if (data.channel_ids != null) {
                message.channel_ids = data.channel_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                business_id?: string;
                consumer_id?: string;
                page?: ReturnType<typeof dependency_1.tmq.Pagination.prototype.toObject>;
                channel_ids?: string[];
            } = {};
            if (this.business_id != null) {
                data.business_id = this.business_id;
            }
            if (this.consumer_id != null) {
                data.consumer_id = this.consumer_id;
            }
            if (this.page != null) {
                data.page = this.page.toObject();
            }
            if (this.channel_ids != null) {
                data.channel_ids = this.channel_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.business_id.length)
                writer.writeString(1, this.business_id);
            if (this.consumer_id.length)
                writer.writeString(2, this.consumer_id);
            if (this.has_page)
                writer.writeMessage(3, this.page, () => this.page.serialize(writer));
            if (this.channel_ids.length)
                writer.writeRepeatedString(4, this.channel_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetInteractionsByConsumerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetInteractionsByConsumerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.business_id = reader.readString();
                        break;
                    case 2:
                        message.consumer_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.page, () => message.page = dependency_1.tmq.Pagination.deserialize(reader));
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetInteractionsByConsumerRequest {
            return GetInteractionsByConsumerRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedInteractionServiceService {
        static definition = {
            GetInteractions: {
                path: "/tmq.InteractionService/GetInteractions",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetInteractionsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetInteractionsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetInteractionsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetInteractionsResponse.deserialize(new Uint8Array(bytes))
            },
            GetInteractionsByInboxIds: {
                path: "/tmq.InteractionService/GetInteractionsByInboxIds",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetInteractionsByInboxIdsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetInteractionsByInboxIdsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetInteractionsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetInteractionsResponse.deserialize(new Uint8Array(bytes))
            },
            GetInteractionsByConsumer: {
                path: "/tmq.InteractionService/GetInteractionsByConsumer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetInteractionsByConsumerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetInteractionsByConsumerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetInteractionsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetInteractionsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetInteractions(call: grpc_1.ServerUnaryCall<GetInteractionsRequest, GetInteractionsResponse>, callback: grpc_1.sendUnaryData<GetInteractionsResponse>): void;
        abstract GetInteractionsByInboxIds(call: grpc_1.ServerUnaryCall<GetInteractionsByInboxIdsRequest, GetInteractionsResponse>, callback: grpc_1.sendUnaryData<GetInteractionsResponse>): void;
        abstract GetInteractionsByConsumer(call: grpc_1.ServerUnaryCall<GetInteractionsByConsumerRequest, GetInteractionsResponse>, callback: grpc_1.sendUnaryData<GetInteractionsResponse>): void;
    }
    export class InteractionServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedInteractionServiceService.definition, "InteractionService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetInteractions: GrpcUnaryServiceInterface<GetInteractionsRequest, GetInteractionsResponse> = (message: GetInteractionsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetInteractionsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetInteractionsResponse>, callback?: grpc_1.requestCallback<GetInteractionsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetInteractions(message, metadata, options, callback);
        };
        GetInteractionsByInboxIds: GrpcUnaryServiceInterface<GetInteractionsByInboxIdsRequest, GetInteractionsResponse> = (message: GetInteractionsByInboxIdsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetInteractionsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetInteractionsResponse>, callback?: grpc_1.requestCallback<GetInteractionsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetInteractionsByInboxIds(message, metadata, options, callback);
        };
        GetInteractionsByConsumer: GrpcUnaryServiceInterface<GetInteractionsByConsumerRequest, GetInteractionsResponse> = (message: GetInteractionsByConsumerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetInteractionsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetInteractionsResponse>, callback?: grpc_1.requestCallback<GetInteractionsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetInteractionsByConsumer(message, metadata, options, callback);
        };
    }
}
