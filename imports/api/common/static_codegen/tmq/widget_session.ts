/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: tmq/widget_session.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class WidgetTokenRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): WidgetTokenRequest {
            const message = new WidgetTokenRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WidgetTokenRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WidgetTokenRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WidgetTokenRequest {
            return WidgetTokenRequest.deserialize(bytes);
        }
    }
    export class WidgetTokenResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            oneTimeToken?: string;
            csrfToken?: string;
            error?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("oneTimeToken" in data && data.oneTimeToken != undefined) {
                    this.oneTimeToken = data.oneTimeToken;
                }
                if ("csrfToken" in data && data.csrfToken != undefined) {
                    this.csrfToken = data.csrfToken;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get oneTimeToken() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set oneTimeToken(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get csrfToken() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set csrfToken(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set error(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            oneTimeToken?: string;
            csrfToken?: string;
            error?: string;
        }): WidgetTokenResponse {
            const message = new WidgetTokenResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.oneTimeToken != null) {
                message.oneTimeToken = data.oneTimeToken;
            }
            if (data.csrfToken != null) {
                message.csrfToken = data.csrfToken;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                oneTimeToken?: string;
                csrfToken?: string;
                error?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.oneTimeToken != null) {
                data.oneTimeToken = this.oneTimeToken;
            }
            if (this.csrfToken != null) {
                data.csrfToken = this.csrfToken;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.oneTimeToken.length)
                writer.writeString(2, this.oneTimeToken);
            if (this.csrfToken.length)
                writer.writeString(3, this.csrfToken);
            if (this.error.length)
                writer.writeString(4, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WidgetTokenResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WidgetTokenResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.oneTimeToken = reader.readString();
                        break;
                    case 3:
                        message.csrfToken = reader.readString();
                        break;
                    case 4:
                        message.error = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WidgetTokenResponse {
            return WidgetTokenResponse.deserialize(bytes);
        }
    }
    export class ChatMessageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
            sessionId?: string;
            room?: string;
            type?: string;
            transcriptId?: string;
            isCallEnded?: boolean;
            recordingId?: string;
            isUpdate?: boolean;
            metaSessionId?: string;
            meta?: string;
            assistantId?: string;
            businessId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("sessionId" in data && data.sessionId != undefined) {
                    this.sessionId = data.sessionId;
                }
                if ("room" in data && data.room != undefined) {
                    this.room = data.room;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("transcriptId" in data && data.transcriptId != undefined) {
                    this.transcriptId = data.transcriptId;
                }
                if ("isCallEnded" in data && data.isCallEnded != undefined) {
                    this.isCallEnded = data.isCallEnded;
                }
                if ("recordingId" in data && data.recordingId != undefined) {
                    this.recordingId = data.recordingId;
                }
                if ("isUpdate" in data && data.isUpdate != undefined) {
                    this.isUpdate = data.isUpdate;
                }
                if ("metaSessionId" in data && data.metaSessionId != undefined) {
                    this.metaSessionId = data.metaSessionId;
                }
                if ("meta" in data && data.meta != undefined) {
                    this.meta = data.meta;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("businessId" in data && data.businessId != undefined) {
                    this.businessId = data.businessId;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get sessionId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set sessionId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get room() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set room(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get transcriptId() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set transcriptId(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get isCallEnded() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set isCallEnded(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get recordingId() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set recordingId(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get isUpdate() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set isUpdate(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get metaSessionId() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set metaSessionId(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get meta() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set meta(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get businessId() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set businessId(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            message?: string;
            sessionId?: string;
            room?: string;
            type?: string;
            transcriptId?: string;
            isCallEnded?: boolean;
            recordingId?: string;
            isUpdate?: boolean;
            metaSessionId?: string;
            meta?: string;
            assistantId?: string;
            businessId?: string;
        }): ChatMessageRequest {
            const message = new ChatMessageRequest({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.sessionId != null) {
                message.sessionId = data.sessionId;
            }
            if (data.room != null) {
                message.room = data.room;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.transcriptId != null) {
                message.transcriptId = data.transcriptId;
            }
            if (data.isCallEnded != null) {
                message.isCallEnded = data.isCallEnded;
            }
            if (data.recordingId != null) {
                message.recordingId = data.recordingId;
            }
            if (data.isUpdate != null) {
                message.isUpdate = data.isUpdate;
            }
            if (data.metaSessionId != null) {
                message.metaSessionId = data.metaSessionId;
            }
            if (data.meta != null) {
                message.meta = data.meta;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.businessId != null) {
                message.businessId = data.businessId;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
                sessionId?: string;
                room?: string;
                type?: string;
                transcriptId?: string;
                isCallEnded?: boolean;
                recordingId?: string;
                isUpdate?: boolean;
                metaSessionId?: string;
                meta?: string;
                assistantId?: string;
                businessId?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.sessionId != null) {
                data.sessionId = this.sessionId;
            }
            if (this.room != null) {
                data.room = this.room;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.transcriptId != null) {
                data.transcriptId = this.transcriptId;
            }
            if (this.isCallEnded != null) {
                data.isCallEnded = this.isCallEnded;
            }
            if (this.recordingId != null) {
                data.recordingId = this.recordingId;
            }
            if (this.isUpdate != null) {
                data.isUpdate = this.isUpdate;
            }
            if (this.metaSessionId != null) {
                data.metaSessionId = this.metaSessionId;
            }
            if (this.meta != null) {
                data.meta = this.meta;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.businessId != null) {
                data.businessId = this.businessId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (this.sessionId.length)
                writer.writeString(2, this.sessionId);
            if (this.room.length)
                writer.writeString(3, this.room);
            if (this.type.length)
                writer.writeString(4, this.type);
            if (this.transcriptId.length)
                writer.writeString(5, this.transcriptId);
            if (this.isCallEnded != false)
                writer.writeBool(6, this.isCallEnded);
            if (this.recordingId.length)
                writer.writeString(7, this.recordingId);
            if (this.isUpdate != false)
                writer.writeBool(8, this.isUpdate);
            if (this.metaSessionId.length)
                writer.writeString(9, this.metaSessionId);
            if (this.meta.length)
                writer.writeString(10, this.meta);
            if (this.assistantId.length)
                writer.writeString(11, this.assistantId);
            if (this.businessId.length)
                writer.writeString(12, this.businessId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatMessageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatMessageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    case 2:
                        message.sessionId = reader.readString();
                        break;
                    case 3:
                        message.room = reader.readString();
                        break;
                    case 4:
                        message.type = reader.readString();
                        break;
                    case 5:
                        message.transcriptId = reader.readString();
                        break;
                    case 6:
                        message.isCallEnded = reader.readBool();
                        break;
                    case 7:
                        message.recordingId = reader.readString();
                        break;
                    case 8:
                        message.isUpdate = reader.readBool();
                        break;
                    case 9:
                        message.metaSessionId = reader.readString();
                        break;
                    case 10:
                        message.meta = reader.readString();
                        break;
                    case 11:
                        message.assistantId = reader.readString();
                        break;
                    case 12:
                        message.businessId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatMessageRequest {
            return ChatMessageRequest.deserialize(bytes);
        }
    }
    export class ChatMessageResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            response?: string;
            error?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get response() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set response(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set error(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            response?: string;
            error?: string;
        }): ChatMessageResponse {
            const message = new ChatMessageResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.response != null) {
                message.response = data.response;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                response?: string;
                error?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.response != null) {
                data.response = this.response;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.response.length)
                writer.writeString(2, this.response);
            if (this.error.length)
                writer.writeString(3, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatMessageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatMessageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.response = reader.readString();
                        break;
                    case 3:
                        message.error = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatMessageResponse {
            return ChatMessageResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedWidgetSessionServiceService {
        static definition = {
            GetWidgetTokens: {
                path: "/tmq.WidgetSessionService/GetWidgetTokens",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WidgetTokenRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WidgetTokenRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WidgetTokenResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WidgetTokenResponse.deserialize(new Uint8Array(bytes))
            },
            SendChatMessage: {
                path: "/tmq.WidgetSessionService/SendChatMessage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatMessageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatMessageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatMessageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatMessageResponse.deserialize(new Uint8Array(bytes))
            },
            SendOutboundMessage: {
                path: "/tmq.WidgetSessionService/SendOutboundMessage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatMessageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatMessageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatMessageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatMessageResponse.deserialize(new Uint8Array(bytes))
            },
            SendInboundMessage: {
                path: "/tmq.WidgetSessionService/SendInboundMessage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatMessageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatMessageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatMessageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatMessageResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetWidgetTokens(call: grpc_1.ServerUnaryCall<WidgetTokenRequest, WidgetTokenResponse>, callback: grpc_1.sendUnaryData<WidgetTokenResponse>): void;
        abstract SendChatMessage(call: grpc_1.ServerUnaryCall<ChatMessageRequest, ChatMessageResponse>, callback: grpc_1.sendUnaryData<ChatMessageResponse>): void;
        abstract SendOutboundMessage(call: grpc_1.ServerUnaryCall<ChatMessageRequest, ChatMessageResponse>, callback: grpc_1.sendUnaryData<ChatMessageResponse>): void;
        abstract SendInboundMessage(call: grpc_1.ServerUnaryCall<ChatMessageRequest, ChatMessageResponse>, callback: grpc_1.sendUnaryData<ChatMessageResponse>): void;
    }
    export class WidgetSessionServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedWidgetSessionServiceService.definition, "WidgetSessionService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetWidgetTokens: GrpcUnaryServiceInterface<WidgetTokenRequest, WidgetTokenResponse> = (message: WidgetTokenRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WidgetTokenResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WidgetTokenResponse>, callback?: grpc_1.requestCallback<WidgetTokenResponse>): grpc_1.ClientUnaryCall => {
            return super.GetWidgetTokens(message, metadata, options, callback);
        };
        SendChatMessage: GrpcUnaryServiceInterface<ChatMessageRequest, ChatMessageResponse> = (message: ChatMessageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChatMessageResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChatMessageResponse>, callback?: grpc_1.requestCallback<ChatMessageResponse>): grpc_1.ClientUnaryCall => {
            return super.SendChatMessage(message, metadata, options, callback);
        };
        SendOutboundMessage: GrpcUnaryServiceInterface<ChatMessageRequest, ChatMessageResponse> = (message: ChatMessageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChatMessageResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChatMessageResponse>, callback?: grpc_1.requestCallback<ChatMessageResponse>): grpc_1.ClientUnaryCall => {
            return super.SendOutboundMessage(message, metadata, options, callback);
        };
        SendInboundMessage: GrpcUnaryServiceInterface<ChatMessageRequest, ChatMessageResponse> = (message: ChatMessageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChatMessageResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChatMessageResponse>, callback?: grpc_1.requestCallback<ChatMessageResponse>): grpc_1.ClientUnaryCall => {
            return super.SendInboundMessage(message, metadata, options, callback);
        };
    }
}
