/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: tmq/SalesEnablement.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class ConnectUrlRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            userId?: string;
        }): ConnectUrlRequest {
            const message = new ConnectUrlRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConnectUrlRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConnectUrlRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConnectUrlRequest {
            return ConnectUrlRequest.deserialize(bytes);
        }
    }
    export class ConnectUrlResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            oauth?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("oauth" in data && data.oauth != undefined) {
                    this.oauth = data.oauth;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get oauth() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set oauth(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            oauth?: Uint8Array;
        }): ConnectUrlResponse {
            const message = new ConnectUrlResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.oauth != null) {
                message.oauth = data.oauth;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                oauth?: Uint8Array;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.oauth != null) {
                data.oauth = this.oauth;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.oauth.length)
                writer.writeBytes(3, this.oauth);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConnectUrlResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConnectUrlResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.oauth = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConnectUrlResponse {
            return ConnectUrlResponse.deserialize(bytes);
        }
    }
    export class CustomerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            firstName?: string;
            lastName?: string;
            phone?: string;
            billingAddress?: BillingAddress;
            userId?: string;
            metadata?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("firstName" in data && data.firstName != undefined) {
                    this.firstName = data.firstName;
                }
                if ("lastName" in data && data.lastName != undefined) {
                    this.lastName = data.lastName;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("billingAddress" in data && data.billingAddress != undefined) {
                    this.billingAddress = data.billingAddress;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get firstName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set firstName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get lastName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set lastName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get billingAddress() {
            return pb_1.Message.getWrapperField(this, BillingAddress, 5) as BillingAddress;
        }
        set billingAddress(value: BillingAddress) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_billingAddress() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set metadata(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            email?: string;
            firstName?: string;
            lastName?: string;
            phone?: string;
            billingAddress?: ReturnType<typeof BillingAddress.prototype.toObject>;
            userId?: string;
            metadata?: Uint8Array;
        }): CustomerRequest {
            const message = new CustomerRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.firstName != null) {
                message.firstName = data.firstName;
            }
            if (data.lastName != null) {
                message.lastName = data.lastName;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.billingAddress != null) {
                message.billingAddress = BillingAddress.fromObject(data.billingAddress);
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                firstName?: string;
                lastName?: string;
                phone?: string;
                billingAddress?: ReturnType<typeof BillingAddress.prototype.toObject>;
                userId?: string;
                metadata?: Uint8Array;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.firstName != null) {
                data.firstName = this.firstName;
            }
            if (this.lastName != null) {
                data.lastName = this.lastName;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.billingAddress != null) {
                data.billingAddress = this.billingAddress.toObject();
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.firstName.length)
                writer.writeString(2, this.firstName);
            if (this.lastName.length)
                writer.writeString(3, this.lastName);
            if (this.phone.length)
                writer.writeString(4, this.phone);
            if (this.has_billingAddress)
                writer.writeMessage(5, this.billingAddress, () => this.billingAddress.serialize(writer));
            if (this.userId.length)
                writer.writeString(6, this.userId);
            if (this.metadata.length)
                writer.writeBytes(7, this.metadata);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.firstName = reader.readString();
                        break;
                    case 3:
                        message.lastName = reader.readString();
                        break;
                    case 4:
                        message.phone = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.billingAddress, () => message.billingAddress = BillingAddress.deserialize(reader));
                        break;
                    case 6:
                        message.userId = reader.readString();
                        break;
                    case 7:
                        message.metadata = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CustomerRequest {
            return CustomerRequest.deserialize(bytes);
        }
    }
    export class CustomerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            customer?: CustomerData;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("customer" in data && data.customer != undefined) {
                    this.customer = data.customer;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get customer() {
            return pb_1.Message.getWrapperField(this, CustomerData, 3) as CustomerData;
        }
        set customer(value: CustomerData) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_customer() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            customer?: ReturnType<typeof CustomerData.prototype.toObject>;
        }): CustomerResponse {
            const message = new CustomerResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.customer != null) {
                message.customer = CustomerData.fromObject(data.customer);
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                customer?: ReturnType<typeof CustomerData.prototype.toObject>;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.customer != null) {
                data.customer = this.customer.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.has_customer)
                writer.writeMessage(3, this.customer, () => this.customer.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.customer, () => message.customer = CustomerData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CustomerResponse {
            return CustomerResponse.deserialize(bytes);
        }
    }
    export class CustomerData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            stripeCustomerId?: string;
            email?: string;
            firstName?: string;
            lastName?: string;
            phone?: string;
            billingAddress?: BillingAddress;
            status?: string;
            createdAt?: number;
            updatedAt?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("stripeCustomerId" in data && data.stripeCustomerId != undefined) {
                    this.stripeCustomerId = data.stripeCustomerId;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("firstName" in data && data.firstName != undefined) {
                    this.firstName = data.firstName;
                }
                if ("lastName" in data && data.lastName != undefined) {
                    this.lastName = data.lastName;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("billingAddress" in data && data.billingAddress != undefined) {
                    this.billingAddress = data.billingAddress;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get stripeCustomerId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set stripeCustomerId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get firstName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set firstName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get lastName() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set lastName(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get billingAddress() {
            return pb_1.Message.getWrapperField(this, BillingAddress, 7) as BillingAddress;
        }
        set billingAddress(value: BillingAddress) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_billingAddress() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set createdAt(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get updatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set updatedAt(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            id?: string;
            stripeCustomerId?: string;
            email?: string;
            firstName?: string;
            lastName?: string;
            phone?: string;
            billingAddress?: ReturnType<typeof BillingAddress.prototype.toObject>;
            status?: string;
            createdAt?: number;
            updatedAt?: number;
        }): CustomerData {
            const message = new CustomerData({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.stripeCustomerId != null) {
                message.stripeCustomerId = data.stripeCustomerId;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.firstName != null) {
                message.firstName = data.firstName;
            }
            if (data.lastName != null) {
                message.lastName = data.lastName;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.billingAddress != null) {
                message.billingAddress = BillingAddress.fromObject(data.billingAddress);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.updatedAt != null) {
                message.updatedAt = data.updatedAt;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                stripeCustomerId?: string;
                email?: string;
                firstName?: string;
                lastName?: string;
                phone?: string;
                billingAddress?: ReturnType<typeof BillingAddress.prototype.toObject>;
                status?: string;
                createdAt?: number;
                updatedAt?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.stripeCustomerId != null) {
                data.stripeCustomerId = this.stripeCustomerId;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.firstName != null) {
                data.firstName = this.firstName;
            }
            if (this.lastName != null) {
                data.lastName = this.lastName;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.billingAddress != null) {
                data.billingAddress = this.billingAddress.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.stripeCustomerId.length)
                writer.writeString(2, this.stripeCustomerId);
            if (this.email.length)
                writer.writeString(3, this.email);
            if (this.firstName.length)
                writer.writeString(4, this.firstName);
            if (this.lastName.length)
                writer.writeString(5, this.lastName);
            if (this.phone.length)
                writer.writeString(6, this.phone);
            if (this.has_billingAddress)
                writer.writeMessage(7, this.billingAddress, () => this.billingAddress.serialize(writer));
            if (this.status.length)
                writer.writeString(8, this.status);
            if (this.createdAt != 0)
                writer.writeUint64(9, this.createdAt);
            if (this.updatedAt != 0)
                writer.writeUint64(10, this.updatedAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomerData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomerData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.stripeCustomerId = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        message.firstName = reader.readString();
                        break;
                    case 5:
                        message.lastName = reader.readString();
                        break;
                    case 6:
                        message.phone = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.billingAddress, () => message.billingAddress = BillingAddress.deserialize(reader));
                        break;
                    case 8:
                        message.status = reader.readString();
                        break;
                    case 9:
                        message.createdAt = reader.readUint64();
                        break;
                    case 10:
                        message.updatedAt = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CustomerData {
            return CustomerData.deserialize(bytes);
        }
    }
    export class BillingAddress extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            line1?: string;
            line2?: string;
            city?: string;
            state?: string;
            postalCode?: string;
            country?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("line1" in data && data.line1 != undefined) {
                    this.line1 = data.line1;
                }
                if ("line2" in data && data.line2 != undefined) {
                    this.line2 = data.line2;
                }
                if ("city" in data && data.city != undefined) {
                    this.city = data.city;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("postalCode" in data && data.postalCode != undefined) {
                    this.postalCode = data.postalCode;
                }
                if ("country" in data && data.country != undefined) {
                    this.country = data.country;
                }
            }
        }
        get line1() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set line1(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get line2() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set line2(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get city() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set city(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get postalCode() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set postalCode(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get country() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set country(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            line1?: string;
            line2?: string;
            city?: string;
            state?: string;
            postalCode?: string;
            country?: string;
        }): BillingAddress {
            const message = new BillingAddress({});
            if (data.line1 != null) {
                message.line1 = data.line1;
            }
            if (data.line2 != null) {
                message.line2 = data.line2;
            }
            if (data.city != null) {
                message.city = data.city;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.postalCode != null) {
                message.postalCode = data.postalCode;
            }
            if (data.country != null) {
                message.country = data.country;
            }
            return message;
        }
        toObject() {
            const data: {
                line1?: string;
                line2?: string;
                city?: string;
                state?: string;
                postalCode?: string;
                country?: string;
            } = {};
            if (this.line1 != null) {
                data.line1 = this.line1;
            }
            if (this.line2 != null) {
                data.line2 = this.line2;
            }
            if (this.city != null) {
                data.city = this.city;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.postalCode != null) {
                data.postalCode = this.postalCode;
            }
            if (this.country != null) {
                data.country = this.country;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.line1.length)
                writer.writeString(1, this.line1);
            if (this.line2.length)
                writer.writeString(2, this.line2);
            if (this.city.length)
                writer.writeString(3, this.city);
            if (this.state.length)
                writer.writeString(4, this.state);
            if (this.postalCode.length)
                writer.writeString(5, this.postalCode);
            if (this.country.length)
                writer.writeString(6, this.country);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BillingAddress {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BillingAddress();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.line1 = reader.readString();
                        break;
                    case 2:
                        message.line2 = reader.readString();
                        break;
                    case 3:
                        message.city = reader.readString();
                        break;
                    case 4:
                        message.state = reader.readString();
                        break;
                    case 5:
                        message.postalCode = reader.readString();
                        break;
                    case 6:
                        message.country = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BillingAddress {
            return BillingAddress.deserialize(bytes);
        }
    }
    export class UpdateCustomerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            customerId?: string;
            firstName?: string;
            lastName?: string;
            phone?: string;
            billingAddress?: BillingAddress;
            status?: string;
            metadata?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("customerId" in data && data.customerId != undefined) {
                    this.customerId = data.customerId;
                }
                if ("firstName" in data && data.firstName != undefined) {
                    this.firstName = data.firstName;
                }
                if ("lastName" in data && data.lastName != undefined) {
                    this.lastName = data.lastName;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("billingAddress" in data && data.billingAddress != undefined) {
                    this.billingAddress = data.billingAddress;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get customerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set customerId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get firstName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set firstName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get lastName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set lastName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get billingAddress() {
            return pb_1.Message.getWrapperField(this, BillingAddress, 5) as BillingAddress;
        }
        set billingAddress(value: BillingAddress) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_billingAddress() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set metadata(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            customerId?: string;
            firstName?: string;
            lastName?: string;
            phone?: string;
            billingAddress?: ReturnType<typeof BillingAddress.prototype.toObject>;
            status?: string;
            metadata?: Uint8Array;
        }): UpdateCustomerRequest {
            const message = new UpdateCustomerRequest({});
            if (data.customerId != null) {
                message.customerId = data.customerId;
            }
            if (data.firstName != null) {
                message.firstName = data.firstName;
            }
            if (data.lastName != null) {
                message.lastName = data.lastName;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.billingAddress != null) {
                message.billingAddress = BillingAddress.fromObject(data.billingAddress);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            return message;
        }
        toObject() {
            const data: {
                customerId?: string;
                firstName?: string;
                lastName?: string;
                phone?: string;
                billingAddress?: ReturnType<typeof BillingAddress.prototype.toObject>;
                status?: string;
                metadata?: Uint8Array;
            } = {};
            if (this.customerId != null) {
                data.customerId = this.customerId;
            }
            if (this.firstName != null) {
                data.firstName = this.firstName;
            }
            if (this.lastName != null) {
                data.lastName = this.lastName;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.billingAddress != null) {
                data.billingAddress = this.billingAddress.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.customerId.length)
                writer.writeString(1, this.customerId);
            if (this.firstName.length)
                writer.writeString(2, this.firstName);
            if (this.lastName.length)
                writer.writeString(3, this.lastName);
            if (this.phone.length)
                writer.writeString(4, this.phone);
            if (this.has_billingAddress)
                writer.writeMessage(5, this.billingAddress, () => this.billingAddress.serialize(writer));
            if (this.status.length)
                writer.writeString(6, this.status);
            if (this.metadata.length)
                writer.writeBytes(7, this.metadata);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateCustomerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateCustomerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.customerId = reader.readString();
                        break;
                    case 2:
                        message.firstName = reader.readString();
                        break;
                    case 3:
                        message.lastName = reader.readString();
                        break;
                    case 4:
                        message.phone = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.billingAddress, () => message.billingAddress = BillingAddress.deserialize(reader));
                        break;
                    case 6:
                        message.status = reader.readString();
                        break;
                    case 7:
                        message.metadata = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateCustomerRequest {
            return UpdateCustomerRequest.deserialize(bytes);
        }
    }
    export class GetCustomerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            customerId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("customerId" in data && data.customerId != undefined) {
                    this.customerId = data.customerId;
                }
            }
        }
        get customerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set customerId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            customerId?: string;
        }): GetCustomerRequest {
            const message = new GetCustomerRequest({});
            if (data.customerId != null) {
                message.customerId = data.customerId;
            }
            return message;
        }
        toObject() {
            const data: {
                customerId?: string;
            } = {};
            if (this.customerId != null) {
                data.customerId = this.customerId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.customerId.length)
                writer.writeString(1, this.customerId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCustomerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCustomerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.customerId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCustomerRequest {
            return GetCustomerRequest.deserialize(bytes);
        }
    }
    export class ListCustomersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            filters?: CustomerFilters;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
            }
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, CustomerFilters, 1) as CustomerFilters;
        }
        set filters(value: CustomerFilters) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_filters() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            filters?: ReturnType<typeof CustomerFilters.prototype.toObject>;
        }): ListCustomersRequest {
            const message = new ListCustomersRequest({});
            if (data.filters != null) {
                message.filters = CustomerFilters.fromObject(data.filters);
            }
            return message;
        }
        toObject() {
            const data: {
                filters?: ReturnType<typeof CustomerFilters.prototype.toObject>;
            } = {};
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_filters)
                writer.writeMessage(1, this.filters, () => this.filters.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListCustomersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListCustomersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.filters, () => message.filters = CustomerFilters.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListCustomersRequest {
            return ListCustomersRequest.deserialize(bytes);
        }
    }
    export class CustomerFilters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: string;
            userId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            status?: string;
            userId?: string;
        }): CustomerFilters {
            const message = new CustomerFilters({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: string;
                userId?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status.length)
                writer.writeString(1, this.status);
            if (this.userId.length)
                writer.writeString(2, this.userId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomerFilters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomerFilters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readString();
                        break;
                    case 2:
                        message.userId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CustomerFilters {
            return CustomerFilters.deserialize(bytes);
        }
    }
    export class ListCustomersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            customers?: CustomerData[];
            count?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("customers" in data && data.customers != undefined) {
                    this.customers = data.customers;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get customers() {
            return pb_1.Message.getRepeatedWrapperField(this, CustomerData, 1) as CustomerData[];
        }
        set customers(value: CustomerData[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            customers?: ReturnType<typeof CustomerData.prototype.toObject>[];
            count?: number;
            message?: string;
        }): ListCustomersResponse {
            const message = new ListCustomersResponse({});
            if (data.customers != null) {
                message.customers = data.customers.map(item => CustomerData.fromObject(item));
            }
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                customers?: ReturnType<typeof CustomerData.prototype.toObject>[];
                count?: number;
                message?: string;
            } = {};
            if (this.customers != null) {
                data.customers = this.customers.map((item: CustomerData) => item.toObject());
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.customers.length)
                writer.writeRepeatedMessage(1, this.customers, (item: CustomerData) => item.serialize(writer));
            if (this.count != 0)
                writer.writeInt32(2, this.count);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListCustomersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListCustomersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.customers, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CustomerData.deserialize(reader), CustomerData));
                        break;
                    case 2:
                        message.count = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListCustomersResponse {
            return ListCustomersResponse.deserialize(bytes);
        }
    }
    export class DiscountCodeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            code?: string;
            type?: string;
            value?: number;
            currency?: string;
            maxUses?: number;
            expiresAt?: number;
            minimumAmount?: number;
            userId?: string;
            metadata?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("currency" in data && data.currency != undefined) {
                    this.currency = data.currency;
                }
                if ("maxUses" in data && data.maxUses != undefined) {
                    this.maxUses = data.maxUses;
                }
                if ("expiresAt" in data && data.expiresAt != undefined) {
                    this.expiresAt = data.expiresAt;
                }
                if ("minimumAmount" in data && data.minimumAmount != undefined) {
                    this.minimumAmount = data.minimumAmount;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get currency() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set currency(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get maxUses() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set maxUses(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get expiresAt() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set expiresAt(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get minimumAmount() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set minimumAmount(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 10, new Uint8Array(0)) as Uint8Array;
        }
        set metadata(value: Uint8Array) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            name?: string;
            code?: string;
            type?: string;
            value?: number;
            currency?: string;
            maxUses?: number;
            expiresAt?: number;
            minimumAmount?: number;
            userId?: string;
            metadata?: Uint8Array;
        }): DiscountCodeRequest {
            const message = new DiscountCodeRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.currency != null) {
                message.currency = data.currency;
            }
            if (data.maxUses != null) {
                message.maxUses = data.maxUses;
            }
            if (data.expiresAt != null) {
                message.expiresAt = data.expiresAt;
            }
            if (data.minimumAmount != null) {
                message.minimumAmount = data.minimumAmount;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                code?: string;
                type?: string;
                value?: number;
                currency?: string;
                maxUses?: number;
                expiresAt?: number;
                minimumAmount?: number;
                userId?: string;
                metadata?: Uint8Array;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.currency != null) {
                data.currency = this.currency;
            }
            if (this.maxUses != null) {
                data.maxUses = this.maxUses;
            }
            if (this.expiresAt != null) {
                data.expiresAt = this.expiresAt;
            }
            if (this.minimumAmount != null) {
                data.minimumAmount = this.minimumAmount;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.code.length)
                writer.writeString(2, this.code);
            if (this.type.length)
                writer.writeString(3, this.type);
            if (this.value != 0)
                writer.writeDouble(4, this.value);
            if (this.currency.length)
                writer.writeString(5, this.currency);
            if (this.maxUses != 0)
                writer.writeInt32(6, this.maxUses);
            if (this.expiresAt != 0)
                writer.writeUint64(7, this.expiresAt);
            if (this.minimumAmount != 0)
                writer.writeDouble(8, this.minimumAmount);
            if (this.userId.length)
                writer.writeString(9, this.userId);
            if (this.metadata.length)
                writer.writeBytes(10, this.metadata);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscountCodeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiscountCodeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.code = reader.readString();
                        break;
                    case 3:
                        message.type = reader.readString();
                        break;
                    case 4:
                        message.value = reader.readDouble();
                        break;
                    case 5:
                        message.currency = reader.readString();
                        break;
                    case 6:
                        message.maxUses = reader.readInt32();
                        break;
                    case 7:
                        message.expiresAt = reader.readUint64();
                        break;
                    case 8:
                        message.minimumAmount = reader.readDouble();
                        break;
                    case 9:
                        message.userId = reader.readString();
                        break;
                    case 10:
                        message.metadata = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiscountCodeRequest {
            return DiscountCodeRequest.deserialize(bytes);
        }
    }
    export class DiscountCodeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            discount?: DiscountCodeData;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("discount" in data && data.discount != undefined) {
                    this.discount = data.discount;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get discount() {
            return pb_1.Message.getWrapperField(this, DiscountCodeData, 3) as DiscountCodeData;
        }
        set discount(value: DiscountCodeData) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_discount() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            discount?: ReturnType<typeof DiscountCodeData.prototype.toObject>;
        }): DiscountCodeResponse {
            const message = new DiscountCodeResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.discount != null) {
                message.discount = DiscountCodeData.fromObject(data.discount);
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                discount?: ReturnType<typeof DiscountCodeData.prototype.toObject>;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.discount != null) {
                data.discount = this.discount.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.has_discount)
                writer.writeMessage(3, this.discount, () => this.discount.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscountCodeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiscountCodeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.discount, () => message.discount = DiscountCodeData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiscountCodeResponse {
            return DiscountCodeResponse.deserialize(bytes);
        }
    }
    export class DiscountCodeData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            discountId?: string;
            name?: string;
            code?: string;
            type?: string;
            value?: number;
            currency?: string;
            maxUses?: number;
            currentUses?: number;
            expiresAt?: number;
            minimumAmount?: number;
            isActive?: boolean;
            createdAt?: number;
            updatedAt?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("discountId" in data && data.discountId != undefined) {
                    this.discountId = data.discountId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("currency" in data && data.currency != undefined) {
                    this.currency = data.currency;
                }
                if ("maxUses" in data && data.maxUses != undefined) {
                    this.maxUses = data.maxUses;
                }
                if ("currentUses" in data && data.currentUses != undefined) {
                    this.currentUses = data.currentUses;
                }
                if ("expiresAt" in data && data.expiresAt != undefined) {
                    this.expiresAt = data.expiresAt;
                }
                if ("minimumAmount" in data && data.minimumAmount != undefined) {
                    this.minimumAmount = data.minimumAmount;
                }
                if ("isActive" in data && data.isActive != undefined) {
                    this.isActive = data.isActive;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get discountId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set discountId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get currency() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set currency(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get maxUses() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set maxUses(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get currentUses() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set currentUses(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get expiresAt() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set expiresAt(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get minimumAmount() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set minimumAmount(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get isActive() {
            return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
        }
        set isActive(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set createdAt(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get updatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set updatedAt(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        static fromObject(data: {
            id?: string;
            discountId?: string;
            name?: string;
            code?: string;
            type?: string;
            value?: number;
            currency?: string;
            maxUses?: number;
            currentUses?: number;
            expiresAt?: number;
            minimumAmount?: number;
            isActive?: boolean;
            createdAt?: number;
            updatedAt?: number;
        }): DiscountCodeData {
            const message = new DiscountCodeData({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.discountId != null) {
                message.discountId = data.discountId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.currency != null) {
                message.currency = data.currency;
            }
            if (data.maxUses != null) {
                message.maxUses = data.maxUses;
            }
            if (data.currentUses != null) {
                message.currentUses = data.currentUses;
            }
            if (data.expiresAt != null) {
                message.expiresAt = data.expiresAt;
            }
            if (data.minimumAmount != null) {
                message.minimumAmount = data.minimumAmount;
            }
            if (data.isActive != null) {
                message.isActive = data.isActive;
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.updatedAt != null) {
                message.updatedAt = data.updatedAt;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                discountId?: string;
                name?: string;
                code?: string;
                type?: string;
                value?: number;
                currency?: string;
                maxUses?: number;
                currentUses?: number;
                expiresAt?: number;
                minimumAmount?: number;
                isActive?: boolean;
                createdAt?: number;
                updatedAt?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.discountId != null) {
                data.discountId = this.discountId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.currency != null) {
                data.currency = this.currency;
            }
            if (this.maxUses != null) {
                data.maxUses = this.maxUses;
            }
            if (this.currentUses != null) {
                data.currentUses = this.currentUses;
            }
            if (this.expiresAt != null) {
                data.expiresAt = this.expiresAt;
            }
            if (this.minimumAmount != null) {
                data.minimumAmount = this.minimumAmount;
            }
            if (this.isActive != null) {
                data.isActive = this.isActive;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.discountId.length)
                writer.writeString(2, this.discountId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.code.length)
                writer.writeString(4, this.code);
            if (this.type.length)
                writer.writeString(5, this.type);
            if (this.value != 0)
                writer.writeDouble(6, this.value);
            if (this.currency.length)
                writer.writeString(7, this.currency);
            if (this.maxUses != 0)
                writer.writeInt32(8, this.maxUses);
            if (this.currentUses != 0)
                writer.writeInt32(9, this.currentUses);
            if (this.expiresAt != 0)
                writer.writeUint64(10, this.expiresAt);
            if (this.minimumAmount != 0)
                writer.writeDouble(11, this.minimumAmount);
            if (this.isActive != false)
                writer.writeBool(12, this.isActive);
            if (this.createdAt != 0)
                writer.writeUint64(13, this.createdAt);
            if (this.updatedAt != 0)
                writer.writeUint64(14, this.updatedAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscountCodeData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiscountCodeData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.discountId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.code = reader.readString();
                        break;
                    case 5:
                        message.type = reader.readString();
                        break;
                    case 6:
                        message.value = reader.readDouble();
                        break;
                    case 7:
                        message.currency = reader.readString();
                        break;
                    case 8:
                        message.maxUses = reader.readInt32();
                        break;
                    case 9:
                        message.currentUses = reader.readInt32();
                        break;
                    case 10:
                        message.expiresAt = reader.readUint64();
                        break;
                    case 11:
                        message.minimumAmount = reader.readDouble();
                        break;
                    case 12:
                        message.isActive = reader.readBool();
                        break;
                    case 13:
                        message.createdAt = reader.readUint64();
                        break;
                    case 14:
                        message.updatedAt = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiscountCodeData {
            return DiscountCodeData.deserialize(bytes);
        }
    }
    export class UpdateDiscountCodeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            discountId?: string;
            name?: string;
            type?: string;
            value?: number;
            currency?: string;
            maxUses?: number;
            expiresAt?: number;
            minimumAmount?: number;
            isActive?: boolean;
            metadata?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("discountId" in data && data.discountId != undefined) {
                    this.discountId = data.discountId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("currency" in data && data.currency != undefined) {
                    this.currency = data.currency;
                }
                if ("maxUses" in data && data.maxUses != undefined) {
                    this.maxUses = data.maxUses;
                }
                if ("expiresAt" in data && data.expiresAt != undefined) {
                    this.expiresAt = data.expiresAt;
                }
                if ("minimumAmount" in data && data.minimumAmount != undefined) {
                    this.minimumAmount = data.minimumAmount;
                }
                if ("isActive" in data && data.isActive != undefined) {
                    this.isActive = data.isActive;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get discountId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set discountId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get currency() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set currency(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get maxUses() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set maxUses(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get expiresAt() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set expiresAt(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get minimumAmount() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set minimumAmount(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get isActive() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set isActive(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 10, new Uint8Array(0)) as Uint8Array;
        }
        set metadata(value: Uint8Array) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            discountId?: string;
            name?: string;
            type?: string;
            value?: number;
            currency?: string;
            maxUses?: number;
            expiresAt?: number;
            minimumAmount?: number;
            isActive?: boolean;
            metadata?: Uint8Array;
        }): UpdateDiscountCodeRequest {
            const message = new UpdateDiscountCodeRequest({});
            if (data.discountId != null) {
                message.discountId = data.discountId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.currency != null) {
                message.currency = data.currency;
            }
            if (data.maxUses != null) {
                message.maxUses = data.maxUses;
            }
            if (data.expiresAt != null) {
                message.expiresAt = data.expiresAt;
            }
            if (data.minimumAmount != null) {
                message.minimumAmount = data.minimumAmount;
            }
            if (data.isActive != null) {
                message.isActive = data.isActive;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            return message;
        }
        toObject() {
            const data: {
                discountId?: string;
                name?: string;
                type?: string;
                value?: number;
                currency?: string;
                maxUses?: number;
                expiresAt?: number;
                minimumAmount?: number;
                isActive?: boolean;
                metadata?: Uint8Array;
            } = {};
            if (this.discountId != null) {
                data.discountId = this.discountId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.currency != null) {
                data.currency = this.currency;
            }
            if (this.maxUses != null) {
                data.maxUses = this.maxUses;
            }
            if (this.expiresAt != null) {
                data.expiresAt = this.expiresAt;
            }
            if (this.minimumAmount != null) {
                data.minimumAmount = this.minimumAmount;
            }
            if (this.isActive != null) {
                data.isActive = this.isActive;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.discountId.length)
                writer.writeString(1, this.discountId);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.type.length)
                writer.writeString(3, this.type);
            if (this.value != 0)
                writer.writeDouble(4, this.value);
            if (this.currency.length)
                writer.writeString(5, this.currency);
            if (this.maxUses != 0)
                writer.writeInt32(6, this.maxUses);
            if (this.expiresAt != 0)
                writer.writeUint64(7, this.expiresAt);
            if (this.minimumAmount != 0)
                writer.writeDouble(8, this.minimumAmount);
            if (this.isActive != false)
                writer.writeBool(9, this.isActive);
            if (this.metadata.length)
                writer.writeBytes(10, this.metadata);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateDiscountCodeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateDiscountCodeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.discountId = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.type = reader.readString();
                        break;
                    case 4:
                        message.value = reader.readDouble();
                        break;
                    case 5:
                        message.currency = reader.readString();
                        break;
                    case 6:
                        message.maxUses = reader.readInt32();
                        break;
                    case 7:
                        message.expiresAt = reader.readUint64();
                        break;
                    case 8:
                        message.minimumAmount = reader.readDouble();
                        break;
                    case 9:
                        message.isActive = reader.readBool();
                        break;
                    case 10:
                        message.metadata = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateDiscountCodeRequest {
            return UpdateDiscountCodeRequest.deserialize(bytes);
        }
    }
    export class GetDiscountCodeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            discountId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("discountId" in data && data.discountId != undefined) {
                    this.discountId = data.discountId;
                }
            }
        }
        get discountId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set discountId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            discountId?: string;
        }): GetDiscountCodeRequest {
            const message = new GetDiscountCodeRequest({});
            if (data.discountId != null) {
                message.discountId = data.discountId;
            }
            return message;
        }
        toObject() {
            const data: {
                discountId?: string;
            } = {};
            if (this.discountId != null) {
                data.discountId = this.discountId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.discountId.length)
                writer.writeString(1, this.discountId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDiscountCodeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDiscountCodeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.discountId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDiscountCodeRequest {
            return GetDiscountCodeRequest.deserialize(bytes);
        }
    }
    export class ListDiscountCodesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            filters?: DiscountCodeFilters;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
            }
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, DiscountCodeFilters, 1) as DiscountCodeFilters;
        }
        set filters(value: DiscountCodeFilters) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_filters() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            filters?: ReturnType<typeof DiscountCodeFilters.prototype.toObject>;
        }): ListDiscountCodesRequest {
            const message = new ListDiscountCodesRequest({});
            if (data.filters != null) {
                message.filters = DiscountCodeFilters.fromObject(data.filters);
            }
            return message;
        }
        toObject() {
            const data: {
                filters?: ReturnType<typeof DiscountCodeFilters.prototype.toObject>;
            } = {};
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_filters)
                writer.writeMessage(1, this.filters, () => this.filters.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListDiscountCodesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListDiscountCodesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.filters, () => message.filters = DiscountCodeFilters.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListDiscountCodesRequest {
            return ListDiscountCodesRequest.deserialize(bytes);
        }
    }
    export class DiscountCodeFilters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            isActive?: boolean;
            createdBy?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("isActive" in data && data.isActive != undefined) {
                    this.isActive = data.isActive;
                }
                if ("createdBy" in data && data.createdBy != undefined) {
                    this.createdBy = data.createdBy;
                }
            }
        }
        get isActive() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set isActive(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get createdBy() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set createdBy(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            isActive?: boolean;
            createdBy?: string;
        }): DiscountCodeFilters {
            const message = new DiscountCodeFilters({});
            if (data.isActive != null) {
                message.isActive = data.isActive;
            }
            if (data.createdBy != null) {
                message.createdBy = data.createdBy;
            }
            return message;
        }
        toObject() {
            const data: {
                isActive?: boolean;
                createdBy?: string;
            } = {};
            if (this.isActive != null) {
                data.isActive = this.isActive;
            }
            if (this.createdBy != null) {
                data.createdBy = this.createdBy;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.isActive != false)
                writer.writeBool(1, this.isActive);
            if (this.createdBy.length)
                writer.writeString(2, this.createdBy);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscountCodeFilters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiscountCodeFilters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.isActive = reader.readBool();
                        break;
                    case 2:
                        message.createdBy = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiscountCodeFilters {
            return DiscountCodeFilters.deserialize(bytes);
        }
    }
    export class ListDiscountCodesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            discounts?: DiscountCodeData[];
            count?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("discounts" in data && data.discounts != undefined) {
                    this.discounts = data.discounts;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get discounts() {
            return pb_1.Message.getRepeatedWrapperField(this, DiscountCodeData, 1) as DiscountCodeData[];
        }
        set discounts(value: DiscountCodeData[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            discounts?: ReturnType<typeof DiscountCodeData.prototype.toObject>[];
            count?: number;
            message?: string;
        }): ListDiscountCodesResponse {
            const message = new ListDiscountCodesResponse({});
            if (data.discounts != null) {
                message.discounts = data.discounts.map(item => DiscountCodeData.fromObject(item));
            }
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                discounts?: ReturnType<typeof DiscountCodeData.prototype.toObject>[];
                count?: number;
                message?: string;
            } = {};
            if (this.discounts != null) {
                data.discounts = this.discounts.map((item: DiscountCodeData) => item.toObject());
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.discounts.length)
                writer.writeRepeatedMessage(1, this.discounts, (item: DiscountCodeData) => item.serialize(writer));
            if (this.count != 0)
                writer.writeInt32(2, this.count);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListDiscountCodesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListDiscountCodesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.discounts, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DiscountCodeData.deserialize(reader), DiscountCodeData));
                        break;
                    case 2:
                        message.count = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListDiscountCodesResponse {
            return ListDiscountCodesResponse.deserialize(bytes);
        }
    }
    export class InvoiceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            customerId?: string;
            products?: Product[];
            totalAmount?: number;
            currency?: string;
            discountCode?: string;
            discountAmount?: number;
            taxAmount?: number;
            dueDate?: number;
            billingAddress?: BillingAddress;
            userId?: string;
            metadata?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("customerId" in data && data.customerId != undefined) {
                    this.customerId = data.customerId;
                }
                if ("products" in data && data.products != undefined) {
                    this.products = data.products;
                }
                if ("totalAmount" in data && data.totalAmount != undefined) {
                    this.totalAmount = data.totalAmount;
                }
                if ("currency" in data && data.currency != undefined) {
                    this.currency = data.currency;
                }
                if ("discountCode" in data && data.discountCode != undefined) {
                    this.discountCode = data.discountCode;
                }
                if ("discountAmount" in data && data.discountAmount != undefined) {
                    this.discountAmount = data.discountAmount;
                }
                if ("taxAmount" in data && data.taxAmount != undefined) {
                    this.taxAmount = data.taxAmount;
                }
                if ("dueDate" in data && data.dueDate != undefined) {
                    this.dueDate = data.dueDate;
                }
                if ("billingAddress" in data && data.billingAddress != undefined) {
                    this.billingAddress = data.billingAddress;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get customerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set customerId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get products() {
            return pb_1.Message.getRepeatedWrapperField(this, Product, 2) as Product[];
        }
        set products(value: Product[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get totalAmount() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set totalAmount(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get currency() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set currency(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get discountCode() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set discountCode(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get discountAmount() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set discountAmount(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get taxAmount() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set taxAmount(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get dueDate() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set dueDate(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get billingAddress() {
            return pb_1.Message.getWrapperField(this, BillingAddress, 9) as BillingAddress;
        }
        set billingAddress(value: BillingAddress) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_billingAddress() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 11, new Uint8Array(0)) as Uint8Array;
        }
        set metadata(value: Uint8Array) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            customerId?: string;
            products?: ReturnType<typeof Product.prototype.toObject>[];
            totalAmount?: number;
            currency?: string;
            discountCode?: string;
            discountAmount?: number;
            taxAmount?: number;
            dueDate?: number;
            billingAddress?: ReturnType<typeof BillingAddress.prototype.toObject>;
            userId?: string;
            metadata?: Uint8Array;
        }): InvoiceRequest {
            const message = new InvoiceRequest({});
            if (data.customerId != null) {
                message.customerId = data.customerId;
            }
            if (data.products != null) {
                message.products = data.products.map(item => Product.fromObject(item));
            }
            if (data.totalAmount != null) {
                message.totalAmount = data.totalAmount;
            }
            if (data.currency != null) {
                message.currency = data.currency;
            }
            if (data.discountCode != null) {
                message.discountCode = data.discountCode;
            }
            if (data.discountAmount != null) {
                message.discountAmount = data.discountAmount;
            }
            if (data.taxAmount != null) {
                message.taxAmount = data.taxAmount;
            }
            if (data.dueDate != null) {
                message.dueDate = data.dueDate;
            }
            if (data.billingAddress != null) {
                message.billingAddress = BillingAddress.fromObject(data.billingAddress);
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            return message;
        }
        toObject() {
            const data: {
                customerId?: string;
                products?: ReturnType<typeof Product.prototype.toObject>[];
                totalAmount?: number;
                currency?: string;
                discountCode?: string;
                discountAmount?: number;
                taxAmount?: number;
                dueDate?: number;
                billingAddress?: ReturnType<typeof BillingAddress.prototype.toObject>;
                userId?: string;
                metadata?: Uint8Array;
            } = {};
            if (this.customerId != null) {
                data.customerId = this.customerId;
            }
            if (this.products != null) {
                data.products = this.products.map((item: Product) => item.toObject());
            }
            if (this.totalAmount != null) {
                data.totalAmount = this.totalAmount;
            }
            if (this.currency != null) {
                data.currency = this.currency;
            }
            if (this.discountCode != null) {
                data.discountCode = this.discountCode;
            }
            if (this.discountAmount != null) {
                data.discountAmount = this.discountAmount;
            }
            if (this.taxAmount != null) {
                data.taxAmount = this.taxAmount;
            }
            if (this.dueDate != null) {
                data.dueDate = this.dueDate;
            }
            if (this.billingAddress != null) {
                data.billingAddress = this.billingAddress.toObject();
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.customerId.length)
                writer.writeString(1, this.customerId);
            if (this.products.length)
                writer.writeRepeatedMessage(2, this.products, (item: Product) => item.serialize(writer));
            if (this.totalAmount != 0)
                writer.writeDouble(3, this.totalAmount);
            if (this.currency.length)
                writer.writeString(4, this.currency);
            if (this.discountCode.length)
                writer.writeString(5, this.discountCode);
            if (this.discountAmount != 0)
                writer.writeDouble(6, this.discountAmount);
            if (this.taxAmount != 0)
                writer.writeDouble(7, this.taxAmount);
            if (this.dueDate != 0)
                writer.writeUint64(8, this.dueDate);
            if (this.has_billingAddress)
                writer.writeMessage(9, this.billingAddress, () => this.billingAddress.serialize(writer));
            if (this.userId.length)
                writer.writeString(10, this.userId);
            if (this.metadata.length)
                writer.writeBytes(11, this.metadata);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvoiceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvoiceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.customerId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.products, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Product.deserialize(reader), Product));
                        break;
                    case 3:
                        message.totalAmount = reader.readDouble();
                        break;
                    case 4:
                        message.currency = reader.readString();
                        break;
                    case 5:
                        message.discountCode = reader.readString();
                        break;
                    case 6:
                        message.discountAmount = reader.readDouble();
                        break;
                    case 7:
                        message.taxAmount = reader.readDouble();
                        break;
                    case 8:
                        message.dueDate = reader.readUint64();
                        break;
                    case 9:
                        reader.readMessage(message.billingAddress, () => message.billingAddress = BillingAddress.deserialize(reader));
                        break;
                    case 10:
                        message.userId = reader.readString();
                        break;
                    case 11:
                        message.metadata = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InvoiceRequest {
            return InvoiceRequest.deserialize(bytes);
        }
    }
    export class InvoiceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            invoice?: InvoiceData;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("invoice" in data && data.invoice != undefined) {
                    this.invoice = data.invoice;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get invoice() {
            return pb_1.Message.getWrapperField(this, InvoiceData, 3) as InvoiceData;
        }
        set invoice(value: InvoiceData) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_invoice() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            invoice?: ReturnType<typeof InvoiceData.prototype.toObject>;
        }): InvoiceResponse {
            const message = new InvoiceResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.invoice != null) {
                message.invoice = InvoiceData.fromObject(data.invoice);
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                invoice?: ReturnType<typeof InvoiceData.prototype.toObject>;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.invoice != null) {
                data.invoice = this.invoice.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.has_invoice)
                writer.writeMessage(3, this.invoice, () => this.invoice.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvoiceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvoiceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.invoice, () => message.invoice = InvoiceData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InvoiceResponse {
            return InvoiceResponse.deserialize(bytes);
        }
    }
    export class InvoiceData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            invoiceId?: string;
            invoiceNumber?: string;
            customerId?: string;
            products?: Product[];
            subtotalAmount?: number;
            totalAmount?: number;
            currency?: string;
            discountCode?: string;
            discountAmount?: number;
            taxAmount?: number;
            dueDate?: number;
            status?: string;
            paymentStatus?: string;
            createdAt?: number;
            updatedAt?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("invoiceId" in data && data.invoiceId != undefined) {
                    this.invoiceId = data.invoiceId;
                }
                if ("invoiceNumber" in data && data.invoiceNumber != undefined) {
                    this.invoiceNumber = data.invoiceNumber;
                }
                if ("customerId" in data && data.customerId != undefined) {
                    this.customerId = data.customerId;
                }
                if ("products" in data && data.products != undefined) {
                    this.products = data.products;
                }
                if ("subtotalAmount" in data && data.subtotalAmount != undefined) {
                    this.subtotalAmount = data.subtotalAmount;
                }
                if ("totalAmount" in data && data.totalAmount != undefined) {
                    this.totalAmount = data.totalAmount;
                }
                if ("currency" in data && data.currency != undefined) {
                    this.currency = data.currency;
                }
                if ("discountCode" in data && data.discountCode != undefined) {
                    this.discountCode = data.discountCode;
                }
                if ("discountAmount" in data && data.discountAmount != undefined) {
                    this.discountAmount = data.discountAmount;
                }
                if ("taxAmount" in data && data.taxAmount != undefined) {
                    this.taxAmount = data.taxAmount;
                }
                if ("dueDate" in data && data.dueDate != undefined) {
                    this.dueDate = data.dueDate;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("paymentStatus" in data && data.paymentStatus != undefined) {
                    this.paymentStatus = data.paymentStatus;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get invoiceId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set invoiceId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get invoiceNumber() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set invoiceNumber(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get customerId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set customerId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get products() {
            return pb_1.Message.getRepeatedWrapperField(this, Product, 5) as Product[];
        }
        set products(value: Product[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get subtotalAmount() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set subtotalAmount(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get totalAmount() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set totalAmount(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get currency() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set currency(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get discountCode() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set discountCode(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get discountAmount() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set discountAmount(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get taxAmount() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set taxAmount(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get dueDate() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set dueDate(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get paymentStatus() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set paymentStatus(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set createdAt(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get updatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set updatedAt(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        static fromObject(data: {
            id?: string;
            invoiceId?: string;
            invoiceNumber?: string;
            customerId?: string;
            products?: ReturnType<typeof Product.prototype.toObject>[];
            subtotalAmount?: number;
            totalAmount?: number;
            currency?: string;
            discountCode?: string;
            discountAmount?: number;
            taxAmount?: number;
            dueDate?: number;
            status?: string;
            paymentStatus?: string;
            createdAt?: number;
            updatedAt?: number;
        }): InvoiceData {
            const message = new InvoiceData({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.invoiceId != null) {
                message.invoiceId = data.invoiceId;
            }
            if (data.invoiceNumber != null) {
                message.invoiceNumber = data.invoiceNumber;
            }
            if (data.customerId != null) {
                message.customerId = data.customerId;
            }
            if (data.products != null) {
                message.products = data.products.map(item => Product.fromObject(item));
            }
            if (data.subtotalAmount != null) {
                message.subtotalAmount = data.subtotalAmount;
            }
            if (data.totalAmount != null) {
                message.totalAmount = data.totalAmount;
            }
            if (data.currency != null) {
                message.currency = data.currency;
            }
            if (data.discountCode != null) {
                message.discountCode = data.discountCode;
            }
            if (data.discountAmount != null) {
                message.discountAmount = data.discountAmount;
            }
            if (data.taxAmount != null) {
                message.taxAmount = data.taxAmount;
            }
            if (data.dueDate != null) {
                message.dueDate = data.dueDate;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.paymentStatus != null) {
                message.paymentStatus = data.paymentStatus;
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.updatedAt != null) {
                message.updatedAt = data.updatedAt;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                invoiceId?: string;
                invoiceNumber?: string;
                customerId?: string;
                products?: ReturnType<typeof Product.prototype.toObject>[];
                subtotalAmount?: number;
                totalAmount?: number;
                currency?: string;
                discountCode?: string;
                discountAmount?: number;
                taxAmount?: number;
                dueDate?: number;
                status?: string;
                paymentStatus?: string;
                createdAt?: number;
                updatedAt?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.invoiceId != null) {
                data.invoiceId = this.invoiceId;
            }
            if (this.invoiceNumber != null) {
                data.invoiceNumber = this.invoiceNumber;
            }
            if (this.customerId != null) {
                data.customerId = this.customerId;
            }
            if (this.products != null) {
                data.products = this.products.map((item: Product) => item.toObject());
            }
            if (this.subtotalAmount != null) {
                data.subtotalAmount = this.subtotalAmount;
            }
            if (this.totalAmount != null) {
                data.totalAmount = this.totalAmount;
            }
            if (this.currency != null) {
                data.currency = this.currency;
            }
            if (this.discountCode != null) {
                data.discountCode = this.discountCode;
            }
            if (this.discountAmount != null) {
                data.discountAmount = this.discountAmount;
            }
            if (this.taxAmount != null) {
                data.taxAmount = this.taxAmount;
            }
            if (this.dueDate != null) {
                data.dueDate = this.dueDate;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.paymentStatus != null) {
                data.paymentStatus = this.paymentStatus;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.invoiceId.length)
                writer.writeString(2, this.invoiceId);
            if (this.invoiceNumber.length)
                writer.writeString(3, this.invoiceNumber);
            if (this.customerId.length)
                writer.writeString(4, this.customerId);
            if (this.products.length)
                writer.writeRepeatedMessage(5, this.products, (item: Product) => item.serialize(writer));
            if (this.subtotalAmount != 0)
                writer.writeDouble(6, this.subtotalAmount);
            if (this.totalAmount != 0)
                writer.writeDouble(7, this.totalAmount);
            if (this.currency.length)
                writer.writeString(8, this.currency);
            if (this.discountCode.length)
                writer.writeString(9, this.discountCode);
            if (this.discountAmount != 0)
                writer.writeDouble(10, this.discountAmount);
            if (this.taxAmount != 0)
                writer.writeDouble(11, this.taxAmount);
            if (this.dueDate != 0)
                writer.writeUint64(12, this.dueDate);
            if (this.status.length)
                writer.writeString(13, this.status);
            if (this.paymentStatus.length)
                writer.writeString(14, this.paymentStatus);
            if (this.createdAt != 0)
                writer.writeUint64(15, this.createdAt);
            if (this.updatedAt != 0)
                writer.writeUint64(16, this.updatedAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvoiceData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvoiceData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.invoiceId = reader.readString();
                        break;
                    case 3:
                        message.invoiceNumber = reader.readString();
                        break;
                    case 4:
                        message.customerId = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.products, () => pb_1.Message.addToRepeatedWrapperField(message, 5, Product.deserialize(reader), Product));
                        break;
                    case 6:
                        message.subtotalAmount = reader.readDouble();
                        break;
                    case 7:
                        message.totalAmount = reader.readDouble();
                        break;
                    case 8:
                        message.currency = reader.readString();
                        break;
                    case 9:
                        message.discountCode = reader.readString();
                        break;
                    case 10:
                        message.discountAmount = reader.readDouble();
                        break;
                    case 11:
                        message.taxAmount = reader.readDouble();
                        break;
                    case 12:
                        message.dueDate = reader.readUint64();
                        break;
                    case 13:
                        message.status = reader.readString();
                        break;
                    case 14:
                        message.paymentStatus = reader.readString();
                        break;
                    case 15:
                        message.createdAt = reader.readUint64();
                        break;
                    case 16:
                        message.updatedAt = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InvoiceData {
            return InvoiceData.deserialize(bytes);
        }
    }
    export class Product extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            description?: string;
            price?: number;
            quantity?: number;
            sku?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("quantity" in data && data.quantity != undefined) {
                    this.quantity = data.quantity;
                }
                if ("sku" in data && data.sku != undefined) {
                    this.sku = data.sku;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get quantity() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set quantity(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get sku() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set sku(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            description?: string;
            price?: number;
            quantity?: number;
            sku?: string;
        }): Product {
            const message = new Product({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.quantity != null) {
                message.quantity = data.quantity;
            }
            if (data.sku != null) {
                message.sku = data.sku;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                description?: string;
                price?: number;
                quantity?: number;
                sku?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.quantity != null) {
                data.quantity = this.quantity;
            }
            if (this.sku != null) {
                data.sku = this.sku;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.price != 0)
                writer.writeDouble(4, this.price);
            if (this.quantity != 0)
                writer.writeInt32(5, this.quantity);
            if (this.sku.length)
                writer.writeString(6, this.sku);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Product {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Product();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.price = reader.readDouble();
                        break;
                    case 5:
                        message.quantity = reader.readInt32();
                        break;
                    case 6:
                        message.sku = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Product {
            return Product.deserialize(bytes);
        }
    }
    export class UpdateInvoiceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            invoiceId?: string;
            status?: string;
            paymentStatus?: string;
            products?: Product[];
            subtotalAmount?: number;
            totalAmount?: number;
            taxAmount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invoiceId" in data && data.invoiceId != undefined) {
                    this.invoiceId = data.invoiceId;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("paymentStatus" in data && data.paymentStatus != undefined) {
                    this.paymentStatus = data.paymentStatus;
                }
                if ("products" in data && data.products != undefined) {
                    this.products = data.products;
                }
                if ("subtotalAmount" in data && data.subtotalAmount != undefined) {
                    this.subtotalAmount = data.subtotalAmount;
                }
                if ("totalAmount" in data && data.totalAmount != undefined) {
                    this.totalAmount = data.totalAmount;
                }
                if ("taxAmount" in data && data.taxAmount != undefined) {
                    this.taxAmount = data.taxAmount;
                }
            }
        }
        get invoiceId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set invoiceId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get paymentStatus() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set paymentStatus(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get products() {
            return pb_1.Message.getRepeatedWrapperField(this, Product, 4) as Product[];
        }
        set products(value: Product[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get subtotalAmount() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set subtotalAmount(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get totalAmount() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set totalAmount(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get taxAmount() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set taxAmount(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            invoiceId?: string;
            status?: string;
            paymentStatus?: string;
            products?: ReturnType<typeof Product.prototype.toObject>[];
            subtotalAmount?: number;
            totalAmount?: number;
            taxAmount?: number;
        }): UpdateInvoiceRequest {
            const message = new UpdateInvoiceRequest({});
            if (data.invoiceId != null) {
                message.invoiceId = data.invoiceId;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.paymentStatus != null) {
                message.paymentStatus = data.paymentStatus;
            }
            if (data.products != null) {
                message.products = data.products.map(item => Product.fromObject(item));
            }
            if (data.subtotalAmount != null) {
                message.subtotalAmount = data.subtotalAmount;
            }
            if (data.totalAmount != null) {
                message.totalAmount = data.totalAmount;
            }
            if (data.taxAmount != null) {
                message.taxAmount = data.taxAmount;
            }
            return message;
        }
        toObject() {
            const data: {
                invoiceId?: string;
                status?: string;
                paymentStatus?: string;
                products?: ReturnType<typeof Product.prototype.toObject>[];
                subtotalAmount?: number;
                totalAmount?: number;
                taxAmount?: number;
            } = {};
            if (this.invoiceId != null) {
                data.invoiceId = this.invoiceId;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.paymentStatus != null) {
                data.paymentStatus = this.paymentStatus;
            }
            if (this.products != null) {
                data.products = this.products.map((item: Product) => item.toObject());
            }
            if (this.subtotalAmount != null) {
                data.subtotalAmount = this.subtotalAmount;
            }
            if (this.totalAmount != null) {
                data.totalAmount = this.totalAmount;
            }
            if (this.taxAmount != null) {
                data.taxAmount = this.taxAmount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invoiceId.length)
                writer.writeString(1, this.invoiceId);
            if (this.status.length)
                writer.writeString(2, this.status);
            if (this.paymentStatus.length)
                writer.writeString(3, this.paymentStatus);
            if (this.products.length)
                writer.writeRepeatedMessage(4, this.products, (item: Product) => item.serialize(writer));
            if (this.subtotalAmount != 0)
                writer.writeDouble(5, this.subtotalAmount);
            if (this.totalAmount != 0)
                writer.writeDouble(6, this.totalAmount);
            if (this.taxAmount != 0)
                writer.writeDouble(7, this.taxAmount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateInvoiceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateInvoiceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.invoiceId = reader.readString();
                        break;
                    case 2:
                        message.status = reader.readString();
                        break;
                    case 3:
                        message.paymentStatus = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.products, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Product.deserialize(reader), Product));
                        break;
                    case 5:
                        message.subtotalAmount = reader.readDouble();
                        break;
                    case 6:
                        message.totalAmount = reader.readDouble();
                        break;
                    case 7:
                        message.taxAmount = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateInvoiceRequest {
            return UpdateInvoiceRequest.deserialize(bytes);
        }
    }
    export class GetInvoiceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            invoiceId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invoiceId" in data && data.invoiceId != undefined) {
                    this.invoiceId = data.invoiceId;
                }
            }
        }
        get invoiceId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set invoiceId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            invoiceId?: string;
        }): GetInvoiceRequest {
            const message = new GetInvoiceRequest({});
            if (data.invoiceId != null) {
                message.invoiceId = data.invoiceId;
            }
            return message;
        }
        toObject() {
            const data: {
                invoiceId?: string;
            } = {};
            if (this.invoiceId != null) {
                data.invoiceId = this.invoiceId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invoiceId.length)
                writer.writeString(1, this.invoiceId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetInvoiceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetInvoiceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.invoiceId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetInvoiceRequest {
            return GetInvoiceRequest.deserialize(bytes);
        }
    }
    export class ListInvoicesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            filters?: InvoiceFilters;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
            }
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, InvoiceFilters, 1) as InvoiceFilters;
        }
        set filters(value: InvoiceFilters) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_filters() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            filters?: ReturnType<typeof InvoiceFilters.prototype.toObject>;
        }): ListInvoicesRequest {
            const message = new ListInvoicesRequest({});
            if (data.filters != null) {
                message.filters = InvoiceFilters.fromObject(data.filters);
            }
            return message;
        }
        toObject() {
            const data: {
                filters?: ReturnType<typeof InvoiceFilters.prototype.toObject>;
            } = {};
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_filters)
                writer.writeMessage(1, this.filters, () => this.filters.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListInvoicesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListInvoicesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.filters, () => message.filters = InvoiceFilters.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListInvoicesRequest {
            return ListInvoicesRequest.deserialize(bytes);
        }
    }
    export class InvoiceFilters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            customerId?: string;
            status?: string;
            paymentStatus?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("customerId" in data && data.customerId != undefined) {
                    this.customerId = data.customerId;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("paymentStatus" in data && data.paymentStatus != undefined) {
                    this.paymentStatus = data.paymentStatus;
                }
            }
        }
        get customerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set customerId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get paymentStatus() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set paymentStatus(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            customerId?: string;
            status?: string;
            paymentStatus?: string;
        }): InvoiceFilters {
            const message = new InvoiceFilters({});
            if (data.customerId != null) {
                message.customerId = data.customerId;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.paymentStatus != null) {
                message.paymentStatus = data.paymentStatus;
            }
            return message;
        }
        toObject() {
            const data: {
                customerId?: string;
                status?: string;
                paymentStatus?: string;
            } = {};
            if (this.customerId != null) {
                data.customerId = this.customerId;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.paymentStatus != null) {
                data.paymentStatus = this.paymentStatus;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.customerId.length)
                writer.writeString(1, this.customerId);
            if (this.status.length)
                writer.writeString(2, this.status);
            if (this.paymentStatus.length)
                writer.writeString(3, this.paymentStatus);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvoiceFilters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvoiceFilters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.customerId = reader.readString();
                        break;
                    case 2:
                        message.status = reader.readString();
                        break;
                    case 3:
                        message.paymentStatus = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InvoiceFilters {
            return InvoiceFilters.deserialize(bytes);
        }
    }
    export class ListInvoicesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            invoices?: InvoiceData[];
            count?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invoices" in data && data.invoices != undefined) {
                    this.invoices = data.invoices;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get invoices() {
            return pb_1.Message.getRepeatedWrapperField(this, InvoiceData, 1) as InvoiceData[];
        }
        set invoices(value: InvoiceData[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            invoices?: ReturnType<typeof InvoiceData.prototype.toObject>[];
            count?: number;
            message?: string;
        }): ListInvoicesResponse {
            const message = new ListInvoicesResponse({});
            if (data.invoices != null) {
                message.invoices = data.invoices.map(item => InvoiceData.fromObject(item));
            }
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                invoices?: ReturnType<typeof InvoiceData.prototype.toObject>[];
                count?: number;
                message?: string;
            } = {};
            if (this.invoices != null) {
                data.invoices = this.invoices.map((item: InvoiceData) => item.toObject());
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invoices.length)
                writer.writeRepeatedMessage(1, this.invoices, (item: InvoiceData) => item.serialize(writer));
            if (this.count != 0)
                writer.writeInt32(2, this.count);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListInvoicesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListInvoicesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.invoices, () => pb_1.Message.addToRepeatedWrapperField(message, 1, InvoiceData.deserialize(reader), InvoiceData));
                        break;
                    case 2:
                        message.count = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListInvoicesResponse {
            return ListInvoicesResponse.deserialize(bytes);
        }
    }
    export class LoyaltyPointsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            customerId?: string;
            totalAmount?: number;
            orderId?: string;
            invoiceId?: string;
            transactionId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("customerId" in data && data.customerId != undefined) {
                    this.customerId = data.customerId;
                }
                if ("totalAmount" in data && data.totalAmount != undefined) {
                    this.totalAmount = data.totalAmount;
                }
                if ("orderId" in data && data.orderId != undefined) {
                    this.orderId = data.orderId;
                }
                if ("invoiceId" in data && data.invoiceId != undefined) {
                    this.invoiceId = data.invoiceId;
                }
                if ("transactionId" in data && data.transactionId != undefined) {
                    this.transactionId = data.transactionId;
                }
            }
        }
        get customerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set customerId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get totalAmount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set totalAmount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get orderId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set orderId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get invoiceId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set invoiceId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get transactionId() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set transactionId(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            customerId?: string;
            totalAmount?: number;
            orderId?: string;
            invoiceId?: string;
            transactionId?: string;
        }): LoyaltyPointsRequest {
            const message = new LoyaltyPointsRequest({});
            if (data.customerId != null) {
                message.customerId = data.customerId;
            }
            if (data.totalAmount != null) {
                message.totalAmount = data.totalAmount;
            }
            if (data.orderId != null) {
                message.orderId = data.orderId;
            }
            if (data.invoiceId != null) {
                message.invoiceId = data.invoiceId;
            }
            if (data.transactionId != null) {
                message.transactionId = data.transactionId;
            }
            return message;
        }
        toObject() {
            const data: {
                customerId?: string;
                totalAmount?: number;
                orderId?: string;
                invoiceId?: string;
                transactionId?: string;
            } = {};
            if (this.customerId != null) {
                data.customerId = this.customerId;
            }
            if (this.totalAmount != null) {
                data.totalAmount = this.totalAmount;
            }
            if (this.orderId != null) {
                data.orderId = this.orderId;
            }
            if (this.invoiceId != null) {
                data.invoiceId = this.invoiceId;
            }
            if (this.transactionId != null) {
                data.transactionId = this.transactionId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.customerId.length)
                writer.writeString(1, this.customerId);
            if (this.totalAmount != 0)
                writer.writeDouble(2, this.totalAmount);
            if (this.orderId.length)
                writer.writeString(3, this.orderId);
            if (this.invoiceId.length)
                writer.writeString(4, this.invoiceId);
            if (this.transactionId.length)
                writer.writeString(5, this.transactionId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoyaltyPointsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoyaltyPointsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.customerId = reader.readString();
                        break;
                    case 2:
                        message.totalAmount = reader.readDouble();
                        break;
                    case 3:
                        message.orderId = reader.readString();
                        break;
                    case 4:
                        message.invoiceId = reader.readString();
                        break;
                    case 5:
                        message.transactionId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoyaltyPointsRequest {
            return LoyaltyPointsRequest.deserialize(bytes);
        }
    }
    export class LoyaltyPointsSpendRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            customerId?: string;
            pointsToSpend?: number;
            orderId?: string;
            invoiceId?: string;
            transactionId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("customerId" in data && data.customerId != undefined) {
                    this.customerId = data.customerId;
                }
                if ("pointsToSpend" in data && data.pointsToSpend != undefined) {
                    this.pointsToSpend = data.pointsToSpend;
                }
                if ("orderId" in data && data.orderId != undefined) {
                    this.orderId = data.orderId;
                }
                if ("invoiceId" in data && data.invoiceId != undefined) {
                    this.invoiceId = data.invoiceId;
                }
                if ("transactionId" in data && data.transactionId != undefined) {
                    this.transactionId = data.transactionId;
                }
            }
        }
        get customerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set customerId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get pointsToSpend() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set pointsToSpend(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get orderId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set orderId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get invoiceId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set invoiceId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get transactionId() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set transactionId(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            customerId?: string;
            pointsToSpend?: number;
            orderId?: string;
            invoiceId?: string;
            transactionId?: string;
        }): LoyaltyPointsSpendRequest {
            const message = new LoyaltyPointsSpendRequest({});
            if (data.customerId != null) {
                message.customerId = data.customerId;
            }
            if (data.pointsToSpend != null) {
                message.pointsToSpend = data.pointsToSpend;
            }
            if (data.orderId != null) {
                message.orderId = data.orderId;
            }
            if (data.invoiceId != null) {
                message.invoiceId = data.invoiceId;
            }
            if (data.transactionId != null) {
                message.transactionId = data.transactionId;
            }
            return message;
        }
        toObject() {
            const data: {
                customerId?: string;
                pointsToSpend?: number;
                orderId?: string;
                invoiceId?: string;
                transactionId?: string;
            } = {};
            if (this.customerId != null) {
                data.customerId = this.customerId;
            }
            if (this.pointsToSpend != null) {
                data.pointsToSpend = this.pointsToSpend;
            }
            if (this.orderId != null) {
                data.orderId = this.orderId;
            }
            if (this.invoiceId != null) {
                data.invoiceId = this.invoiceId;
            }
            if (this.transactionId != null) {
                data.transactionId = this.transactionId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.customerId.length)
                writer.writeString(1, this.customerId);
            if (this.pointsToSpend != 0)
                writer.writeDouble(2, this.pointsToSpend);
            if (this.orderId.length)
                writer.writeString(3, this.orderId);
            if (this.invoiceId.length)
                writer.writeString(4, this.invoiceId);
            if (this.transactionId.length)
                writer.writeString(5, this.transactionId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoyaltyPointsSpendRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoyaltyPointsSpendRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.customerId = reader.readString();
                        break;
                    case 2:
                        message.pointsToSpend = reader.readDouble();
                        break;
                    case 3:
                        message.orderId = reader.readString();
                        break;
                    case 4:
                        message.invoiceId = reader.readString();
                        break;
                    case 5:
                        message.transactionId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoyaltyPointsSpendRequest {
            return LoyaltyPointsSpendRequest.deserialize(bytes);
        }
    }
    export class LoyaltyPointsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            loyalty?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("loyalty" in data && data.loyalty != undefined) {
                    this.loyalty = data.loyalty;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get loyalty() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set loyalty(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            loyalty?: Uint8Array;
        }): LoyaltyPointsResponse {
            const message = new LoyaltyPointsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.loyalty != null) {
                message.loyalty = data.loyalty;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                loyalty?: Uint8Array;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.loyalty != null) {
                data.loyalty = this.loyalty;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.loyalty.length)
                writer.writeBytes(3, this.loyalty);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoyaltyPointsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoyaltyPointsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.loyalty = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoyaltyPointsResponse {
            return LoyaltyPointsResponse.deserialize(bytes);
        }
    }
    export class CustomerLoyaltyStatusRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            customerId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("customerId" in data && data.customerId != undefined) {
                    this.customerId = data.customerId;
                }
            }
        }
        get customerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set customerId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            customerId?: string;
        }): CustomerLoyaltyStatusRequest {
            const message = new CustomerLoyaltyStatusRequest({});
            if (data.customerId != null) {
                message.customerId = data.customerId;
            }
            return message;
        }
        toObject() {
            const data: {
                customerId?: string;
            } = {};
            if (this.customerId != null) {
                data.customerId = this.customerId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.customerId.length)
                writer.writeString(1, this.customerId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomerLoyaltyStatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomerLoyaltyStatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.customerId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CustomerLoyaltyStatusRequest {
            return CustomerLoyaltyStatusRequest.deserialize(bytes);
        }
    }
    export class CustomerLoyaltyStatusResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            loyaltyStatus?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("loyaltyStatus" in data && data.loyaltyStatus != undefined) {
                    this.loyaltyStatus = data.loyaltyStatus;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get loyaltyStatus() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set loyaltyStatus(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            loyaltyStatus?: Uint8Array;
        }): CustomerLoyaltyStatusResponse {
            const message = new CustomerLoyaltyStatusResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.loyaltyStatus != null) {
                message.loyaltyStatus = data.loyaltyStatus;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                loyaltyStatus?: Uint8Array;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.loyaltyStatus != null) {
                data.loyaltyStatus = this.loyaltyStatus;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.loyaltyStatus.length)
                writer.writeBytes(3, this.loyaltyStatus);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomerLoyaltyStatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomerLoyaltyStatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.loyaltyStatus = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CustomerLoyaltyStatusResponse {
            return CustomerLoyaltyStatusResponse.deserialize(bytes);
        }
    }
    export class UpdateLoyaltyPointsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            customerId?: string;
            points?: number;
            operation?: string;
            reason?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("customerId" in data && data.customerId != undefined) {
                    this.customerId = data.customerId;
                }
                if ("points" in data && data.points != undefined) {
                    this.points = data.points;
                }
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
            }
        }
        get customerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set customerId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get points() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set points(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get operation() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set operation(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set reason(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            customerId?: string;
            points?: number;
            operation?: string;
            reason?: string;
        }): UpdateLoyaltyPointsRequest {
            const message = new UpdateLoyaltyPointsRequest({});
            if (data.customerId != null) {
                message.customerId = data.customerId;
            }
            if (data.points != null) {
                message.points = data.points;
            }
            if (data.operation != null) {
                message.operation = data.operation;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            return message;
        }
        toObject() {
            const data: {
                customerId?: string;
                points?: number;
                operation?: string;
                reason?: string;
            } = {};
            if (this.customerId != null) {
                data.customerId = this.customerId;
            }
            if (this.points != null) {
                data.points = this.points;
            }
            if (this.operation != null) {
                data.operation = this.operation;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.customerId.length)
                writer.writeString(1, this.customerId);
            if (this.points != 0)
                writer.writeDouble(2, this.points);
            if (this.operation.length)
                writer.writeString(3, this.operation);
            if (this.reason.length)
                writer.writeString(4, this.reason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateLoyaltyPointsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateLoyaltyPointsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.customerId = reader.readString();
                        break;
                    case 2:
                        message.points = reader.readDouble();
                        break;
                    case 3:
                        message.operation = reader.readString();
                        break;
                    case 4:
                        message.reason = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateLoyaltyPointsRequest {
            return UpdateLoyaltyPointsRequest.deserialize(bytes);
        }
    }
    export class ProductRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            description?: string;
            price?: number;
            category?: string;
            sku?: string;
            inventory?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("category" in data && data.category != undefined) {
                    this.category = data.category;
                }
                if ("sku" in data && data.sku != undefined) {
                    this.sku = data.sku;
                }
                if ("inventory" in data && data.inventory != undefined) {
                    this.inventory = data.inventory;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get category() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set category(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get sku() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set sku(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get inventory() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set inventory(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            name?: string;
            description?: string;
            price?: number;
            category?: string;
            sku?: string;
            inventory?: number;
        }): ProductRequest {
            const message = new ProductRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.category != null) {
                message.category = data.category;
            }
            if (data.sku != null) {
                message.sku = data.sku;
            }
            if (data.inventory != null) {
                message.inventory = data.inventory;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                description?: string;
                price?: number;
                category?: string;
                sku?: string;
                inventory?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.category != null) {
                data.category = this.category;
            }
            if (this.sku != null) {
                data.sku = this.sku;
            }
            if (this.inventory != null) {
                data.inventory = this.inventory;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.price != 0)
                writer.writeDouble(3, this.price);
            if (this.category.length)
                writer.writeString(4, this.category);
            if (this.sku.length)
                writer.writeString(5, this.sku);
            if (this.inventory != 0)
                writer.writeInt32(6, this.inventory);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProductRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProductRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.price = reader.readDouble();
                        break;
                    case 4:
                        message.category = reader.readString();
                        break;
                    case 5:
                        message.sku = reader.readString();
                        break;
                    case 6:
                        message.inventory = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProductRequest {
            return ProductRequest.deserialize(bytes);
        }
    }
    export class SalesProductResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            product?: ProductData;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("product" in data && data.product != undefined) {
                    this.product = data.product;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get product() {
            return pb_1.Message.getWrapperField(this, ProductData, 3) as ProductData;
        }
        set product(value: ProductData) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_product() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            product?: ReturnType<typeof ProductData.prototype.toObject>;
        }): SalesProductResponse {
            const message = new SalesProductResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.product != null) {
                message.product = ProductData.fromObject(data.product);
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                product?: ReturnType<typeof ProductData.prototype.toObject>;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.product != null) {
                data.product = this.product.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.has_product)
                writer.writeMessage(3, this.product, () => this.product.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SalesProductResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SalesProductResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.product, () => message.product = ProductData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SalesProductResponse {
            return SalesProductResponse.deserialize(bytes);
        }
    }
    export class ProductData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            description?: string;
            price?: number;
            category?: string;
            sku?: string;
            inventory?: number;
            createdAt?: number;
            updatedAt?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("category" in data && data.category != undefined) {
                    this.category = data.category;
                }
                if ("sku" in data && data.sku != undefined) {
                    this.sku = data.sku;
                }
                if ("inventory" in data && data.inventory != undefined) {
                    this.inventory = data.inventory;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get category() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set category(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get sku() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set sku(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get inventory() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set inventory(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set createdAt(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get updatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set updatedAt(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            description?: string;
            price?: number;
            category?: string;
            sku?: string;
            inventory?: number;
            createdAt?: number;
            updatedAt?: number;
        }): ProductData {
            const message = new ProductData({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.category != null) {
                message.category = data.category;
            }
            if (data.sku != null) {
                message.sku = data.sku;
            }
            if (data.inventory != null) {
                message.inventory = data.inventory;
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.updatedAt != null) {
                message.updatedAt = data.updatedAt;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                description?: string;
                price?: number;
                category?: string;
                sku?: string;
                inventory?: number;
                createdAt?: number;
                updatedAt?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.category != null) {
                data.category = this.category;
            }
            if (this.sku != null) {
                data.sku = this.sku;
            }
            if (this.inventory != null) {
                data.inventory = this.inventory;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.price != 0)
                writer.writeDouble(4, this.price);
            if (this.category.length)
                writer.writeString(5, this.category);
            if (this.sku.length)
                writer.writeString(6, this.sku);
            if (this.inventory != 0)
                writer.writeInt32(7, this.inventory);
            if (this.createdAt != 0)
                writer.writeUint64(8, this.createdAt);
            if (this.updatedAt != 0)
                writer.writeUint64(9, this.updatedAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProductData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProductData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.price = reader.readDouble();
                        break;
                    case 5:
                        message.category = reader.readString();
                        break;
                    case 6:
                        message.sku = reader.readString();
                        break;
                    case 7:
                        message.inventory = reader.readInt32();
                        break;
                    case 8:
                        message.createdAt = reader.readUint64();
                        break;
                    case 9:
                        message.updatedAt = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProductData {
            return ProductData.deserialize(bytes);
        }
    }
    export class UpdateSalesProductRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            productId?: string;
            name?: string;
            description?: string;
            price?: number;
            category?: string;
            sku?: string;
            inventory?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("productId" in data && data.productId != undefined) {
                    this.productId = data.productId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("category" in data && data.category != undefined) {
                    this.category = data.category;
                }
                if ("sku" in data && data.sku != undefined) {
                    this.sku = data.sku;
                }
                if ("inventory" in data && data.inventory != undefined) {
                    this.inventory = data.inventory;
                }
            }
        }
        get productId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set productId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get category() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set category(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get sku() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set sku(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get inventory() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set inventory(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            productId?: string;
            name?: string;
            description?: string;
            price?: number;
            category?: string;
            sku?: string;
            inventory?: number;
        }): UpdateSalesProductRequest {
            const message = new UpdateSalesProductRequest({});
            if (data.productId != null) {
                message.productId = data.productId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.category != null) {
                message.category = data.category;
            }
            if (data.sku != null) {
                message.sku = data.sku;
            }
            if (data.inventory != null) {
                message.inventory = data.inventory;
            }
            return message;
        }
        toObject() {
            const data: {
                productId?: string;
                name?: string;
                description?: string;
                price?: number;
                category?: string;
                sku?: string;
                inventory?: number;
            } = {};
            if (this.productId != null) {
                data.productId = this.productId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.category != null) {
                data.category = this.category;
            }
            if (this.sku != null) {
                data.sku = this.sku;
            }
            if (this.inventory != null) {
                data.inventory = this.inventory;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.productId.length)
                writer.writeString(1, this.productId);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.price != 0)
                writer.writeDouble(4, this.price);
            if (this.category.length)
                writer.writeString(5, this.category);
            if (this.sku.length)
                writer.writeString(6, this.sku);
            if (this.inventory != 0)
                writer.writeInt32(7, this.inventory);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateSalesProductRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateSalesProductRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.productId = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.price = reader.readDouble();
                        break;
                    case 5:
                        message.category = reader.readString();
                        break;
                    case 6:
                        message.sku = reader.readString();
                        break;
                    case 7:
                        message.inventory = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateSalesProductRequest {
            return UpdateSalesProductRequest.deserialize(bytes);
        }
    }
    export class DeleteSalesProductRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            productId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("productId" in data && data.productId != undefined) {
                    this.productId = data.productId;
                }
            }
        }
        get productId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set productId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            productId?: string;
        }): DeleteSalesProductRequest {
            const message = new DeleteSalesProductRequest({});
            if (data.productId != null) {
                message.productId = data.productId;
            }
            return message;
        }
        toObject() {
            const data: {
                productId?: string;
            } = {};
            if (this.productId != null) {
                data.productId = this.productId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.productId.length)
                writer.writeString(1, this.productId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteSalesProductRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteSalesProductRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.productId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteSalesProductRequest {
            return DeleteSalesProductRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedSalesEnablementServiceService {
        static definition = {
            connectStripe: {
                path: "/tmq.SalesEnablementService/connectStripe",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ConnectUrlRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ConnectUrlRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ConnectUrlResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ConnectUrlResponse.deserialize(new Uint8Array(bytes))
            },
            createCustomer: {
                path: "/tmq.SalesEnablementService/createCustomer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CustomerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CustomerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CustomerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CustomerResponse.deserialize(new Uint8Array(bytes))
            },
            updateCustomer: {
                path: "/tmq.SalesEnablementService/updateCustomer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateCustomerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateCustomerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CustomerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CustomerResponse.deserialize(new Uint8Array(bytes))
            },
            getCustomer: {
                path: "/tmq.SalesEnablementService/getCustomer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetCustomerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetCustomerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CustomerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CustomerResponse.deserialize(new Uint8Array(bytes))
            },
            listCustomers: {
                path: "/tmq.SalesEnablementService/listCustomers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListCustomersRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListCustomersRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListCustomersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListCustomersResponse.deserialize(new Uint8Array(bytes))
            },
            createDiscountCode: {
                path: "/tmq.SalesEnablementService/createDiscountCode",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DiscountCodeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DiscountCodeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DiscountCodeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DiscountCodeResponse.deserialize(new Uint8Array(bytes))
            },
            updateDiscountCode: {
                path: "/tmq.SalesEnablementService/updateDiscountCode",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateDiscountCodeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateDiscountCodeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DiscountCodeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DiscountCodeResponse.deserialize(new Uint8Array(bytes))
            },
            getDiscountCode: {
                path: "/tmq.SalesEnablementService/getDiscountCode",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetDiscountCodeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetDiscountCodeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DiscountCodeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DiscountCodeResponse.deserialize(new Uint8Array(bytes))
            },
            listDiscountCodes: {
                path: "/tmq.SalesEnablementService/listDiscountCodes",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListDiscountCodesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListDiscountCodesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListDiscountCodesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListDiscountCodesResponse.deserialize(new Uint8Array(bytes))
            },
            createInvoice: {
                path: "/tmq.SalesEnablementService/createInvoice",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: InvoiceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => InvoiceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: InvoiceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => InvoiceResponse.deserialize(new Uint8Array(bytes))
            },
            updateInvoice: {
                path: "/tmq.SalesEnablementService/updateInvoice",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateInvoiceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateInvoiceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: InvoiceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => InvoiceResponse.deserialize(new Uint8Array(bytes))
            },
            getInvoice: {
                path: "/tmq.SalesEnablementService/getInvoice",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetInvoiceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetInvoiceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: InvoiceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => InvoiceResponse.deserialize(new Uint8Array(bytes))
            },
            listInvoices: {
                path: "/tmq.SalesEnablementService/listInvoices",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListInvoicesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListInvoicesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListInvoicesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListInvoicesResponse.deserialize(new Uint8Array(bytes))
            },
            createLoyaltyPoints: {
                path: "/tmq.SalesEnablementService/createLoyaltyPoints",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LoyaltyPointsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LoyaltyPointsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LoyaltyPointsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LoyaltyPointsResponse.deserialize(new Uint8Array(bytes))
            },
            getCustomerLoyaltyStatus: {
                path: "/tmq.SalesEnablementService/getCustomerLoyaltyStatus",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CustomerLoyaltyStatusRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CustomerLoyaltyStatusRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CustomerLoyaltyStatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CustomerLoyaltyStatusResponse.deserialize(new Uint8Array(bytes))
            },
            updateLoyaltyPoints: {
                path: "/tmq.SalesEnablementService/updateLoyaltyPoints",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateLoyaltyPointsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateLoyaltyPointsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LoyaltyPointsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LoyaltyPointsResponse.deserialize(new Uint8Array(bytes))
            },
            spendLoyaltyPoints: {
                path: "/tmq.SalesEnablementService/spendLoyaltyPoints",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LoyaltyPointsSpendRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LoyaltyPointsSpendRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LoyaltyPointsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LoyaltyPointsResponse.deserialize(new Uint8Array(bytes))
            },
            addProduct: {
                path: "/tmq.SalesEnablementService/addProduct",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ProductRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ProductRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SalesProductResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SalesProductResponse.deserialize(new Uint8Array(bytes))
            },
            updateProduct: {
                path: "/tmq.SalesEnablementService/updateProduct",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateSalesProductRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateSalesProductRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SalesProductResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SalesProductResponse.deserialize(new Uint8Array(bytes))
            },
            deleteProduct: {
                path: "/tmq.SalesEnablementService/deleteProduct",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteSalesProductRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteSalesProductRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SalesProductResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SalesProductResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract connectStripe(call: grpc_1.ServerUnaryCall<ConnectUrlRequest, ConnectUrlResponse>, callback: grpc_1.sendUnaryData<ConnectUrlResponse>): void;
        abstract createCustomer(call: grpc_1.ServerUnaryCall<CustomerRequest, CustomerResponse>, callback: grpc_1.sendUnaryData<CustomerResponse>): void;
        abstract updateCustomer(call: grpc_1.ServerUnaryCall<UpdateCustomerRequest, CustomerResponse>, callback: grpc_1.sendUnaryData<CustomerResponse>): void;
        abstract getCustomer(call: grpc_1.ServerUnaryCall<GetCustomerRequest, CustomerResponse>, callback: grpc_1.sendUnaryData<CustomerResponse>): void;
        abstract listCustomers(call: grpc_1.ServerUnaryCall<ListCustomersRequest, ListCustomersResponse>, callback: grpc_1.sendUnaryData<ListCustomersResponse>): void;
        abstract createDiscountCode(call: grpc_1.ServerUnaryCall<DiscountCodeRequest, DiscountCodeResponse>, callback: grpc_1.sendUnaryData<DiscountCodeResponse>): void;
        abstract updateDiscountCode(call: grpc_1.ServerUnaryCall<UpdateDiscountCodeRequest, DiscountCodeResponse>, callback: grpc_1.sendUnaryData<DiscountCodeResponse>): void;
        abstract getDiscountCode(call: grpc_1.ServerUnaryCall<GetDiscountCodeRequest, DiscountCodeResponse>, callback: grpc_1.sendUnaryData<DiscountCodeResponse>): void;
        abstract listDiscountCodes(call: grpc_1.ServerUnaryCall<ListDiscountCodesRequest, ListDiscountCodesResponse>, callback: grpc_1.sendUnaryData<ListDiscountCodesResponse>): void;
        abstract createInvoice(call: grpc_1.ServerUnaryCall<InvoiceRequest, InvoiceResponse>, callback: grpc_1.sendUnaryData<InvoiceResponse>): void;
        abstract updateInvoice(call: grpc_1.ServerUnaryCall<UpdateInvoiceRequest, InvoiceResponse>, callback: grpc_1.sendUnaryData<InvoiceResponse>): void;
        abstract getInvoice(call: grpc_1.ServerUnaryCall<GetInvoiceRequest, InvoiceResponse>, callback: grpc_1.sendUnaryData<InvoiceResponse>): void;
        abstract listInvoices(call: grpc_1.ServerUnaryCall<ListInvoicesRequest, ListInvoicesResponse>, callback: grpc_1.sendUnaryData<ListInvoicesResponse>): void;
        abstract createLoyaltyPoints(call: grpc_1.ServerUnaryCall<LoyaltyPointsRequest, LoyaltyPointsResponse>, callback: grpc_1.sendUnaryData<LoyaltyPointsResponse>): void;
        abstract getCustomerLoyaltyStatus(call: grpc_1.ServerUnaryCall<CustomerLoyaltyStatusRequest, CustomerLoyaltyStatusResponse>, callback: grpc_1.sendUnaryData<CustomerLoyaltyStatusResponse>): void;
        abstract updateLoyaltyPoints(call: grpc_1.ServerUnaryCall<UpdateLoyaltyPointsRequest, LoyaltyPointsResponse>, callback: grpc_1.sendUnaryData<LoyaltyPointsResponse>): void;
        abstract spendLoyaltyPoints(call: grpc_1.ServerUnaryCall<LoyaltyPointsSpendRequest, LoyaltyPointsResponse>, callback: grpc_1.sendUnaryData<LoyaltyPointsResponse>): void;
        abstract addProduct(call: grpc_1.ServerUnaryCall<ProductRequest, SalesProductResponse>, callback: grpc_1.sendUnaryData<SalesProductResponse>): void;
        abstract updateProduct(call: grpc_1.ServerUnaryCall<UpdateSalesProductRequest, SalesProductResponse>, callback: grpc_1.sendUnaryData<SalesProductResponse>): void;
        abstract deleteProduct(call: grpc_1.ServerUnaryCall<DeleteSalesProductRequest, SalesProductResponse>, callback: grpc_1.sendUnaryData<SalesProductResponse>): void;
    }
    export class SalesEnablementServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedSalesEnablementServiceService.definition, "SalesEnablementService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        connectStripe: GrpcUnaryServiceInterface<ConnectUrlRequest, ConnectUrlResponse> = (message: ConnectUrlRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ConnectUrlResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ConnectUrlResponse>, callback?: grpc_1.requestCallback<ConnectUrlResponse>): grpc_1.ClientUnaryCall => {
            return super.connectStripe(message, metadata, options, callback);
        };
        createCustomer: GrpcUnaryServiceInterface<CustomerRequest, CustomerResponse> = (message: CustomerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CustomerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CustomerResponse>, callback?: grpc_1.requestCallback<CustomerResponse>): grpc_1.ClientUnaryCall => {
            return super.createCustomer(message, metadata, options, callback);
        };
        updateCustomer: GrpcUnaryServiceInterface<UpdateCustomerRequest, CustomerResponse> = (message: UpdateCustomerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CustomerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CustomerResponse>, callback?: grpc_1.requestCallback<CustomerResponse>): grpc_1.ClientUnaryCall => {
            return super.updateCustomer(message, metadata, options, callback);
        };
        getCustomer: GrpcUnaryServiceInterface<GetCustomerRequest, CustomerResponse> = (message: GetCustomerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CustomerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CustomerResponse>, callback?: grpc_1.requestCallback<CustomerResponse>): grpc_1.ClientUnaryCall => {
            return super.getCustomer(message, metadata, options, callback);
        };
        listCustomers: GrpcUnaryServiceInterface<ListCustomersRequest, ListCustomersResponse> = (message: ListCustomersRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListCustomersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListCustomersResponse>, callback?: grpc_1.requestCallback<ListCustomersResponse>): grpc_1.ClientUnaryCall => {
            return super.listCustomers(message, metadata, options, callback);
        };
        createDiscountCode: GrpcUnaryServiceInterface<DiscountCodeRequest, DiscountCodeResponse> = (message: DiscountCodeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DiscountCodeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DiscountCodeResponse>, callback?: grpc_1.requestCallback<DiscountCodeResponse>): grpc_1.ClientUnaryCall => {
            return super.createDiscountCode(message, metadata, options, callback);
        };
        updateDiscountCode: GrpcUnaryServiceInterface<UpdateDiscountCodeRequest, DiscountCodeResponse> = (message: UpdateDiscountCodeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DiscountCodeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DiscountCodeResponse>, callback?: grpc_1.requestCallback<DiscountCodeResponse>): grpc_1.ClientUnaryCall => {
            return super.updateDiscountCode(message, metadata, options, callback);
        };
        getDiscountCode: GrpcUnaryServiceInterface<GetDiscountCodeRequest, DiscountCodeResponse> = (message: GetDiscountCodeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DiscountCodeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DiscountCodeResponse>, callback?: grpc_1.requestCallback<DiscountCodeResponse>): grpc_1.ClientUnaryCall => {
            return super.getDiscountCode(message, metadata, options, callback);
        };
        listDiscountCodes: GrpcUnaryServiceInterface<ListDiscountCodesRequest, ListDiscountCodesResponse> = (message: ListDiscountCodesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListDiscountCodesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListDiscountCodesResponse>, callback?: grpc_1.requestCallback<ListDiscountCodesResponse>): grpc_1.ClientUnaryCall => {
            return super.listDiscountCodes(message, metadata, options, callback);
        };
        createInvoice: GrpcUnaryServiceInterface<InvoiceRequest, InvoiceResponse> = (message: InvoiceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<InvoiceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<InvoiceResponse>, callback?: grpc_1.requestCallback<InvoiceResponse>): grpc_1.ClientUnaryCall => {
            return super.createInvoice(message, metadata, options, callback);
        };
        updateInvoice: GrpcUnaryServiceInterface<UpdateInvoiceRequest, InvoiceResponse> = (message: UpdateInvoiceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<InvoiceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<InvoiceResponse>, callback?: grpc_1.requestCallback<InvoiceResponse>): grpc_1.ClientUnaryCall => {
            return super.updateInvoice(message, metadata, options, callback);
        };
        getInvoice: GrpcUnaryServiceInterface<GetInvoiceRequest, InvoiceResponse> = (message: GetInvoiceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<InvoiceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<InvoiceResponse>, callback?: grpc_1.requestCallback<InvoiceResponse>): grpc_1.ClientUnaryCall => {
            return super.getInvoice(message, metadata, options, callback);
        };
        listInvoices: GrpcUnaryServiceInterface<ListInvoicesRequest, ListInvoicesResponse> = (message: ListInvoicesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListInvoicesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListInvoicesResponse>, callback?: grpc_1.requestCallback<ListInvoicesResponse>): grpc_1.ClientUnaryCall => {
            return super.listInvoices(message, metadata, options, callback);
        };
        createLoyaltyPoints: GrpcUnaryServiceInterface<LoyaltyPointsRequest, LoyaltyPointsResponse> = (message: LoyaltyPointsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoyaltyPointsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoyaltyPointsResponse>, callback?: grpc_1.requestCallback<LoyaltyPointsResponse>): grpc_1.ClientUnaryCall => {
            return super.createLoyaltyPoints(message, metadata, options, callback);
        };
        getCustomerLoyaltyStatus: GrpcUnaryServiceInterface<CustomerLoyaltyStatusRequest, CustomerLoyaltyStatusResponse> = (message: CustomerLoyaltyStatusRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CustomerLoyaltyStatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CustomerLoyaltyStatusResponse>, callback?: grpc_1.requestCallback<CustomerLoyaltyStatusResponse>): grpc_1.ClientUnaryCall => {
            return super.getCustomerLoyaltyStatus(message, metadata, options, callback);
        };
        updateLoyaltyPoints: GrpcUnaryServiceInterface<UpdateLoyaltyPointsRequest, LoyaltyPointsResponse> = (message: UpdateLoyaltyPointsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoyaltyPointsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoyaltyPointsResponse>, callback?: grpc_1.requestCallback<LoyaltyPointsResponse>): grpc_1.ClientUnaryCall => {
            return super.updateLoyaltyPoints(message, metadata, options, callback);
        };
        spendLoyaltyPoints: GrpcUnaryServiceInterface<LoyaltyPointsSpendRequest, LoyaltyPointsResponse> = (message: LoyaltyPointsSpendRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoyaltyPointsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoyaltyPointsResponse>, callback?: grpc_1.requestCallback<LoyaltyPointsResponse>): grpc_1.ClientUnaryCall => {
            return super.spendLoyaltyPoints(message, metadata, options, callback);
        };
        addProduct: GrpcUnaryServiceInterface<ProductRequest, SalesProductResponse> = (message: ProductRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SalesProductResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SalesProductResponse>, callback?: grpc_1.requestCallback<SalesProductResponse>): grpc_1.ClientUnaryCall => {
            return super.addProduct(message, metadata, options, callback);
        };
        updateProduct: GrpcUnaryServiceInterface<UpdateSalesProductRequest, SalesProductResponse> = (message: UpdateSalesProductRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SalesProductResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SalesProductResponse>, callback?: grpc_1.requestCallback<SalesProductResponse>): grpc_1.ClientUnaryCall => {
            return super.updateProduct(message, metadata, options, callback);
        };
        deleteProduct: GrpcUnaryServiceInterface<DeleteSalesProductRequest, SalesProductResponse> = (message: DeleteSalesProductRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SalesProductResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SalesProductResponse>, callback?: grpc_1.requestCallback<SalesProductResponse>): grpc_1.ClientUnaryCall => {
            return super.deleteProduct(message, metadata, options, callback);
        };
    }
}
