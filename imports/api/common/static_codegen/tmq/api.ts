/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: tmq/api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class SendMessageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            business_slug?: string;
            provider?: string;
            type?: string;
            from?: string;
            inbox_id?: string;
            text?: string;
            meta?: Map<string, string>;
            business_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("business_slug" in data && data.business_slug != undefined) {
                    this.business_slug = data.business_slug;
                }
                if ("provider" in data && data.provider != undefined) {
                    this.provider = data.provider;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("inbox_id" in data && data.inbox_id != undefined) {
                    this.inbox_id = data.inbox_id;
                }
                if ("text" in data && data.text != undefined) {
                    this.text = data.text;
                }
                if ("meta" in data && data.meta != undefined) {
                    this.meta = data.meta;
                }
                if ("business_id" in data && data.business_id != undefined) {
                    this.business_id = data.business_id;
                }
            }
            if (!this.meta)
                this.meta = new Map();
        }
        get business_slug() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set business_slug(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get provider() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set provider(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get from() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set from(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get inbox_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set inbox_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get text() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set text(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get meta() {
            return pb_1.Message.getField(this, 7) as any as Map<string, string>;
        }
        set meta(value: Map<string, string>) {
            pb_1.Message.setField(this, 7, value as any);
        }
        get business_id() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set business_id(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            business_slug?: string;
            provider?: string;
            type?: string;
            from?: string;
            inbox_id?: string;
            text?: string;
            meta?: {
                [key: string]: string;
            };
            business_id?: string;
        }): SendMessageRequest {
            const message = new SendMessageRequest({});
            if (data.business_slug != null) {
                message.business_slug = data.business_slug;
            }
            if (data.provider != null) {
                message.provider = data.provider;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.inbox_id != null) {
                message.inbox_id = data.inbox_id;
            }
            if (data.text != null) {
                message.text = data.text;
            }
            if (typeof data.meta == "object") {
                message.meta = new Map(Object.entries(data.meta));
            }
            if (data.business_id != null) {
                message.business_id = data.business_id;
            }
            return message;
        }
        toObject() {
            const data: {
                business_slug?: string;
                provider?: string;
                type?: string;
                from?: string;
                inbox_id?: string;
                text?: string;
                meta?: {
                    [key: string]: string;
                };
                business_id?: string;
            } = {};
            if (this.business_slug != null) {
                data.business_slug = this.business_slug;
            }
            if (this.provider != null) {
                data.provider = this.provider;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.inbox_id != null) {
                data.inbox_id = this.inbox_id;
            }
            if (this.text != null) {
                data.text = this.text;
            }
            if (this.meta != null) {
                data.meta = (Object.fromEntries)(this.meta);
            }
            if (this.business_id != null) {
                data.business_id = this.business_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.business_slug.length)
                writer.writeString(1, this.business_slug);
            if (this.provider.length)
                writer.writeString(2, this.provider);
            if (this.type.length)
                writer.writeString(3, this.type);
            if (this.from.length)
                writer.writeString(4, this.from);
            if (this.inbox_id.length)
                writer.writeString(5, this.inbox_id);
            if (this.text.length)
                writer.writeString(6, this.text);
            for (const [key, value] of this.meta) {
                writer.writeMessage(7, this.meta, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.business_id.length)
                writer.writeString(8, this.business_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendMessageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendMessageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.business_slug = reader.readString();
                        break;
                    case 2:
                        message.provider = reader.readString();
                        break;
                    case 3:
                        message.type = reader.readString();
                        break;
                    case 4:
                        message.from = reader.readString();
                        break;
                    case 5:
                        message.inbox_id = reader.readString();
                        break;
                    case 6:
                        message.text = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.meta as any, reader, reader.readString, reader.readString));
                        break;
                    case 8:
                        message.business_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendMessageRequest {
            return SendMessageRequest.deserialize(bytes);
        }
    }
    export class SendMessageResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            error_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            error_message?: string;
        }): SendMessageResponse {
            const message = new SendMessageResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                error_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.error_message.length)
                writer.writeString(2, this.error_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendMessageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendMessageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.error_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendMessageResponse {
            return SendMessageResponse.deserialize(bytes);
        }
    }
    export class FetchSuggestionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            url?: string;
            username?: string;
            password?: string;
            query?: string;
            min?: number;
            max?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("min" in data && data.min != undefined) {
                    this.min = data.min;
                }
                if ("max" in data && data.max != undefined) {
                    this.max = data.max;
                }
            }
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get query() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set query(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get min() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set min(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get max() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set max(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            url?: string;
            username?: string;
            password?: string;
            query?: string;
            min?: number;
            max?: number;
        }): FetchSuggestionsRequest {
            const message = new FetchSuggestionsRequest({});
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.query != null) {
                message.query = data.query;
            }
            if (data.min != null) {
                message.min = data.min;
            }
            if (data.max != null) {
                message.max = data.max;
            }
            return message;
        }
        toObject() {
            const data: {
                url?: string;
                username?: string;
                password?: string;
                query?: string;
                min?: number;
                max?: number;
            } = {};
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.query != null) {
                data.query = this.query;
            }
            if (this.min != null) {
                data.min = this.min;
            }
            if (this.max != null) {
                data.max = this.max;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.url.length)
                writer.writeString(1, this.url);
            if (this.username.length)
                writer.writeString(2, this.username);
            if (this.password.length)
                writer.writeString(3, this.password);
            if (this.query.length)
                writer.writeString(4, this.query);
            if (this.min != 0)
                writer.writeInt32(5, this.min);
            if (this.max != 0)
                writer.writeInt32(6, this.max);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchSuggestionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchSuggestionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.url = reader.readString();
                        break;
                    case 2:
                        message.username = reader.readString();
                        break;
                    case 3:
                        message.password = reader.readString();
                        break;
                    case 4:
                        message.query = reader.readString();
                        break;
                    case 5:
                        message.min = reader.readInt32();
                        break;
                    case 6:
                        message.max = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchSuggestionsRequest {
            return FetchSuggestionsRequest.deserialize(bytes);
        }
    }
    export class FetchSuggestionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            error_message?: string;
            suggestions?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
                if ("suggestions" in data && data.suggestions != undefined) {
                    this.suggestions = data.suggestions;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get suggestions() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set suggestions(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            error_message?: string;
            suggestions?: string[];
        }): FetchSuggestionsResponse {
            const message = new FetchSuggestionsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            if (data.suggestions != null) {
                message.suggestions = data.suggestions;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                error_message?: string;
                suggestions?: string[];
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            if (this.suggestions != null) {
                data.suggestions = this.suggestions;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.error_message.length)
                writer.writeString(2, this.error_message);
            if (this.suggestions.length)
                writer.writeRepeatedString(3, this.suggestions);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchSuggestionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchSuggestionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.error_message = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchSuggestionsResponse {
            return FetchSuggestionsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedApiServiceService {
        static definition = {
            SendMessage: {
                path: "/tmq.ApiService/SendMessage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SendMessageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SendMessageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SendMessageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SendMessageResponse.deserialize(new Uint8Array(bytes))
            },
            FetchSuggestions: {
                path: "/tmq.ApiService/FetchSuggestions",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FetchSuggestionsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FetchSuggestionsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FetchSuggestionsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FetchSuggestionsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract SendMessage(call: grpc_1.ServerUnaryCall<SendMessageRequest, SendMessageResponse>, callback: grpc_1.sendUnaryData<SendMessageResponse>): void;
        abstract FetchSuggestions(call: grpc_1.ServerUnaryCall<FetchSuggestionsRequest, FetchSuggestionsResponse>, callback: grpc_1.sendUnaryData<FetchSuggestionsResponse>): void;
    }
    export class ApiServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedApiServiceService.definition, "ApiService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        SendMessage: GrpcUnaryServiceInterface<SendMessageRequest, SendMessageResponse> = (message: SendMessageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SendMessageResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SendMessageResponse>, callback?: grpc_1.requestCallback<SendMessageResponse>): grpc_1.ClientUnaryCall => {
            return super.SendMessage(message, metadata, options, callback);
        };
        FetchSuggestions: GrpcUnaryServiceInterface<FetchSuggestionsRequest, FetchSuggestionsResponse> = (message: FetchSuggestionsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FetchSuggestionsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FetchSuggestionsResponse>, callback?: grpc_1.requestCallback<FetchSuggestionsResponse>): grpc_1.ClientUnaryCall => {
            return super.FetchSuggestions(message, metadata, options, callback);
        };
    }
}
