/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: tmq/product.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class CreateProductRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            productName?: string;
            productDescription?: string;
            productCategory?: string;
            productPrice?: string;
            productImage?: string;
            brand?: string;
            instock?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("productName" in data && data.productName != undefined) {
                    this.productName = data.productName;
                }
                if ("productDescription" in data && data.productDescription != undefined) {
                    this.productDescription = data.productDescription;
                }
                if ("productCategory" in data && data.productCategory != undefined) {
                    this.productCategory = data.productCategory;
                }
                if ("productPrice" in data && data.productPrice != undefined) {
                    this.productPrice = data.productPrice;
                }
                if ("productImage" in data && data.productImage != undefined) {
                    this.productImage = data.productImage;
                }
                if ("brand" in data && data.brand != undefined) {
                    this.brand = data.brand;
                }
                if ("instock" in data && data.instock != undefined) {
                    this.instock = data.instock;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get productName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set productName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get productDescription() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set productDescription(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get productCategory() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set productCategory(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get productPrice() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set productPrice(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get productImage() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set productImage(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get brand() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set brand(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get instock() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set instock(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            userId?: string;
            productName?: string;
            productDescription?: string;
            productCategory?: string;
            productPrice?: string;
            productImage?: string;
            brand?: string;
            instock?: string;
        }): CreateProductRequest {
            const message = new CreateProductRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.productName != null) {
                message.productName = data.productName;
            }
            if (data.productDescription != null) {
                message.productDescription = data.productDescription;
            }
            if (data.productCategory != null) {
                message.productCategory = data.productCategory;
            }
            if (data.productPrice != null) {
                message.productPrice = data.productPrice;
            }
            if (data.productImage != null) {
                message.productImage = data.productImage;
            }
            if (data.brand != null) {
                message.brand = data.brand;
            }
            if (data.instock != null) {
                message.instock = data.instock;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                productName?: string;
                productDescription?: string;
                productCategory?: string;
                productPrice?: string;
                productImage?: string;
                brand?: string;
                instock?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.productName != null) {
                data.productName = this.productName;
            }
            if (this.productDescription != null) {
                data.productDescription = this.productDescription;
            }
            if (this.productCategory != null) {
                data.productCategory = this.productCategory;
            }
            if (this.productPrice != null) {
                data.productPrice = this.productPrice;
            }
            if (this.productImage != null) {
                data.productImage = this.productImage;
            }
            if (this.brand != null) {
                data.brand = this.brand;
            }
            if (this.instock != null) {
                data.instock = this.instock;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.productName.length)
                writer.writeString(2, this.productName);
            if (this.productDescription.length)
                writer.writeString(3, this.productDescription);
            if (this.productCategory.length)
                writer.writeString(4, this.productCategory);
            if (this.productPrice.length)
                writer.writeString(5, this.productPrice);
            if (this.productImage.length)
                writer.writeString(6, this.productImage);
            if (this.brand.length)
                writer.writeString(7, this.brand);
            if (this.instock.length)
                writer.writeString(8, this.instock);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateProductRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateProductRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.productName = reader.readString();
                        break;
                    case 3:
                        message.productDescription = reader.readString();
                        break;
                    case 4:
                        message.productCategory = reader.readString();
                        break;
                    case 5:
                        message.productPrice = reader.readString();
                        break;
                    case 6:
                        message.productImage = reader.readString();
                        break;
                    case 7:
                        message.brand = reader.readString();
                        break;
                    case 8:
                        message.instock = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateProductRequest {
            return CreateProductRequest.deserialize(bytes);
        }
    }
    export class UpdateProductRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            productId?: string;
            userId?: string;
            productName?: string;
            productDescription?: string;
            productCategory?: string;
            productPrice?: string;
            productImage?: string;
            brand?: string;
            instock?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("productId" in data && data.productId != undefined) {
                    this.productId = data.productId;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("productName" in data && data.productName != undefined) {
                    this.productName = data.productName;
                }
                if ("productDescription" in data && data.productDescription != undefined) {
                    this.productDescription = data.productDescription;
                }
                if ("productCategory" in data && data.productCategory != undefined) {
                    this.productCategory = data.productCategory;
                }
                if ("productPrice" in data && data.productPrice != undefined) {
                    this.productPrice = data.productPrice;
                }
                if ("productImage" in data && data.productImage != undefined) {
                    this.productImage = data.productImage;
                }
                if ("brand" in data && data.brand != undefined) {
                    this.brand = data.brand;
                }
                if ("instock" in data && data.instock != undefined) {
                    this.instock = data.instock;
                }
            }
        }
        get productId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set productId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get productName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set productName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get productDescription() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set productDescription(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get productCategory() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set productCategory(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get productPrice() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set productPrice(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get productImage() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set productImage(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get brand() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set brand(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get instock() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set instock(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            productId?: string;
            userId?: string;
            productName?: string;
            productDescription?: string;
            productCategory?: string;
            productPrice?: string;
            productImage?: string;
            brand?: string;
            instock?: string;
        }): UpdateProductRequest {
            const message = new UpdateProductRequest({});
            if (data.productId != null) {
                message.productId = data.productId;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.productName != null) {
                message.productName = data.productName;
            }
            if (data.productDescription != null) {
                message.productDescription = data.productDescription;
            }
            if (data.productCategory != null) {
                message.productCategory = data.productCategory;
            }
            if (data.productPrice != null) {
                message.productPrice = data.productPrice;
            }
            if (data.productImage != null) {
                message.productImage = data.productImage;
            }
            if (data.brand != null) {
                message.brand = data.brand;
            }
            if (data.instock != null) {
                message.instock = data.instock;
            }
            return message;
        }
        toObject() {
            const data: {
                productId?: string;
                userId?: string;
                productName?: string;
                productDescription?: string;
                productCategory?: string;
                productPrice?: string;
                productImage?: string;
                brand?: string;
                instock?: string;
            } = {};
            if (this.productId != null) {
                data.productId = this.productId;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.productName != null) {
                data.productName = this.productName;
            }
            if (this.productDescription != null) {
                data.productDescription = this.productDescription;
            }
            if (this.productCategory != null) {
                data.productCategory = this.productCategory;
            }
            if (this.productPrice != null) {
                data.productPrice = this.productPrice;
            }
            if (this.productImage != null) {
                data.productImage = this.productImage;
            }
            if (this.brand != null) {
                data.brand = this.brand;
            }
            if (this.instock != null) {
                data.instock = this.instock;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.productId.length)
                writer.writeString(1, this.productId);
            if (this.userId.length)
                writer.writeString(2, this.userId);
            if (this.productName.length)
                writer.writeString(3, this.productName);
            if (this.productDescription.length)
                writer.writeString(4, this.productDescription);
            if (this.productCategory.length)
                writer.writeString(5, this.productCategory);
            if (this.productPrice.length)
                writer.writeString(6, this.productPrice);
            if (this.productImage.length)
                writer.writeString(7, this.productImage);
            if (this.brand.length)
                writer.writeString(8, this.brand);
            if (this.instock.length)
                writer.writeString(9, this.instock);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateProductRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateProductRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.productId = reader.readString();
                        break;
                    case 2:
                        message.userId = reader.readString();
                        break;
                    case 3:
                        message.productName = reader.readString();
                        break;
                    case 4:
                        message.productDescription = reader.readString();
                        break;
                    case 5:
                        message.productCategory = reader.readString();
                        break;
                    case 6:
                        message.productPrice = reader.readString();
                        break;
                    case 7:
                        message.productImage = reader.readString();
                        break;
                    case 8:
                        message.brand = reader.readString();
                        break;
                    case 9:
                        message.instock = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateProductRequest {
            return UpdateProductRequest.deserialize(bytes);
        }
    }
    export class AllProducts extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            productId?: string;
            productName?: string;
            productDescription?: string;
            productCategory?: string;
            productPrice?: string;
            productImage?: string;
            brand?: string;
            instock?: string;
            userId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("productId" in data && data.productId != undefined) {
                    this.productId = data.productId;
                }
                if ("productName" in data && data.productName != undefined) {
                    this.productName = data.productName;
                }
                if ("productDescription" in data && data.productDescription != undefined) {
                    this.productDescription = data.productDescription;
                }
                if ("productCategory" in data && data.productCategory != undefined) {
                    this.productCategory = data.productCategory;
                }
                if ("productPrice" in data && data.productPrice != undefined) {
                    this.productPrice = data.productPrice;
                }
                if ("productImage" in data && data.productImage != undefined) {
                    this.productImage = data.productImage;
                }
                if ("brand" in data && data.brand != undefined) {
                    this.brand = data.brand;
                }
                if ("instock" in data && data.instock != undefined) {
                    this.instock = data.instock;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
            }
        }
        get productId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set productId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get productName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set productName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get productDescription() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set productDescription(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get productCategory() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set productCategory(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get productPrice() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set productPrice(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get productImage() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set productImage(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get brand() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set brand(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get instock() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set instock(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            productId?: string;
            productName?: string;
            productDescription?: string;
            productCategory?: string;
            productPrice?: string;
            productImage?: string;
            brand?: string;
            instock?: string;
            userId?: string;
        }): AllProducts {
            const message = new AllProducts({});
            if (data.productId != null) {
                message.productId = data.productId;
            }
            if (data.productName != null) {
                message.productName = data.productName;
            }
            if (data.productDescription != null) {
                message.productDescription = data.productDescription;
            }
            if (data.productCategory != null) {
                message.productCategory = data.productCategory;
            }
            if (data.productPrice != null) {
                message.productPrice = data.productPrice;
            }
            if (data.productImage != null) {
                message.productImage = data.productImage;
            }
            if (data.brand != null) {
                message.brand = data.brand;
            }
            if (data.instock != null) {
                message.instock = data.instock;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            return message;
        }
        toObject() {
            const data: {
                productId?: string;
                productName?: string;
                productDescription?: string;
                productCategory?: string;
                productPrice?: string;
                productImage?: string;
                brand?: string;
                instock?: string;
                userId?: string;
            } = {};
            if (this.productId != null) {
                data.productId = this.productId;
            }
            if (this.productName != null) {
                data.productName = this.productName;
            }
            if (this.productDescription != null) {
                data.productDescription = this.productDescription;
            }
            if (this.productCategory != null) {
                data.productCategory = this.productCategory;
            }
            if (this.productPrice != null) {
                data.productPrice = this.productPrice;
            }
            if (this.productImage != null) {
                data.productImage = this.productImage;
            }
            if (this.brand != null) {
                data.brand = this.brand;
            }
            if (this.instock != null) {
                data.instock = this.instock;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.productId.length)
                writer.writeString(1, this.productId);
            if (this.productName.length)
                writer.writeString(2, this.productName);
            if (this.productDescription.length)
                writer.writeString(3, this.productDescription);
            if (this.productCategory.length)
                writer.writeString(4, this.productCategory);
            if (this.productPrice.length)
                writer.writeString(5, this.productPrice);
            if (this.productImage.length)
                writer.writeString(6, this.productImage);
            if (this.brand.length)
                writer.writeString(7, this.brand);
            if (this.instock.length)
                writer.writeString(8, this.instock);
            if (this.userId.length)
                writer.writeString(9, this.userId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AllProducts {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AllProducts();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.productId = reader.readString();
                        break;
                    case 2:
                        message.productName = reader.readString();
                        break;
                    case 3:
                        message.productDescription = reader.readString();
                        break;
                    case 4:
                        message.productCategory = reader.readString();
                        break;
                    case 5:
                        message.productPrice = reader.readString();
                        break;
                    case 6:
                        message.productImage = reader.readString();
                        break;
                    case 7:
                        message.brand = reader.readString();
                        break;
                    case 8:
                        message.instock = reader.readString();
                        break;
                    case 9:
                        message.userId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AllProducts {
            return AllProducts.deserialize(bytes);
        }
    }
    export class FetchProductRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            lastBasis?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("lastBasis" in data && data.lastBasis != undefined) {
                    this.lastBasis = data.lastBasis;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get lastBasis() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set lastBasis(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            userId?: string;
            lastBasis?: number;
        }): FetchProductRequest {
            const message = new FetchProductRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.lastBasis != null) {
                message.lastBasis = data.lastBasis;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                lastBasis?: number;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.lastBasis != null) {
                data.lastBasis = this.lastBasis;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.lastBasis != 0)
                writer.writeInt64(2, this.lastBasis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchProductRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchProductRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.lastBasis = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchProductRequest {
            return FetchProductRequest.deserialize(bytes);
        }
    }
    export class FetchProductResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            products?: AllProducts[];
            lastBasis?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("products" in data && data.products != undefined) {
                    this.products = data.products;
                }
                if ("lastBasis" in data && data.lastBasis != undefined) {
                    this.lastBasis = data.lastBasis;
                }
            }
        }
        get products() {
            return pb_1.Message.getRepeatedWrapperField(this, AllProducts, 1) as AllProducts[];
        }
        set products(value: AllProducts[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get lastBasis() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set lastBasis(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            products?: ReturnType<typeof AllProducts.prototype.toObject>[];
            lastBasis?: number;
        }): FetchProductResponse {
            const message = new FetchProductResponse({});
            if (data.products != null) {
                message.products = data.products.map(item => AllProducts.fromObject(item));
            }
            if (data.lastBasis != null) {
                message.lastBasis = data.lastBasis;
            }
            return message;
        }
        toObject() {
            const data: {
                products?: ReturnType<typeof AllProducts.prototype.toObject>[];
                lastBasis?: number;
            } = {};
            if (this.products != null) {
                data.products = this.products.map((item: AllProducts) => item.toObject());
            }
            if (this.lastBasis != null) {
                data.lastBasis = this.lastBasis;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.products.length)
                writer.writeRepeatedMessage(1, this.products, (item: AllProducts) => item.serialize(writer));
            if (this.lastBasis != 0)
                writer.writeInt64(2, this.lastBasis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchProductResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchProductResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.products, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AllProducts.deserialize(reader), AllProducts));
                        break;
                    case 2:
                        message.lastBasis = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchProductResponse {
            return FetchProductResponse.deserialize(bytes);
        }
    }
    export class DeleteProductRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            productId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("productId" in data && data.productId != undefined) {
                    this.productId = data.productId;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get productId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set productId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            userId?: string;
            productId?: string;
        }): DeleteProductRequest {
            const message = new DeleteProductRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.productId != null) {
                message.productId = data.productId;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                productId?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.productId != null) {
                data.productId = this.productId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.productId.length)
                writer.writeString(2, this.productId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteProductRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteProductRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.productId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteProductRequest {
            return DeleteProductRequest.deserialize(bytes);
        }
    }
    export class ProductResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): ProductResponse {
            const message = new ProductResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProductResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProductResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProductResponse {
            return ProductResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedProductServiceService {
        static definition = {
            createProduct: {
                path: "/tmq.ProductService/createProduct",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateProductRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateProductRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ProductResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ProductResponse.deserialize(new Uint8Array(bytes))
            },
            updateProduct: {
                path: "/tmq.ProductService/updateProduct",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateProductRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateProductRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ProductResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ProductResponse.deserialize(new Uint8Array(bytes))
            },
            fetchProduct: {
                path: "/tmq.ProductService/fetchProduct",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FetchProductRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FetchProductRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FetchProductResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FetchProductResponse.deserialize(new Uint8Array(bytes))
            },
            deleteProduct: {
                path: "/tmq.ProductService/deleteProduct",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteProductRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteProductRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ProductResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ProductResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract createProduct(call: grpc_1.ServerUnaryCall<CreateProductRequest, ProductResponse>, callback: grpc_1.sendUnaryData<ProductResponse>): void;
        abstract updateProduct(call: grpc_1.ServerUnaryCall<UpdateProductRequest, ProductResponse>, callback: grpc_1.sendUnaryData<ProductResponse>): void;
        abstract fetchProduct(call: grpc_1.ServerUnaryCall<FetchProductRequest, FetchProductResponse>, callback: grpc_1.sendUnaryData<FetchProductResponse>): void;
        abstract deleteProduct(call: grpc_1.ServerUnaryCall<DeleteProductRequest, ProductResponse>, callback: grpc_1.sendUnaryData<ProductResponse>): void;
    }
    export class ProductServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedProductServiceService.definition, "ProductService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        createProduct: GrpcUnaryServiceInterface<CreateProductRequest, ProductResponse> = (message: CreateProductRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ProductResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ProductResponse>, callback?: grpc_1.requestCallback<ProductResponse>): grpc_1.ClientUnaryCall => {
            return super.createProduct(message, metadata, options, callback);
        };
        updateProduct: GrpcUnaryServiceInterface<UpdateProductRequest, ProductResponse> = (message: UpdateProductRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ProductResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ProductResponse>, callback?: grpc_1.requestCallback<ProductResponse>): grpc_1.ClientUnaryCall => {
            return super.updateProduct(message, metadata, options, callback);
        };
        fetchProduct: GrpcUnaryServiceInterface<FetchProductRequest, FetchProductResponse> = (message: FetchProductRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FetchProductResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FetchProductResponse>, callback?: grpc_1.requestCallback<FetchProductResponse>): grpc_1.ClientUnaryCall => {
            return super.fetchProduct(message, metadata, options, callback);
        };
        deleteProduct: GrpcUnaryServiceInterface<DeleteProductRequest, ProductResponse> = (message: DeleteProductRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ProductResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ProductResponse>, callback?: grpc_1.requestCallback<ProductResponse>): grpc_1.ClientUnaryCall => {
            return super.deleteProduct(message, metadata, options, callback);
        };
    }
}
