/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: tmq/fileUpload.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class FetchFilesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            lastBasis?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("lastBasis" in data && data.lastBasis != undefined) {
                    this.lastBasis = data.lastBasis;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get lastBasis() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set lastBasis(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            userId?: string;
            lastBasis?: number;
        }): FetchFilesRequest {
            const message = new FetchFilesRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.lastBasis != null) {
                message.lastBasis = data.lastBasis;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                lastBasis?: number;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.lastBasis != null) {
                data.lastBasis = this.lastBasis;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.lastBasis != 0)
                writer.writeInt64(2, this.lastBasis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchFilesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchFilesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.lastBasis = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchFilesRequest {
            return FetchFilesRequest.deserialize(bytes);
        }
    }
    export class AllFiles extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            type?: string;
            size?: string;
            path?: string;
            lastBasis?: number;
            createdAt?: number;
            updatedAt?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("lastBasis" in data && data.lastBasis != undefined) {
                    this.lastBasis = data.lastBasis;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set size(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get lastBasis() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set lastBasis(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set createdAt(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get updatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set updatedAt(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            type?: string;
            size?: string;
            path?: string;
            lastBasis?: number;
            createdAt?: number;
            updatedAt?: number;
        }): AllFiles {
            const message = new AllFiles({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.lastBasis != null) {
                message.lastBasis = data.lastBasis;
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.updatedAt != null) {
                message.updatedAt = data.updatedAt;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                type?: string;
                size?: string;
                path?: string;
                lastBasis?: number;
                createdAt?: number;
                updatedAt?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.lastBasis != null) {
                data.lastBasis = this.lastBasis;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.type.length)
                writer.writeString(3, this.type);
            if (this.size.length)
                writer.writeString(4, this.size);
            if (this.path.length)
                writer.writeString(5, this.path);
            if (this.lastBasis != 0)
                writer.writeInt64(6, this.lastBasis);
            if (this.createdAt != 0)
                writer.writeUint64(7, this.createdAt);
            if (this.updatedAt != 0)
                writer.writeUint64(8, this.updatedAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AllFiles {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AllFiles();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.type = reader.readString();
                        break;
                    case 4:
                        message.size = reader.readString();
                        break;
                    case 5:
                        message.path = reader.readString();
                        break;
                    case 6:
                        message.lastBasis = reader.readInt64();
                        break;
                    case 7:
                        message.createdAt = reader.readUint64();
                        break;
                    case 8:
                        message.updatedAt = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AllFiles {
            return AllFiles.deserialize(bytes);
        }
    }
    export class FetchFilesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            files?: AllFiles[];
            lastBasis?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("files" in data && data.files != undefined) {
                    this.files = data.files;
                }
                if ("lastBasis" in data && data.lastBasis != undefined) {
                    this.lastBasis = data.lastBasis;
                }
            }
        }
        get files() {
            return pb_1.Message.getRepeatedWrapperField(this, AllFiles, 1) as AllFiles[];
        }
        set files(value: AllFiles[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get lastBasis() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set lastBasis(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            files?: ReturnType<typeof AllFiles.prototype.toObject>[];
            lastBasis?: number;
        }): FetchFilesResponse {
            const message = new FetchFilesResponse({});
            if (data.files != null) {
                message.files = data.files.map(item => AllFiles.fromObject(item));
            }
            if (data.lastBasis != null) {
                message.lastBasis = data.lastBasis;
            }
            return message;
        }
        toObject() {
            const data: {
                files?: ReturnType<typeof AllFiles.prototype.toObject>[];
                lastBasis?: number;
            } = {};
            if (this.files != null) {
                data.files = this.files.map((item: AllFiles) => item.toObject());
            }
            if (this.lastBasis != null) {
                data.lastBasis = this.lastBasis;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.files.length)
                writer.writeRepeatedMessage(1, this.files, (item: AllFiles) => item.serialize(writer));
            if (this.lastBasis != 0)
                writer.writeInt64(2, this.lastBasis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchFilesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchFilesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.files, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AllFiles.deserialize(reader), AllFiles));
                        break;
                    case 2:
                        message.lastBasis = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchFilesResponse {
            return FetchFilesResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedFileServiceService {
        static definition = {
            fetchFiles: {
                path: "/tmq.FileService/fetchFiles",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FetchFilesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FetchFilesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FetchFilesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FetchFilesResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract fetchFiles(call: grpc_1.ServerUnaryCall<FetchFilesRequest, FetchFilesResponse>, callback: grpc_1.sendUnaryData<FetchFilesResponse>): void;
    }
    export class FileServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedFileServiceService.definition, "FileService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        fetchFiles: GrpcUnaryServiceInterface<FetchFilesRequest, FetchFilesResponse> = (message: FetchFilesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FetchFilesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FetchFilesResponse>, callback?: grpc_1.requestCallback<FetchFilesResponse>): grpc_1.ClientUnaryCall => {
            return super.fetchFiles(message, metadata, options, callback);
        };
    }
}
